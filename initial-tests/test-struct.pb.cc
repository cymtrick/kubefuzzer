// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test-struct.proto
// Protobuf C++ Version: 4.26.0-dev

#include "test-struct.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace teststruct {

inline constexpr testStruct::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        charvalue_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        intvalue_{0},
        floatvalue_{0} {}

template <typename>
PROTOBUF_CONSTEXPR testStruct::testStruct(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct testStructDefaultTypeInternal {
  PROTOBUF_CONSTEXPR testStructDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~testStructDefaultTypeInternal() {}
  union {
    testStruct _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 testStructDefaultTypeInternal _testStruct_default_instance_;
}  // namespace teststruct
static ::_pb::Metadata file_level_metadata_test_2dstruct_2eproto[1];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_test_2dstruct_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_test_2dstruct_2eproto = nullptr;
const ::uint32_t
    TableStruct_test_2dstruct_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::teststruct::testStruct, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::teststruct::testStruct, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::teststruct::testStruct, _impl_.intvalue_),
        PROTOBUF_FIELD_OFFSET(::teststruct::testStruct, _impl_.charvalue_),
        PROTOBUF_FIELD_OFFSET(::teststruct::testStruct, _impl_.floatvalue_),
        1,
        0,
        2,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 11, -1, sizeof(::teststruct::testStruct)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::teststruct::_testStruct_default_instance_._instance,
};
const char descriptor_table_protodef_test_2dstruct_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\021test-struct.proto\022\nteststruct\"E\n\ntestS"
    "truct\022\020\n\010IntValue\030\001 \001(\005\022\021\n\tCharValue\030\002 \001"
    "(\t\022\022\n\nFloatValue\030\003 \001(\002"
};
static ::absl::once_flag descriptor_table_test_2dstruct_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_test_2dstruct_2eproto = {
    false,
    false,
    102,
    descriptor_table_protodef_test_2dstruct_2eproto,
    "test-struct.proto",
    &descriptor_table_test_2dstruct_2eproto_once,
    nullptr,
    0,
    1,
    schemas,
    file_default_instances,
    TableStruct_test_2dstruct_2eproto::offsets,
    file_level_metadata_test_2dstruct_2eproto,
    file_level_enum_descriptors_test_2dstruct_2eproto,
    file_level_service_descriptors_test_2dstruct_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_test_2dstruct_2eproto_getter() {
  return &descriptor_table_test_2dstruct_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_test_2dstruct_2eproto(&descriptor_table_test_2dstruct_2eproto);
namespace teststruct {
// ===================================================================

class testStruct::_Internal {
 public:
  using HasBits = decltype(std::declval<testStruct>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(testStruct, _impl_._has_bits_);
};

testStruct::testStruct(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:teststruct.testStruct)
}
inline PROTOBUF_NDEBUG_INLINE testStruct::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        charvalue_(arena, from.charvalue_) {}

testStruct::testStruct(
    ::google::protobuf::Arena* arena,
    const testStruct& from)
    : ::google::protobuf::Message(arena) {
  testStruct* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, intvalue_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, intvalue_),
           offsetof(Impl_, floatvalue_) -
               offsetof(Impl_, intvalue_) +
               sizeof(Impl_::floatvalue_));

  // @@protoc_insertion_point(copy_constructor:teststruct.testStruct)
}
inline PROTOBUF_NDEBUG_INLINE testStruct::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        charvalue_(arena) {}

inline void testStruct::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, intvalue_),
           0,
           offsetof(Impl_, floatvalue_) -
               offsetof(Impl_, intvalue_) +
               sizeof(Impl_::floatvalue_));
}
testStruct::~testStruct() {
  // @@protoc_insertion_point(destructor:teststruct.testStruct)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void testStruct::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.charvalue_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
testStruct::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::ClassData
      _data_ = {
          testStruct::MergeImpl,
           nullptr,  // OnDemandRegisterArenaDtor
           &::google::protobuf::Message::kDescriptorMethods,
              PROTOBUF_FIELD_OFFSET(testStruct, _impl_._cached_size_),
      };
  return &_data_;
}
PROTOBUF_NOINLINE void testStruct::Clear() {
// @@protoc_insertion_point(message_clear_start:teststruct.testStruct)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.charvalue_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.intvalue_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.floatvalue_) -
        reinterpret_cast<char*>(&_impl_.intvalue_)) + sizeof(_impl_.floatvalue_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* testStruct::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 39, 2> testStruct::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(testStruct, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_testStruct_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::teststruct::testStruct>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional int32 IntValue = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(testStruct, _impl_.intvalue_), 1>(),
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(testStruct, _impl_.intvalue_)}},
    // optional string CharValue = 2;
    {::_pbi::TcParser::FastSS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(testStruct, _impl_.charvalue_)}},
    // optional float FloatValue = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 2, 0, PROTOBUF_FIELD_OFFSET(testStruct, _impl_.floatvalue_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional int32 IntValue = 1;
    {PROTOBUF_FIELD_OFFSET(testStruct, _impl_.intvalue_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional string CharValue = 2;
    {PROTOBUF_FIELD_OFFSET(testStruct, _impl_.charvalue_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional float FloatValue = 3;
    {PROTOBUF_FIELD_OFFSET(testStruct, _impl_.floatvalue_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
    "\25\0\11\0\0\0\0\0"
    "teststruct.testStruct"
    "CharValue"
  }},
};

::uint8_t* testStruct::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:teststruct.testStruct)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 IntValue = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_intvalue(), target);
  }

  // optional string CharValue = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_charvalue();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "teststruct.testStruct.CharValue");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional float FloatValue = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_floatvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:teststruct.testStruct)
  return target;
}

::size_t testStruct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:teststruct.testStruct)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string CharValue = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_charvalue());
    }

    // optional int32 IntValue = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_intvalue());
    }

    // optional float FloatValue = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 5;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void testStruct::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<testStruct*>(&to_msg);
  auto& from = static_cast<const testStruct&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:teststruct.testStruct)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_charvalue(from._internal_charvalue());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.intvalue_ = from._impl_.intvalue_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.floatvalue_ = from._impl_.floatvalue_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void testStruct::CopyFrom(const testStruct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:teststruct.testStruct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool testStruct::IsInitialized() const {
  return true;
}

void testStruct::InternalSwap(testStruct* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.charvalue_, &other->_impl_.charvalue_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(testStruct, _impl_.floatvalue_)
      + sizeof(testStruct::_impl_.floatvalue_)
      - PROTOBUF_FIELD_OFFSET(testStruct, _impl_.intvalue_)>(
          reinterpret_cast<char*>(&_impl_.intvalue_),
          reinterpret_cast<char*>(&other->_impl_.intvalue_));
}

::google::protobuf::Metadata testStruct::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_2dstruct_2eproto_getter, &descriptor_table_test_2dstruct_2eproto_once,
      file_level_metadata_test_2dstruct_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace teststruct
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
