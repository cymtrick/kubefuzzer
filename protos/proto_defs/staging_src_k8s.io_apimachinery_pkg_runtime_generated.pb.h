// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: staging_src_k8s.io_apimachinery_pkg_runtime_generated.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fruntime_5fgenerated_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fruntime_5fgenerated_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fruntime_5fgenerated_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fruntime_5fgenerated_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fruntime_5fgenerated_2eproto;
namespace k8s {
namespace io {
namespace apimachinery {
namespace pkg {
namespace runtime {
class RawExtension;
struct RawExtensionDefaultTypeInternal;
extern RawExtensionDefaultTypeInternal _RawExtension_default_instance_;
class TypeMeta;
struct TypeMetaDefaultTypeInternal;
extern TypeMetaDefaultTypeInternal _TypeMeta_default_instance_;
class Unknown;
struct UnknownDefaultTypeInternal;
extern UnknownDefaultTypeInternal _Unknown_default_instance_;
}  // namespace runtime
}  // namespace pkg
}  // namespace apimachinery
}  // namespace io
}  // namespace k8s
PROTOBUF_NAMESPACE_OPEN
template<> ::k8s::io::apimachinery::pkg::runtime::RawExtension* Arena::CreateMaybeMessage<::k8s::io::apimachinery::pkg::runtime::RawExtension>(Arena*);
template<> ::k8s::io::apimachinery::pkg::runtime::TypeMeta* Arena::CreateMaybeMessage<::k8s::io::apimachinery::pkg::runtime::TypeMeta>(Arena*);
template<> ::k8s::io::apimachinery::pkg::runtime::Unknown* Arena::CreateMaybeMessage<::k8s::io::apimachinery::pkg::runtime::Unknown>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace k8s {
namespace io {
namespace apimachinery {
namespace pkg {
namespace runtime {

// ===================================================================

class RawExtension final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:k8s.io.apimachinery.pkg.runtime.RawExtension) */ {
 public:
  inline RawExtension() : RawExtension(nullptr) {}
  ~RawExtension() override;
  explicit PROTOBUF_CONSTEXPR RawExtension(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RawExtension(const RawExtension& from);
  RawExtension(RawExtension&& from) noexcept
    : RawExtension() {
    *this = ::std::move(from);
  }

  inline RawExtension& operator=(const RawExtension& from) {
    CopyFrom(from);
    return *this;
  }
  inline RawExtension& operator=(RawExtension&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RawExtension& default_instance() {
    return *internal_default_instance();
  }
  static inline const RawExtension* internal_default_instance() {
    return reinterpret_cast<const RawExtension*>(
               &_RawExtension_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RawExtension& a, RawExtension& b) {
    a.Swap(&b);
  }
  inline void Swap(RawExtension* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RawExtension* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RawExtension* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RawExtension>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RawExtension& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RawExtension& from) {
    RawExtension::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RawExtension* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "k8s.io.apimachinery.pkg.runtime.RawExtension";
  }
  protected:
  explicit RawExtension(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRawFieldNumber = 1,
  };
  // optional bytes raw = 1;
  bool has_raw() const;
  private:
  bool _internal_has_raw() const;
  public:
  void clear_raw();
  const std::string& raw() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_raw(ArgT0&& arg0, ArgT... args);
  std::string* mutable_raw();
  PROTOBUF_NODISCARD std::string* release_raw();
  void set_allocated_raw(std::string* raw);
  private:
  const std::string& _internal_raw() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_raw(const std::string& value);
  std::string* _internal_mutable_raw();
  public:

  // @@protoc_insertion_point(class_scope:k8s.io.apimachinery.pkg.runtime.RawExtension)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr raw_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fruntime_5fgenerated_2eproto;
};
// -------------------------------------------------------------------

class TypeMeta final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:k8s.io.apimachinery.pkg.runtime.TypeMeta) */ {
 public:
  inline TypeMeta() : TypeMeta(nullptr) {}
  ~TypeMeta() override;
  explicit PROTOBUF_CONSTEXPR TypeMeta(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TypeMeta(const TypeMeta& from);
  TypeMeta(TypeMeta&& from) noexcept
    : TypeMeta() {
    *this = ::std::move(from);
  }

  inline TypeMeta& operator=(const TypeMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline TypeMeta& operator=(TypeMeta&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TypeMeta& default_instance() {
    return *internal_default_instance();
  }
  static inline const TypeMeta* internal_default_instance() {
    return reinterpret_cast<const TypeMeta*>(
               &_TypeMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TypeMeta& a, TypeMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(TypeMeta* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TypeMeta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TypeMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TypeMeta>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TypeMeta& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TypeMeta& from) {
    TypeMeta::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TypeMeta* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "k8s.io.apimachinery.pkg.runtime.TypeMeta";
  }
  protected:
  explicit TypeMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApiVersionFieldNumber = 1,
    kKindFieldNumber = 2,
  };
  // optional string apiVersion = 1;
  bool has_apiversion() const;
  private:
  bool _internal_has_apiversion() const;
  public:
  void clear_apiversion();
  const std::string& apiversion() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_apiversion(ArgT0&& arg0, ArgT... args);
  std::string* mutable_apiversion();
  PROTOBUF_NODISCARD std::string* release_apiversion();
  void set_allocated_apiversion(std::string* apiversion);
  private:
  const std::string& _internal_apiversion() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_apiversion(const std::string& value);
  std::string* _internal_mutable_apiversion();
  public:

  // optional string kind = 2;
  bool has_kind() const;
  private:
  bool _internal_has_kind() const;
  public:
  void clear_kind();
  const std::string& kind() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_kind(ArgT0&& arg0, ArgT... args);
  std::string* mutable_kind();
  PROTOBUF_NODISCARD std::string* release_kind();
  void set_allocated_kind(std::string* kind);
  private:
  const std::string& _internal_kind() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_kind(const std::string& value);
  std::string* _internal_mutable_kind();
  public:

  // @@protoc_insertion_point(class_scope:k8s.io.apimachinery.pkg.runtime.TypeMeta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr apiversion_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kind_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fruntime_5fgenerated_2eproto;
};
// -------------------------------------------------------------------

class Unknown final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:k8s.io.apimachinery.pkg.runtime.Unknown) */ {
 public:
  inline Unknown() : Unknown(nullptr) {}
  ~Unknown() override;
  explicit PROTOBUF_CONSTEXPR Unknown(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Unknown(const Unknown& from);
  Unknown(Unknown&& from) noexcept
    : Unknown() {
    *this = ::std::move(from);
  }

  inline Unknown& operator=(const Unknown& from) {
    CopyFrom(from);
    return *this;
  }
  inline Unknown& operator=(Unknown&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Unknown& default_instance() {
    return *internal_default_instance();
  }
  static inline const Unknown* internal_default_instance() {
    return reinterpret_cast<const Unknown*>(
               &_Unknown_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Unknown& a, Unknown& b) {
    a.Swap(&b);
  }
  inline void Swap(Unknown* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Unknown* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Unknown* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Unknown>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Unknown& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Unknown& from) {
    Unknown::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Unknown* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "k8s.io.apimachinery.pkg.runtime.Unknown";
  }
  protected:
  explicit Unknown(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRawFieldNumber = 2,
    kContentEncodingFieldNumber = 3,
    kContentTypeFieldNumber = 4,
    kTypeMetaFieldNumber = 1,
  };
  // optional bytes raw = 2;
  bool has_raw() const;
  private:
  bool _internal_has_raw() const;
  public:
  void clear_raw();
  const std::string& raw() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_raw(ArgT0&& arg0, ArgT... args);
  std::string* mutable_raw();
  PROTOBUF_NODISCARD std::string* release_raw();
  void set_allocated_raw(std::string* raw);
  private:
  const std::string& _internal_raw() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_raw(const std::string& value);
  std::string* _internal_mutable_raw();
  public:

  // optional string contentEncoding = 3;
  bool has_contentencoding() const;
  private:
  bool _internal_has_contentencoding() const;
  public:
  void clear_contentencoding();
  const std::string& contentencoding() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_contentencoding(ArgT0&& arg0, ArgT... args);
  std::string* mutable_contentencoding();
  PROTOBUF_NODISCARD std::string* release_contentencoding();
  void set_allocated_contentencoding(std::string* contentencoding);
  private:
  const std::string& _internal_contentencoding() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contentencoding(const std::string& value);
  std::string* _internal_mutable_contentencoding();
  public:

  // optional string contentType = 4;
  bool has_contenttype() const;
  private:
  bool _internal_has_contenttype() const;
  public:
  void clear_contenttype();
  const std::string& contenttype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_contenttype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_contenttype();
  PROTOBUF_NODISCARD std::string* release_contenttype();
  void set_allocated_contenttype(std::string* contenttype);
  private:
  const std::string& _internal_contenttype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contenttype(const std::string& value);
  std::string* _internal_mutable_contenttype();
  public:

  // optional .k8s.io.apimachinery.pkg.runtime.TypeMeta typeMeta = 1;
  bool has_typemeta() const;
  private:
  bool _internal_has_typemeta() const;
  public:
  void clear_typemeta();
  const ::k8s::io::apimachinery::pkg::runtime::TypeMeta& typemeta() const;
  PROTOBUF_NODISCARD ::k8s::io::apimachinery::pkg::runtime::TypeMeta* release_typemeta();
  ::k8s::io::apimachinery::pkg::runtime::TypeMeta* mutable_typemeta();
  void set_allocated_typemeta(::k8s::io::apimachinery::pkg::runtime::TypeMeta* typemeta);
  private:
  const ::k8s::io::apimachinery::pkg::runtime::TypeMeta& _internal_typemeta() const;
  ::k8s::io::apimachinery::pkg::runtime::TypeMeta* _internal_mutable_typemeta();
  public:
  void unsafe_arena_set_allocated_typemeta(
      ::k8s::io::apimachinery::pkg::runtime::TypeMeta* typemeta);
  ::k8s::io::apimachinery::pkg::runtime::TypeMeta* unsafe_arena_release_typemeta();

  // @@protoc_insertion_point(class_scope:k8s.io.apimachinery.pkg.runtime.Unknown)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr raw_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contentencoding_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contenttype_;
    ::k8s::io::apimachinery::pkg::runtime::TypeMeta* typemeta_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fruntime_5fgenerated_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RawExtension

// optional bytes raw = 1;
inline bool RawExtension::_internal_has_raw() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RawExtension::has_raw() const {
  return _internal_has_raw();
}
inline void RawExtension::clear_raw() {
  _impl_.raw_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RawExtension::raw() const {
  // @@protoc_insertion_point(field_get:k8s.io.apimachinery.pkg.runtime.RawExtension.raw)
  return _internal_raw();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RawExtension::set_raw(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.raw_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:k8s.io.apimachinery.pkg.runtime.RawExtension.raw)
}
inline std::string* RawExtension::mutable_raw() {
  std::string* _s = _internal_mutable_raw();
  // @@protoc_insertion_point(field_mutable:k8s.io.apimachinery.pkg.runtime.RawExtension.raw)
  return _s;
}
inline const std::string& RawExtension::_internal_raw() const {
  return _impl_.raw_.Get();
}
inline void RawExtension::_internal_set_raw(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.raw_.Set(value, GetArenaForAllocation());
}
inline std::string* RawExtension::_internal_mutable_raw() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.raw_.Mutable(GetArenaForAllocation());
}
inline std::string* RawExtension::release_raw() {
  // @@protoc_insertion_point(field_release:k8s.io.apimachinery.pkg.runtime.RawExtension.raw)
  if (!_internal_has_raw()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.raw_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.raw_.IsDefault()) {
    _impl_.raw_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RawExtension::set_allocated_raw(std::string* raw) {
  if (raw != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.raw_.SetAllocated(raw, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.raw_.IsDefault()) {
    _impl_.raw_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:k8s.io.apimachinery.pkg.runtime.RawExtension.raw)
}

// -------------------------------------------------------------------

// TypeMeta

// optional string apiVersion = 1;
inline bool TypeMeta::_internal_has_apiversion() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TypeMeta::has_apiversion() const {
  return _internal_has_apiversion();
}
inline void TypeMeta::clear_apiversion() {
  _impl_.apiversion_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TypeMeta::apiversion() const {
  // @@protoc_insertion_point(field_get:k8s.io.apimachinery.pkg.runtime.TypeMeta.apiVersion)
  return _internal_apiversion();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TypeMeta::set_apiversion(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.apiversion_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:k8s.io.apimachinery.pkg.runtime.TypeMeta.apiVersion)
}
inline std::string* TypeMeta::mutable_apiversion() {
  std::string* _s = _internal_mutable_apiversion();
  // @@protoc_insertion_point(field_mutable:k8s.io.apimachinery.pkg.runtime.TypeMeta.apiVersion)
  return _s;
}
inline const std::string& TypeMeta::_internal_apiversion() const {
  return _impl_.apiversion_.Get();
}
inline void TypeMeta::_internal_set_apiversion(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.apiversion_.Set(value, GetArenaForAllocation());
}
inline std::string* TypeMeta::_internal_mutable_apiversion() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.apiversion_.Mutable(GetArenaForAllocation());
}
inline std::string* TypeMeta::release_apiversion() {
  // @@protoc_insertion_point(field_release:k8s.io.apimachinery.pkg.runtime.TypeMeta.apiVersion)
  if (!_internal_has_apiversion()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.apiversion_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.apiversion_.IsDefault()) {
    _impl_.apiversion_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TypeMeta::set_allocated_apiversion(std::string* apiversion) {
  if (apiversion != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.apiversion_.SetAllocated(apiversion, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.apiversion_.IsDefault()) {
    _impl_.apiversion_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:k8s.io.apimachinery.pkg.runtime.TypeMeta.apiVersion)
}

// optional string kind = 2;
inline bool TypeMeta::_internal_has_kind() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TypeMeta::has_kind() const {
  return _internal_has_kind();
}
inline void TypeMeta::clear_kind() {
  _impl_.kind_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TypeMeta::kind() const {
  // @@protoc_insertion_point(field_get:k8s.io.apimachinery.pkg.runtime.TypeMeta.kind)
  return _internal_kind();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TypeMeta::set_kind(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.kind_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:k8s.io.apimachinery.pkg.runtime.TypeMeta.kind)
}
inline std::string* TypeMeta::mutable_kind() {
  std::string* _s = _internal_mutable_kind();
  // @@protoc_insertion_point(field_mutable:k8s.io.apimachinery.pkg.runtime.TypeMeta.kind)
  return _s;
}
inline const std::string& TypeMeta::_internal_kind() const {
  return _impl_.kind_.Get();
}
inline void TypeMeta::_internal_set_kind(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.kind_.Set(value, GetArenaForAllocation());
}
inline std::string* TypeMeta::_internal_mutable_kind() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.kind_.Mutable(GetArenaForAllocation());
}
inline std::string* TypeMeta::release_kind() {
  // @@protoc_insertion_point(field_release:k8s.io.apimachinery.pkg.runtime.TypeMeta.kind)
  if (!_internal_has_kind()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.kind_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.kind_.IsDefault()) {
    _impl_.kind_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TypeMeta::set_allocated_kind(std::string* kind) {
  if (kind != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.kind_.SetAllocated(kind, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.kind_.IsDefault()) {
    _impl_.kind_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:k8s.io.apimachinery.pkg.runtime.TypeMeta.kind)
}

// -------------------------------------------------------------------

// Unknown

// optional .k8s.io.apimachinery.pkg.runtime.TypeMeta typeMeta = 1;
inline bool Unknown::_internal_has_typemeta() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.typemeta_ != nullptr);
  return value;
}
inline bool Unknown::has_typemeta() const {
  return _internal_has_typemeta();
}
inline void Unknown::clear_typemeta() {
  if (_impl_.typemeta_ != nullptr) _impl_.typemeta_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::k8s::io::apimachinery::pkg::runtime::TypeMeta& Unknown::_internal_typemeta() const {
  const ::k8s::io::apimachinery::pkg::runtime::TypeMeta* p = _impl_.typemeta_;
  return p != nullptr ? *p : reinterpret_cast<const ::k8s::io::apimachinery::pkg::runtime::TypeMeta&>(
      ::k8s::io::apimachinery::pkg::runtime::_TypeMeta_default_instance_);
}
inline const ::k8s::io::apimachinery::pkg::runtime::TypeMeta& Unknown::typemeta() const {
  // @@protoc_insertion_point(field_get:k8s.io.apimachinery.pkg.runtime.Unknown.typeMeta)
  return _internal_typemeta();
}
inline void Unknown::unsafe_arena_set_allocated_typemeta(
    ::k8s::io::apimachinery::pkg::runtime::TypeMeta* typemeta) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.typemeta_);
  }
  _impl_.typemeta_ = typemeta;
  if (typemeta) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:k8s.io.apimachinery.pkg.runtime.Unknown.typeMeta)
}
inline ::k8s::io::apimachinery::pkg::runtime::TypeMeta* Unknown::release_typemeta() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::k8s::io::apimachinery::pkg::runtime::TypeMeta* temp = _impl_.typemeta_;
  _impl_.typemeta_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::k8s::io::apimachinery::pkg::runtime::TypeMeta* Unknown::unsafe_arena_release_typemeta() {
  // @@protoc_insertion_point(field_release:k8s.io.apimachinery.pkg.runtime.Unknown.typeMeta)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::k8s::io::apimachinery::pkg::runtime::TypeMeta* temp = _impl_.typemeta_;
  _impl_.typemeta_ = nullptr;
  return temp;
}
inline ::k8s::io::apimachinery::pkg::runtime::TypeMeta* Unknown::_internal_mutable_typemeta() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.typemeta_ == nullptr) {
    auto* p = CreateMaybeMessage<::k8s::io::apimachinery::pkg::runtime::TypeMeta>(GetArenaForAllocation());
    _impl_.typemeta_ = p;
  }
  return _impl_.typemeta_;
}
inline ::k8s::io::apimachinery::pkg::runtime::TypeMeta* Unknown::mutable_typemeta() {
  ::k8s::io::apimachinery::pkg::runtime::TypeMeta* _msg = _internal_mutable_typemeta();
  // @@protoc_insertion_point(field_mutable:k8s.io.apimachinery.pkg.runtime.Unknown.typeMeta)
  return _msg;
}
inline void Unknown::set_allocated_typemeta(::k8s::io::apimachinery::pkg::runtime::TypeMeta* typemeta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.typemeta_;
  }
  if (typemeta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(typemeta);
    if (message_arena != submessage_arena) {
      typemeta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, typemeta, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.typemeta_ = typemeta;
  // @@protoc_insertion_point(field_set_allocated:k8s.io.apimachinery.pkg.runtime.Unknown.typeMeta)
}

// optional bytes raw = 2;
inline bool Unknown::_internal_has_raw() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Unknown::has_raw() const {
  return _internal_has_raw();
}
inline void Unknown::clear_raw() {
  _impl_.raw_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Unknown::raw() const {
  // @@protoc_insertion_point(field_get:k8s.io.apimachinery.pkg.runtime.Unknown.raw)
  return _internal_raw();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Unknown::set_raw(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.raw_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:k8s.io.apimachinery.pkg.runtime.Unknown.raw)
}
inline std::string* Unknown::mutable_raw() {
  std::string* _s = _internal_mutable_raw();
  // @@protoc_insertion_point(field_mutable:k8s.io.apimachinery.pkg.runtime.Unknown.raw)
  return _s;
}
inline const std::string& Unknown::_internal_raw() const {
  return _impl_.raw_.Get();
}
inline void Unknown::_internal_set_raw(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.raw_.Set(value, GetArenaForAllocation());
}
inline std::string* Unknown::_internal_mutable_raw() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.raw_.Mutable(GetArenaForAllocation());
}
inline std::string* Unknown::release_raw() {
  // @@protoc_insertion_point(field_release:k8s.io.apimachinery.pkg.runtime.Unknown.raw)
  if (!_internal_has_raw()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.raw_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.raw_.IsDefault()) {
    _impl_.raw_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Unknown::set_allocated_raw(std::string* raw) {
  if (raw != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.raw_.SetAllocated(raw, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.raw_.IsDefault()) {
    _impl_.raw_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:k8s.io.apimachinery.pkg.runtime.Unknown.raw)
}

// optional string contentEncoding = 3;
inline bool Unknown::_internal_has_contentencoding() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Unknown::has_contentencoding() const {
  return _internal_has_contentencoding();
}
inline void Unknown::clear_contentencoding() {
  _impl_.contentencoding_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Unknown::contentencoding() const {
  // @@protoc_insertion_point(field_get:k8s.io.apimachinery.pkg.runtime.Unknown.contentEncoding)
  return _internal_contentencoding();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Unknown::set_contentencoding(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.contentencoding_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:k8s.io.apimachinery.pkg.runtime.Unknown.contentEncoding)
}
inline std::string* Unknown::mutable_contentencoding() {
  std::string* _s = _internal_mutable_contentencoding();
  // @@protoc_insertion_point(field_mutable:k8s.io.apimachinery.pkg.runtime.Unknown.contentEncoding)
  return _s;
}
inline const std::string& Unknown::_internal_contentencoding() const {
  return _impl_.contentencoding_.Get();
}
inline void Unknown::_internal_set_contentencoding(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.contentencoding_.Set(value, GetArenaForAllocation());
}
inline std::string* Unknown::_internal_mutable_contentencoding() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.contentencoding_.Mutable(GetArenaForAllocation());
}
inline std::string* Unknown::release_contentencoding() {
  // @@protoc_insertion_point(field_release:k8s.io.apimachinery.pkg.runtime.Unknown.contentEncoding)
  if (!_internal_has_contentencoding()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.contentencoding_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.contentencoding_.IsDefault()) {
    _impl_.contentencoding_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Unknown::set_allocated_contentencoding(std::string* contentencoding) {
  if (contentencoding != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.contentencoding_.SetAllocated(contentencoding, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.contentencoding_.IsDefault()) {
    _impl_.contentencoding_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:k8s.io.apimachinery.pkg.runtime.Unknown.contentEncoding)
}

// optional string contentType = 4;
inline bool Unknown::_internal_has_contenttype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Unknown::has_contenttype() const {
  return _internal_has_contenttype();
}
inline void Unknown::clear_contenttype() {
  _impl_.contenttype_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Unknown::contenttype() const {
  // @@protoc_insertion_point(field_get:k8s.io.apimachinery.pkg.runtime.Unknown.contentType)
  return _internal_contenttype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Unknown::set_contenttype(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.contenttype_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:k8s.io.apimachinery.pkg.runtime.Unknown.contentType)
}
inline std::string* Unknown::mutable_contenttype() {
  std::string* _s = _internal_mutable_contenttype();
  // @@protoc_insertion_point(field_mutable:k8s.io.apimachinery.pkg.runtime.Unknown.contentType)
  return _s;
}
inline const std::string& Unknown::_internal_contenttype() const {
  return _impl_.contenttype_.Get();
}
inline void Unknown::_internal_set_contenttype(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.contenttype_.Set(value, GetArenaForAllocation());
}
inline std::string* Unknown::_internal_mutable_contenttype() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.contenttype_.Mutable(GetArenaForAllocation());
}
inline std::string* Unknown::release_contenttype() {
  // @@protoc_insertion_point(field_release:k8s.io.apimachinery.pkg.runtime.Unknown.contentType)
  if (!_internal_has_contenttype()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.contenttype_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.contenttype_.IsDefault()) {
    _impl_.contenttype_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Unknown::set_allocated_contenttype(std::string* contenttype) {
  if (contenttype != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.contenttype_.SetAllocated(contenttype, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.contenttype_.IsDefault()) {
    _impl_.contenttype_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:k8s.io.apimachinery.pkg.runtime.Unknown.contentType)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace runtime
}  // namespace pkg
}  // namespace apimachinery
}  // namespace io
}  // namespace k8s

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fruntime_5fgenerated_2eproto
