// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: staging_src_k8s.io_apimachinery_pkg_apis_testapigroup_v1_generated.proto

#include "staging_src_k8s.io_apimachinery_pkg_apis_testapigroup_v1_generated.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace k8s {
namespace io {
namespace apimachinery {
namespace pkg {
namespace apis {
namespace testapigroup {
namespace v1 {
PROTOBUF_CONSTEXPR Carp::Carp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.metadata_)*/nullptr
  , /*decltype(_impl_.spec_)*/nullptr
  , /*decltype(_impl_.status_)*/nullptr} {}
struct CarpDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CarpDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CarpDefaultTypeInternal() {}
  union {
    Carp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CarpDefaultTypeInternal _Carp_default_instance_;
PROTOBUF_CONSTEXPR CarpCondition::CarpCondition(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.reason_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lastprobetime_)*/nullptr
  , /*decltype(_impl_.lasttransitiontime_)*/nullptr} {}
struct CarpConditionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CarpConditionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CarpConditionDefaultTypeInternal() {}
  union {
    CarpCondition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CarpConditionDefaultTypeInternal _CarpCondition_default_instance_;
PROTOBUF_CONSTEXPR CarpList::CarpList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.metadata_)*/nullptr} {}
struct CarpListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CarpListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CarpListDefaultTypeInternal() {}
  union {
    CarpList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CarpListDefaultTypeInternal _CarpList_default_instance_;
PROTOBUF_CONSTEXPR CarpSpec_NodeSelectorEntry_DoNotUse::CarpSpec_NodeSelectorEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct CarpSpec_NodeSelectorEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CarpSpec_NodeSelectorEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CarpSpec_NodeSelectorEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CarpSpec_NodeSelectorEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CarpSpec_NodeSelectorEntry_DoNotUseDefaultTypeInternal _CarpSpec_NodeSelectorEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR CarpSpec::CarpSpec(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.nodeselector_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.restartpolicy_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.serviceaccountname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.serviceaccount_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nodename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hostname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.subdomain_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.schedulername_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.terminationgraceperiodseconds_)*/int64_t{0}
  , /*decltype(_impl_.activedeadlineseconds_)*/int64_t{0}
  , /*decltype(_impl_.hostnetwork_)*/false
  , /*decltype(_impl_.hostpid_)*/false
  , /*decltype(_impl_.hostipc_)*/false} {}
struct CarpSpecDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CarpSpecDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CarpSpecDefaultTypeInternal() {}
  union {
    CarpSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CarpSpecDefaultTypeInternal _CarpSpec_default_instance_;
PROTOBUF_CONSTEXPR CarpStatus::CarpStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.conditions_)*/{}
  , /*decltype(_impl_.phase_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.reason_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hostip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.carpip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.starttime_)*/nullptr} {}
struct CarpStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CarpStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CarpStatusDefaultTypeInternal() {}
  union {
    CarpStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CarpStatusDefaultTypeInternal _CarpStatus_default_instance_;
}  // namespace v1
}  // namespace testapigroup
}  // namespace apis
}  // namespace pkg
}  // namespace apimachinery
}  // namespace io
}  // namespace k8s
static ::_pb::Metadata file_level_metadata_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5ftestapigroup_5fv1_5fgenerated_2eproto[6];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5ftestapigroup_5fv1_5fgenerated_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5ftestapigroup_5fv1_5fgenerated_2eproto = nullptr;

const uint32_t TableStruct_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5ftestapigroup_5fv1_5fgenerated_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::testapigroup::v1::Carp, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::testapigroup::v1::Carp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::testapigroup::v1::Carp, _impl_.metadata_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::testapigroup::v1::Carp, _impl_.spec_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::testapigroup::v1::Carp, _impl_.status_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::testapigroup::v1::CarpCondition, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::testapigroup::v1::CarpCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::testapigroup::v1::CarpCondition, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::testapigroup::v1::CarpCondition, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::testapigroup::v1::CarpCondition, _impl_.lastprobetime_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::testapigroup::v1::CarpCondition, _impl_.lasttransitiontime_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::testapigroup::v1::CarpCondition, _impl_.reason_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::testapigroup::v1::CarpCondition, _impl_.message_),
  0,
  1,
  4,
  5,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::testapigroup::v1::CarpList, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::testapigroup::v1::CarpList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::testapigroup::v1::CarpList, _impl_.metadata_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::testapigroup::v1::CarpList, _impl_.items_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::testapigroup::v1::CarpSpec_NodeSelectorEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::testapigroup::v1::CarpSpec_NodeSelectorEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::testapigroup::v1::CarpSpec_NodeSelectorEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::testapigroup::v1::CarpSpec_NodeSelectorEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::testapigroup::v1::CarpSpec, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::testapigroup::v1::CarpSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::testapigroup::v1::CarpSpec, _impl_.restartpolicy_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::testapigroup::v1::CarpSpec, _impl_.terminationgraceperiodseconds_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::testapigroup::v1::CarpSpec, _impl_.activedeadlineseconds_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::testapigroup::v1::CarpSpec, _impl_.nodeselector_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::testapigroup::v1::CarpSpec, _impl_.serviceaccountname_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::testapigroup::v1::CarpSpec, _impl_.serviceaccount_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::testapigroup::v1::CarpSpec, _impl_.nodename_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::testapigroup::v1::CarpSpec, _impl_.hostnetwork_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::testapigroup::v1::CarpSpec, _impl_.hostpid_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::testapigroup::v1::CarpSpec, _impl_.hostipc_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::testapigroup::v1::CarpSpec, _impl_.hostname_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::testapigroup::v1::CarpSpec, _impl_.subdomain_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::testapigroup::v1::CarpSpec, _impl_.schedulername_),
  0,
  7,
  8,
  ~0u,
  1,
  2,
  3,
  9,
  10,
  11,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::testapigroup::v1::CarpStatus, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::testapigroup::v1::CarpStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::testapigroup::v1::CarpStatus, _impl_.phase_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::testapigroup::v1::CarpStatus, _impl_.conditions_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::testapigroup::v1::CarpStatus, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::testapigroup::v1::CarpStatus, _impl_.reason_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::testapigroup::v1::CarpStatus, _impl_.hostip_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::testapigroup::v1::CarpStatus, _impl_.carpip_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::testapigroup::v1::CarpStatus, _impl_.starttime_),
  0,
  ~0u,
  1,
  2,
  3,
  4,
  5,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::k8s::io::apimachinery::pkg::apis::testapigroup::v1::Carp)},
  { 12, 24, -1, sizeof(::k8s::io::apimachinery::pkg::apis::testapigroup::v1::CarpCondition)},
  { 30, 38, -1, sizeof(::k8s::io::apimachinery::pkg::apis::testapigroup::v1::CarpList)},
  { 40, 48, -1, sizeof(::k8s::io::apimachinery::pkg::apis::testapigroup::v1::CarpSpec_NodeSelectorEntry_DoNotUse)},
  { 50, 69, -1, sizeof(::k8s::io::apimachinery::pkg::apis::testapigroup::v1::CarpSpec)},
  { 82, 95, -1, sizeof(::k8s::io::apimachinery::pkg::apis::testapigroup::v1::CarpStatus)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::k8s::io::apimachinery::pkg::apis::testapigroup::v1::_Carp_default_instance_._instance,
  &::k8s::io::apimachinery::pkg::apis::testapigroup::v1::_CarpCondition_default_instance_._instance,
  &::k8s::io::apimachinery::pkg::apis::testapigroup::v1::_CarpList_default_instance_._instance,
  &::k8s::io::apimachinery::pkg::apis::testapigroup::v1::_CarpSpec_NodeSelectorEntry_DoNotUse_default_instance_._instance,
  &::k8s::io::apimachinery::pkg::apis::testapigroup::v1::_CarpSpec_default_instance_._instance,
  &::k8s::io::apimachinery::pkg::apis::testapigroup::v1::_CarpStatus_default_instance_._instance,
};

const char descriptor_table_protodef_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5ftestapigroup_5fv1_5fgenerated_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\nHstaging_src_k8s.io_apimachinery_pkg_ap"
  "is_testapigroup_v1_generated.proto\022,k8s."
  "io.apimachinery.pkg.apis.testapigroup.v1"
  "\032@staging_src_k8s.io_apimachinery_pkg_ap"
  "is_meta_v1_generated.proto\032;staging_src_"
  "k8s.io_apimachinery_pkg_runtime_generate"
  "d.proto\032Bstaging_src_k8s.io_apimachinery"
  "_pkg_runtime_schema_generated.proto\"\332\001\n\004"
  "Carp\022B\n\010metadata\030\001 \001(\01320.k8s.io.apimachi"
  "nery.pkg.apis.meta.v1.ObjectMeta\022D\n\004spec"
  "\030\002 \001(\01326.k8s.io.apimachinery.pkg.apis.te"
  "stapigroup.v1.CarpSpec\022H\n\006status\030\003 \001(\01328"
  ".k8s.io.apimachinery.pkg.apis.testapigro"
  "up.v1.CarpStatus\"\331\001\n\rCarpCondition\022\014\n\004ty"
  "pe\030\001 \001(\014\022\016\n\006status\030\002 \001(\014\022A\n\rlastProbeTim"
  "e\030\003 \001(\0132*.k8s.io.apimachinery.pkg.apis.m"
  "eta.v1.Time\022F\n\022lastTransitionTime\030\004 \001(\0132"
  "*.k8s.io.apimachinery.pkg.apis.meta.v1.T"
  "ime\022\016\n\006reason\030\005 \001(\014\022\017\n\007message\030\006 \001(\014\"\217\001\n"
  "\010CarpList\022@\n\010metadata\030\001 \001(\0132..k8s.io.api"
  "machinery.pkg.apis.meta.v1.ListMeta\022A\n\005i"
  "tems\030\002 \003(\01322.k8s.io.apimachinery.pkg.api"
  "s.testapigroup.v1.Carp\"\265\003\n\010CarpSpec\022\025\n\rr"
  "estartPolicy\030\003 \001(\014\022%\n\035terminationGracePe"
  "riodSeconds\030\004 \001(\003\022\035\n\025activeDeadlineSecon"
  "ds\030\005 \001(\003\022^\n\014nodeSelector\030\007 \003(\0132H.k8s.io."
  "apimachinery.pkg.apis.testapigroup.v1.Ca"
  "rpSpec.NodeSelectorEntry\022\032\n\022serviceAccou"
  "ntName\030\010 \001(\014\022\026\n\016serviceAccount\030\t \001(\014\022\020\n\010"
  "nodeName\030\n \001(\014\022\023\n\013hostNetwork\030\013 \001(\010\022\017\n\007h"
  "ostPID\030\014 \001(\010\022\017\n\007hostIPC\030\r \001(\010\022\020\n\010hostnam"
  "e\030\020 \001(\014\022\021\n\tsubdomain\030\021 \001(\014\022\025\n\rschedulern"
  "ame\030\023 \001(\014\0323\n\021NodeSelectorEntry\022\013\n\003key\030\001 "
  "\001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\354\001\n\nCarpStatus\022\r\n"
  "\005phase\030\001 \001(\014\022O\n\nconditions\030\002 \003(\0132;.k8s.i"
  "o.apimachinery.pkg.apis.testapigroup.v1."
  "CarpCondition\022\017\n\007message\030\003 \001(\014\022\016\n\006reason"
  "\030\004 \001(\014\022\016\n\006hostIP\030\005 \001(\014\022\016\n\006carpIP\030\006 \001(\014\022="
  "\n\tstartTime\030\007 \001(\0132*.k8s.io.apimachinery."
  "pkg.apis.meta.v1.TimeB.Z,k8s.io/apimachi"
  "nery/pkg/apis/testapigroup/v1"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5ftestapigroup_5fv1_5fgenerated_2eproto_deps[3] = {
  &::descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto,
  &::descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fruntime_5fgenerated_2eproto,
  &::descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fruntime_5fschema_5fgenerated_2eproto,
};
static ::_pbi::once_flag descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5ftestapigroup_5fv1_5fgenerated_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5ftestapigroup_5fv1_5fgenerated_2eproto = {
    false, false, 1629, descriptor_table_protodef_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5ftestapigroup_5fv1_5fgenerated_2eproto,
    "staging_src_k8s.io_apimachinery_pkg_apis_testapigroup_v1_generated.proto",
    &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5ftestapigroup_5fv1_5fgenerated_2eproto_once, descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5ftestapigroup_5fv1_5fgenerated_2eproto_deps, 3, 6,
    schemas, file_default_instances, TableStruct_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5ftestapigroup_5fv1_5fgenerated_2eproto::offsets,
    file_level_metadata_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5ftestapigroup_5fv1_5fgenerated_2eproto, file_level_enum_descriptors_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5ftestapigroup_5fv1_5fgenerated_2eproto,
    file_level_service_descriptors_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5ftestapigroup_5fv1_5fgenerated_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5ftestapigroup_5fv1_5fgenerated_2eproto_getter() {
  return &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5ftestapigroup_5fv1_5fgenerated_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5ftestapigroup_5fv1_5fgenerated_2eproto(&descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5ftestapigroup_5fv1_5fgenerated_2eproto);
namespace k8s {
namespace io {
namespace apimachinery {
namespace pkg {
namespace apis {
namespace testapigroup {
namespace v1 {

// ===================================================================

class Carp::_Internal {
 public:
  using HasBits = decltype(std::declval<Carp>()._impl_._has_bits_);
  static const ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta& metadata(const Carp* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::k8s::io::apimachinery::pkg::apis::testapigroup::v1::CarpSpec& spec(const Carp* msg);
  static void set_has_spec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::k8s::io::apimachinery::pkg::apis::testapigroup::v1::CarpStatus& status(const Carp* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta&
Carp::_Internal::metadata(const Carp* msg) {
  return *msg->_impl_.metadata_;
}
const ::k8s::io::apimachinery::pkg::apis::testapigroup::v1::CarpSpec&
Carp::_Internal::spec(const Carp* msg) {
  return *msg->_impl_.spec_;
}
const ::k8s::io::apimachinery::pkg::apis::testapigroup::v1::CarpStatus&
Carp::_Internal::status(const Carp* msg) {
  return *msg->_impl_.status_;
}
void Carp::clear_metadata() {
  if (_impl_.metadata_ != nullptr) _impl_.metadata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Carp::Carp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:k8s.io.apimachinery.pkg.apis.testapigroup.v1.Carp)
}
Carp::Carp(const Carp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Carp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.spec_){nullptr}
    , decltype(_impl_.status_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    _this->_impl_.metadata_ = new ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta(*from._impl_.metadata_);
  }
  if (from._internal_has_spec()) {
    _this->_impl_.spec_ = new ::k8s::io::apimachinery::pkg::apis::testapigroup::v1::CarpSpec(*from._impl_.spec_);
  }
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::k8s::io::apimachinery::pkg::apis::testapigroup::v1::CarpStatus(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:k8s.io.apimachinery.pkg.apis.testapigroup.v1.Carp)
}

inline void Carp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.spec_){nullptr}
    , decltype(_impl_.status_){nullptr}
  };
}

Carp::~Carp() {
  // @@protoc_insertion_point(destructor:k8s.io.apimachinery.pkg.apis.testapigroup.v1.Carp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Carp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.metadata_;
  if (this != internal_default_instance()) delete _impl_.spec_;
  if (this != internal_default_instance()) delete _impl_.status_;
}

void Carp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Carp::Clear() {
// @@protoc_insertion_point(message_clear_start:k8s.io.apimachinery.pkg.apis.testapigroup.v1.Carp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.metadata_ != nullptr);
      _impl_.metadata_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.spec_ != nullptr);
      _impl_.spec_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.status_ != nullptr);
      _impl_.status_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Carp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .k8s.io.apimachinery.pkg.apis.testapigroup.v1.CarpSpec spec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .k8s.io.apimachinery.pkg.apis.testapigroup.v1.CarpStatus status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Carp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:k8s.io.apimachinery.pkg.apis.testapigroup.v1.Carp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::metadata(this),
        _Internal::metadata(this).GetCachedSize(), target, stream);
  }

  // optional .k8s.io.apimachinery.pkg.apis.testapigroup.v1.CarpSpec spec = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::spec(this),
        _Internal::spec(this).GetCachedSize(), target, stream);
  }

  // optional .k8s.io.apimachinery.pkg.apis.testapigroup.v1.CarpStatus status = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:k8s.io.apimachinery.pkg.apis.testapigroup.v1.Carp)
  return target;
}

size_t Carp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:k8s.io.apimachinery.pkg.apis.testapigroup.v1.Carp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.metadata_);
    }

    // optional .k8s.io.apimachinery.pkg.apis.testapigroup.v1.CarpSpec spec = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.spec_);
    }

    // optional .k8s.io.apimachinery.pkg.apis.testapigroup.v1.CarpStatus status = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.status_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Carp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Carp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Carp::GetClassData() const { return &_class_data_; }


void Carp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Carp*>(&to_msg);
  auto& from = static_cast<const Carp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:k8s.io.apimachinery.pkg.apis.testapigroup.v1.Carp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_metadata()->::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta::MergeFrom(
          from._internal_metadata());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_spec()->::k8s::io::apimachinery::pkg::apis::testapigroup::v1::CarpSpec::MergeFrom(
          from._internal_spec());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_status()->::k8s::io::apimachinery::pkg::apis::testapigroup::v1::CarpStatus::MergeFrom(
          from._internal_status());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Carp::CopyFrom(const Carp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:k8s.io.apimachinery.pkg.apis.testapigroup.v1.Carp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Carp::IsInitialized() const {
  return true;
}

void Carp::InternalSwap(Carp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Carp, _impl_.status_)
      + sizeof(Carp::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(Carp, _impl_.metadata_)>(
          reinterpret_cast<char*>(&_impl_.metadata_),
          reinterpret_cast<char*>(&other->_impl_.metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Carp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5ftestapigroup_5fv1_5fgenerated_2eproto_getter, &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5ftestapigroup_5fv1_5fgenerated_2eproto_once,
      file_level_metadata_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5ftestapigroup_5fv1_5fgenerated_2eproto[0]);
}

// ===================================================================

class CarpCondition::_Internal {
 public:
  using HasBits = decltype(std::declval<CarpCondition>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::k8s::io::apimachinery::pkg::apis::meta::v1::Time& lastprobetime(const CarpCondition* msg);
  static void set_has_lastprobetime(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::k8s::io::apimachinery::pkg::apis::meta::v1::Time& lasttransitiontime(const CarpCondition* msg);
  static void set_has_lasttransitiontime(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::k8s::io::apimachinery::pkg::apis::meta::v1::Time&
CarpCondition::_Internal::lastprobetime(const CarpCondition* msg) {
  return *msg->_impl_.lastprobetime_;
}
const ::k8s::io::apimachinery::pkg::apis::meta::v1::Time&
CarpCondition::_Internal::lasttransitiontime(const CarpCondition* msg) {
  return *msg->_impl_.lasttransitiontime_;
}
void CarpCondition::clear_lastprobetime() {
  if (_impl_.lastprobetime_ != nullptr) _impl_.lastprobetime_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void CarpCondition::clear_lasttransitiontime() {
  if (_impl_.lasttransitiontime_ != nullptr) _impl_.lasttransitiontime_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
CarpCondition::CarpCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:k8s.io.apimachinery.pkg.apis.testapigroup.v1.CarpCondition)
}
CarpCondition::CarpCondition(const CarpCondition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CarpCondition* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_){}
    , decltype(_impl_.status_){}
    , decltype(_impl_.reason_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.lastprobetime_){nullptr}
    , decltype(_impl_.lasttransitiontime_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_type()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_status()) {
    _this->_impl_.status_.Set(from._internal_status(), 
      _this->GetArenaForAllocation());
  }
  _impl_.reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_reason()) {
    _this->_impl_.reason_.Set(from._internal_reason(), 
      _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_message()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_lastprobetime()) {
    _this->_impl_.lastprobetime_ = new ::k8s::io::apimachinery::pkg::apis::meta::v1::Time(*from._impl_.lastprobetime_);
  }
  if (from._internal_has_lasttransitiontime()) {
    _this->_impl_.lasttransitiontime_ = new ::k8s::io::apimachinery::pkg::apis::meta::v1::Time(*from._impl_.lasttransitiontime_);
  }
  // @@protoc_insertion_point(copy_constructor:k8s.io.apimachinery.pkg.apis.testapigroup.v1.CarpCondition)
}

inline void CarpCondition::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_){}
    , decltype(_impl_.status_){}
    , decltype(_impl_.reason_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.lastprobetime_){nullptr}
    , decltype(_impl_.lasttransitiontime_){nullptr}
  };
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CarpCondition::~CarpCondition() {
  // @@protoc_insertion_point(destructor:k8s.io.apimachinery.pkg.apis.testapigroup.v1.CarpCondition)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CarpCondition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.type_.Destroy();
  _impl_.status_.Destroy();
  _impl_.reason_.Destroy();
  _impl_.message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.lastprobetime_;
  if (this != internal_default_instance()) delete _impl_.lasttransitiontime_;
}

void CarpCondition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CarpCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:k8s.io.apimachinery.pkg.apis.testapigroup.v1.CarpCondition)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.status_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.reason_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.message_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.lastprobetime_ != nullptr);
      _impl_.lastprobetime_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.lasttransitiontime_ != nullptr);
      _impl_.lasttransitiontime_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CarpCondition::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_status();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .k8s.io.apimachinery.pkg.apis.meta.v1.Time lastProbeTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_lastprobetime(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_lasttransitiontime(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes reason = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_reason();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes message = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CarpCondition::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:k8s.io.apimachinery.pkg.apis.testapigroup.v1.CarpCondition)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_type(), target);
  }

  // optional bytes status = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_status(), target);
  }

  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.Time lastProbeTime = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::lastprobetime(this),
        _Internal::lastprobetime(this).GetCachedSize(), target, stream);
  }

  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::lasttransitiontime(this),
        _Internal::lasttransitiontime(this).GetCachedSize(), target, stream);
  }

  // optional bytes reason = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_reason(), target);
  }

  // optional bytes message = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:k8s.io.apimachinery.pkg.apis.testapigroup.v1.CarpCondition)
  return target;
}

size_t CarpCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:k8s.io.apimachinery.pkg.apis.testapigroup.v1.CarpCondition)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional bytes type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_type());
    }

    // optional bytes status = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_status());
    }

    // optional bytes reason = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_reason());
    }

    // optional bytes message = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_message());
    }

    // optional .k8s.io.apimachinery.pkg.apis.meta.v1.Time lastProbeTime = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.lastprobetime_);
    }

    // optional .k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.lasttransitiontime_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CarpCondition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CarpCondition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CarpCondition::GetClassData() const { return &_class_data_; }


void CarpCondition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CarpCondition*>(&to_msg);
  auto& from = static_cast<const CarpCondition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:k8s.io.apimachinery.pkg.apis.testapigroup.v1.CarpCondition)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_type(from._internal_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_status(from._internal_status());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_reason(from._internal_reason());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_lastprobetime()->::k8s::io::apimachinery::pkg::apis::meta::v1::Time::MergeFrom(
          from._internal_lastprobetime());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_lasttransitiontime()->::k8s::io::apimachinery::pkg::apis::meta::v1::Time::MergeFrom(
          from._internal_lasttransitiontime());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CarpCondition::CopyFrom(const CarpCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:k8s.io.apimachinery.pkg.apis.testapigroup.v1.CarpCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CarpCondition::IsInitialized() const {
  return true;
}

void CarpCondition::InternalSwap(CarpCondition* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.status_, lhs_arena,
      &other->_impl_.status_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.reason_, lhs_arena,
      &other->_impl_.reason_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CarpCondition, _impl_.lasttransitiontime_)
      + sizeof(CarpCondition::_impl_.lasttransitiontime_)
      - PROTOBUF_FIELD_OFFSET(CarpCondition, _impl_.lastprobetime_)>(
          reinterpret_cast<char*>(&_impl_.lastprobetime_),
          reinterpret_cast<char*>(&other->_impl_.lastprobetime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CarpCondition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5ftestapigroup_5fv1_5fgenerated_2eproto_getter, &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5ftestapigroup_5fv1_5fgenerated_2eproto_once,
      file_level_metadata_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5ftestapigroup_5fv1_5fgenerated_2eproto[1]);
}

// ===================================================================

class CarpList::_Internal {
 public:
  using HasBits = decltype(std::declval<CarpList>()._impl_._has_bits_);
  static const ::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta& metadata(const CarpList* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta&
CarpList::_Internal::metadata(const CarpList* msg) {
  return *msg->_impl_.metadata_;
}
void CarpList::clear_metadata() {
  if (_impl_.metadata_ != nullptr) _impl_.metadata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CarpList::CarpList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:k8s.io.apimachinery.pkg.apis.testapigroup.v1.CarpList)
}
CarpList::CarpList(const CarpList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CarpList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.metadata_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    _this->_impl_.metadata_ = new ::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta(*from._impl_.metadata_);
  }
  // @@protoc_insertion_point(copy_constructor:k8s.io.apimachinery.pkg.apis.testapigroup.v1.CarpList)
}

inline void CarpList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.items_){arena}
    , decltype(_impl_.metadata_){nullptr}
  };
}

CarpList::~CarpList() {
  // @@protoc_insertion_point(destructor:k8s.io.apimachinery.pkg.apis.testapigroup.v1.CarpList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CarpList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.metadata_;
}

void CarpList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CarpList::Clear() {
// @@protoc_insertion_point(message_clear_start:k8s.io.apimachinery.pkg.apis.testapigroup.v1.CarpList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.metadata_ != nullptr);
    _impl_.metadata_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CarpList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .k8s.io.apimachinery.pkg.apis.testapigroup.v1.Carp items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CarpList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:k8s.io.apimachinery.pkg.apis.testapigroup.v1.CarpList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::metadata(this),
        _Internal::metadata(this).GetCachedSize(), target, stream);
  }

  // repeated .k8s.io.apimachinery.pkg.apis.testapigroup.v1.Carp items = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:k8s.io.apimachinery.pkg.apis.testapigroup.v1.CarpList)
  return target;
}

size_t CarpList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:k8s.io.apimachinery.pkg.apis.testapigroup.v1.CarpList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .k8s.io.apimachinery.pkg.apis.testapigroup.v1.Carp items = 2;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.metadata_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CarpList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CarpList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CarpList::GetClassData() const { return &_class_data_; }


void CarpList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CarpList*>(&to_msg);
  auto& from = static_cast<const CarpList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:k8s.io.apimachinery.pkg.apis.testapigroup.v1.CarpList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (from._internal_has_metadata()) {
    _this->_internal_mutable_metadata()->::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta::MergeFrom(
        from._internal_metadata());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CarpList::CopyFrom(const CarpList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:k8s.io.apimachinery.pkg.apis.testapigroup.v1.CarpList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CarpList::IsInitialized() const {
  return true;
}

void CarpList::InternalSwap(CarpList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  swap(_impl_.metadata_, other->_impl_.metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CarpList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5ftestapigroup_5fv1_5fgenerated_2eproto_getter, &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5ftestapigroup_5fv1_5fgenerated_2eproto_once,
      file_level_metadata_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5ftestapigroup_5fv1_5fgenerated_2eproto[2]);
}

// ===================================================================

CarpSpec_NodeSelectorEntry_DoNotUse::CarpSpec_NodeSelectorEntry_DoNotUse() {}
CarpSpec_NodeSelectorEntry_DoNotUse::CarpSpec_NodeSelectorEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CarpSpec_NodeSelectorEntry_DoNotUse::MergeFrom(const CarpSpec_NodeSelectorEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CarpSpec_NodeSelectorEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5ftestapigroup_5fv1_5fgenerated_2eproto_getter, &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5ftestapigroup_5fv1_5fgenerated_2eproto_once,
      file_level_metadata_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5ftestapigroup_5fv1_5fgenerated_2eproto[3]);
}

// ===================================================================

class CarpSpec::_Internal {
 public:
  using HasBits = decltype(std::declval<CarpSpec>()._impl_._has_bits_);
  static void set_has_restartpolicy(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_terminationgraceperiodseconds(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_activedeadlineseconds(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_serviceaccountname(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_serviceaccount(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_nodename(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_hostnetwork(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_hostpid(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_hostipc(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_hostname(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_subdomain(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_schedulername(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CarpSpec::CarpSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &CarpSpec::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:k8s.io.apimachinery.pkg.apis.testapigroup.v1.CarpSpec)
}
CarpSpec::CarpSpec(const CarpSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CarpSpec* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.nodeselector_)*/{}
    , decltype(_impl_.restartpolicy_){}
    , decltype(_impl_.serviceaccountname_){}
    , decltype(_impl_.serviceaccount_){}
    , decltype(_impl_.nodename_){}
    , decltype(_impl_.hostname_){}
    , decltype(_impl_.subdomain_){}
    , decltype(_impl_.schedulername_){}
    , decltype(_impl_.terminationgraceperiodseconds_){}
    , decltype(_impl_.activedeadlineseconds_){}
    , decltype(_impl_.hostnetwork_){}
    , decltype(_impl_.hostpid_){}
    , decltype(_impl_.hostipc_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.nodeselector_.MergeFrom(from._impl_.nodeselector_);
  _impl_.restartpolicy_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.restartpolicy_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_restartpolicy()) {
    _this->_impl_.restartpolicy_.Set(from._internal_restartpolicy(), 
      _this->GetArenaForAllocation());
  }
  _impl_.serviceaccountname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serviceaccountname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_serviceaccountname()) {
    _this->_impl_.serviceaccountname_.Set(from._internal_serviceaccountname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.serviceaccount_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serviceaccount_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_serviceaccount()) {
    _this->_impl_.serviceaccount_.Set(from._internal_serviceaccount(), 
      _this->GetArenaForAllocation());
  }
  _impl_.nodename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nodename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_nodename()) {
    _this->_impl_.nodename_.Set(from._internal_nodename(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hostname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hostname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_hostname()) {
    _this->_impl_.hostname_.Set(from._internal_hostname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.subdomain_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subdomain_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_subdomain()) {
    _this->_impl_.subdomain_.Set(from._internal_subdomain(), 
      _this->GetArenaForAllocation());
  }
  _impl_.schedulername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.schedulername_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_schedulername()) {
    _this->_impl_.schedulername_.Set(from._internal_schedulername(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.terminationgraceperiodseconds_, &from._impl_.terminationgraceperiodseconds_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.hostipc_) -
    reinterpret_cast<char*>(&_impl_.terminationgraceperiodseconds_)) + sizeof(_impl_.hostipc_));
  // @@protoc_insertion_point(copy_constructor:k8s.io.apimachinery.pkg.apis.testapigroup.v1.CarpSpec)
}

inline void CarpSpec::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.nodeselector_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.restartpolicy_){}
    , decltype(_impl_.serviceaccountname_){}
    , decltype(_impl_.serviceaccount_){}
    , decltype(_impl_.nodename_){}
    , decltype(_impl_.hostname_){}
    , decltype(_impl_.subdomain_){}
    , decltype(_impl_.schedulername_){}
    , decltype(_impl_.terminationgraceperiodseconds_){int64_t{0}}
    , decltype(_impl_.activedeadlineseconds_){int64_t{0}}
    , decltype(_impl_.hostnetwork_){false}
    , decltype(_impl_.hostpid_){false}
    , decltype(_impl_.hostipc_){false}
  };
  _impl_.restartpolicy_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.restartpolicy_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.serviceaccountname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serviceaccountname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.serviceaccount_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serviceaccount_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.nodename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nodename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hostname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hostname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.subdomain_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subdomain_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.schedulername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.schedulername_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CarpSpec::~CarpSpec() {
  // @@protoc_insertion_point(destructor:k8s.io.apimachinery.pkg.apis.testapigroup.v1.CarpSpec)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void CarpSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.nodeselector_.Destruct();
  _impl_.nodeselector_.~MapField();
  _impl_.restartpolicy_.Destroy();
  _impl_.serviceaccountname_.Destroy();
  _impl_.serviceaccount_.Destroy();
  _impl_.nodename_.Destroy();
  _impl_.hostname_.Destroy();
  _impl_.subdomain_.Destroy();
  _impl_.schedulername_.Destroy();
}

void CarpSpec::ArenaDtor(void* object) {
  CarpSpec* _this = reinterpret_cast< CarpSpec* >(object);
  _this->_impl_.nodeselector_.Destruct();
}
void CarpSpec::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CarpSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:k8s.io.apimachinery.pkg.apis.testapigroup.v1.CarpSpec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nodeselector_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.restartpolicy_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.serviceaccountname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.serviceaccount_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.nodename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.hostname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.subdomain_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.schedulername_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.terminationgraceperiodseconds_ = int64_t{0};
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&_impl_.activedeadlineseconds_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.hostipc_) -
        reinterpret_cast<char*>(&_impl_.activedeadlineseconds_)) + sizeof(_impl_.hostipc_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CarpSpec::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes restartPolicy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_restartpolicy();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 terminationGracePeriodSeconds = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_terminationgraceperiodseconds(&has_bits);
          _impl_.terminationgraceperiodseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 activeDeadlineSeconds = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_activedeadlineseconds(&has_bits);
          _impl_.activedeadlineseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, string> nodeSelector = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.nodeselector_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bytes serviceAccountName = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_serviceaccountname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes serviceAccount = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_serviceaccount();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes nodeName = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_nodename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool hostNetwork = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_hostnetwork(&has_bits);
          _impl_.hostnetwork_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool hostPID = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_hostpid(&has_bits);
          _impl_.hostpid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool hostIPC = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_hostipc(&has_bits);
          _impl_.hostipc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes hostname = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_hostname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes subdomain = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_subdomain();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes schedulername = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_schedulername();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CarpSpec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:k8s.io.apimachinery.pkg.apis.testapigroup.v1.CarpSpec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes restartPolicy = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_restartpolicy(), target);
  }

  // optional int64 terminationGracePeriodSeconds = 4;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_terminationgraceperiodseconds(), target);
  }

  // optional int64 activeDeadlineSeconds = 5;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_activedeadlineseconds(), target);
  }

  // map<string, string> nodeSelector = 7;
  if (!this->_internal_nodeselector().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = CarpSpec_NodeSelectorEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_nodeselector();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "k8s.io.apimachinery.pkg.apis.testapigroup.v1.CarpSpec.NodeSelectorEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "k8s.io.apimachinery.pkg.apis.testapigroup.v1.CarpSpec.NodeSelectorEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(7, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(7, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // optional bytes serviceAccountName = 8;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_serviceaccountname(), target);
  }

  // optional bytes serviceAccount = 9;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_serviceaccount(), target);
  }

  // optional bytes nodeName = 10;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_nodename(), target);
  }

  // optional bool hostNetwork = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_hostnetwork(), target);
  }

  // optional bool hostPID = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_hostpid(), target);
  }

  // optional bool hostIPC = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_hostipc(), target);
  }

  // optional bytes hostname = 16;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        16, this->_internal_hostname(), target);
  }

  // optional bytes subdomain = 17;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteBytesMaybeAliased(
        17, this->_internal_subdomain(), target);
  }

  // optional bytes schedulername = 19;
  if (cached_has_bits & 0x00000040u) {
    target = stream->WriteBytesMaybeAliased(
        19, this->_internal_schedulername(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:k8s.io.apimachinery.pkg.apis.testapigroup.v1.CarpSpec)
  return target;
}

size_t CarpSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:k8s.io.apimachinery.pkg.apis.testapigroup.v1.CarpSpec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> nodeSelector = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_nodeselector_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_nodeselector().begin();
      it != this->_internal_nodeselector().end(); ++it) {
    total_size += CarpSpec_NodeSelectorEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes restartPolicy = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_restartpolicy());
    }

    // optional bytes serviceAccountName = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_serviceaccountname());
    }

    // optional bytes serviceAccount = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_serviceaccount());
    }

    // optional bytes nodeName = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_nodename());
    }

    // optional bytes hostname = 16;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_hostname());
    }

    // optional bytes subdomain = 17;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_subdomain());
    }

    // optional bytes schedulername = 19;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_schedulername());
    }

    // optional int64 terminationGracePeriodSeconds = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_terminationgraceperiodseconds());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional int64 activeDeadlineSeconds = 5;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_activedeadlineseconds());
    }

    // optional bool hostNetwork = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool hostPID = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool hostIPC = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CarpSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CarpSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CarpSpec::GetClassData() const { return &_class_data_; }


void CarpSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CarpSpec*>(&to_msg);
  auto& from = static_cast<const CarpSpec&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:k8s.io.apimachinery.pkg.apis.testapigroup.v1.CarpSpec)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.nodeselector_.MergeFrom(from._impl_.nodeselector_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_restartpolicy(from._internal_restartpolicy());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_serviceaccountname(from._internal_serviceaccountname());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_serviceaccount(from._internal_serviceaccount());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_nodename(from._internal_nodename());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_hostname(from._internal_hostname());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_subdomain(from._internal_subdomain());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_schedulername(from._internal_schedulername());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.terminationgraceperiodseconds_ = from._impl_.terminationgraceperiodseconds_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.activedeadlineseconds_ = from._impl_.activedeadlineseconds_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.hostnetwork_ = from._impl_.hostnetwork_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.hostpid_ = from._impl_.hostpid_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.hostipc_ = from._impl_.hostipc_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CarpSpec::CopyFrom(const CarpSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:k8s.io.apimachinery.pkg.apis.testapigroup.v1.CarpSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CarpSpec::IsInitialized() const {
  return true;
}

void CarpSpec::InternalSwap(CarpSpec* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.nodeselector_.InternalSwap(&other->_impl_.nodeselector_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.restartpolicy_, lhs_arena,
      &other->_impl_.restartpolicy_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.serviceaccountname_, lhs_arena,
      &other->_impl_.serviceaccountname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.serviceaccount_, lhs_arena,
      &other->_impl_.serviceaccount_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nodename_, lhs_arena,
      &other->_impl_.nodename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hostname_, lhs_arena,
      &other->_impl_.hostname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.subdomain_, lhs_arena,
      &other->_impl_.subdomain_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.schedulername_, lhs_arena,
      &other->_impl_.schedulername_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CarpSpec, _impl_.hostipc_)
      + sizeof(CarpSpec::_impl_.hostipc_)
      - PROTOBUF_FIELD_OFFSET(CarpSpec, _impl_.terminationgraceperiodseconds_)>(
          reinterpret_cast<char*>(&_impl_.terminationgraceperiodseconds_),
          reinterpret_cast<char*>(&other->_impl_.terminationgraceperiodseconds_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CarpSpec::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5ftestapigroup_5fv1_5fgenerated_2eproto_getter, &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5ftestapigroup_5fv1_5fgenerated_2eproto_once,
      file_level_metadata_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5ftestapigroup_5fv1_5fgenerated_2eproto[4]);
}

// ===================================================================

class CarpStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<CarpStatus>()._impl_._has_bits_);
  static void set_has_phase(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_hostip(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_carpip(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::k8s::io::apimachinery::pkg::apis::meta::v1::Time& starttime(const CarpStatus* msg);
  static void set_has_starttime(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::k8s::io::apimachinery::pkg::apis::meta::v1::Time&
CarpStatus::_Internal::starttime(const CarpStatus* msg) {
  return *msg->_impl_.starttime_;
}
void CarpStatus::clear_starttime() {
  if (_impl_.starttime_ != nullptr) _impl_.starttime_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
CarpStatus::CarpStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:k8s.io.apimachinery.pkg.apis.testapigroup.v1.CarpStatus)
}
CarpStatus::CarpStatus(const CarpStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CarpStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.conditions_){from._impl_.conditions_}
    , decltype(_impl_.phase_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.reason_){}
    , decltype(_impl_.hostip_){}
    , decltype(_impl_.carpip_){}
    , decltype(_impl_.starttime_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.phase_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.phase_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_phase()) {
    _this->_impl_.phase_.Set(from._internal_phase(), 
      _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_message()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _impl_.reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_reason()) {
    _this->_impl_.reason_.Set(from._internal_reason(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hostip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hostip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_hostip()) {
    _this->_impl_.hostip_.Set(from._internal_hostip(), 
      _this->GetArenaForAllocation());
  }
  _impl_.carpip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.carpip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_carpip()) {
    _this->_impl_.carpip_.Set(from._internal_carpip(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_starttime()) {
    _this->_impl_.starttime_ = new ::k8s::io::apimachinery::pkg::apis::meta::v1::Time(*from._impl_.starttime_);
  }
  // @@protoc_insertion_point(copy_constructor:k8s.io.apimachinery.pkg.apis.testapigroup.v1.CarpStatus)
}

inline void CarpStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.conditions_){arena}
    , decltype(_impl_.phase_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.reason_){}
    , decltype(_impl_.hostip_){}
    , decltype(_impl_.carpip_){}
    , decltype(_impl_.starttime_){nullptr}
  };
  _impl_.phase_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.phase_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hostip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hostip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.carpip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.carpip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CarpStatus::~CarpStatus() {
  // @@protoc_insertion_point(destructor:k8s.io.apimachinery.pkg.apis.testapigroup.v1.CarpStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CarpStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.conditions_.~RepeatedPtrField();
  _impl_.phase_.Destroy();
  _impl_.message_.Destroy();
  _impl_.reason_.Destroy();
  _impl_.hostip_.Destroy();
  _impl_.carpip_.Destroy();
  if (this != internal_default_instance()) delete _impl_.starttime_;
}

void CarpStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CarpStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:k8s.io.apimachinery.pkg.apis.testapigroup.v1.CarpStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.conditions_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.phase_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.message_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.reason_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.hostip_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.carpip_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.starttime_ != nullptr);
      _impl_.starttime_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CarpStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes phase = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_phase();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .k8s.io.apimachinery.pkg.apis.testapigroup.v1.CarpCondition conditions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_conditions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bytes message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes reason = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_reason();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes hostIP = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_hostip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes carpIP = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_carpip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .k8s.io.apimachinery.pkg.apis.meta.v1.Time startTime = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_starttime(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CarpStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:k8s.io.apimachinery.pkg.apis.testapigroup.v1.CarpStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes phase = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_phase(), target);
  }

  // repeated .k8s.io.apimachinery.pkg.apis.testapigroup.v1.CarpCondition conditions = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_conditions_size()); i < n; i++) {
    const auto& repfield = this->_internal_conditions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bytes message = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_message(), target);
  }

  // optional bytes reason = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_reason(), target);
  }

  // optional bytes hostIP = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_hostip(), target);
  }

  // optional bytes carpIP = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_carpip(), target);
  }

  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.Time startTime = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::starttime(this),
        _Internal::starttime(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:k8s.io.apimachinery.pkg.apis.testapigroup.v1.CarpStatus)
  return target;
}

size_t CarpStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:k8s.io.apimachinery.pkg.apis.testapigroup.v1.CarpStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .k8s.io.apimachinery.pkg.apis.testapigroup.v1.CarpCondition conditions = 2;
  total_size += 1UL * this->_internal_conditions_size();
  for (const auto& msg : this->_impl_.conditions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional bytes phase = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_phase());
    }

    // optional bytes message = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_message());
    }

    // optional bytes reason = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_reason());
    }

    // optional bytes hostIP = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_hostip());
    }

    // optional bytes carpIP = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_carpip());
    }

    // optional .k8s.io.apimachinery.pkg.apis.meta.v1.Time startTime = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.starttime_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CarpStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CarpStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CarpStatus::GetClassData() const { return &_class_data_; }


void CarpStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CarpStatus*>(&to_msg);
  auto& from = static_cast<const CarpStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:k8s.io.apimachinery.pkg.apis.testapigroup.v1.CarpStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.conditions_.MergeFrom(from._impl_.conditions_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_phase(from._internal_phase());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_reason(from._internal_reason());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_hostip(from._internal_hostip());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_carpip(from._internal_carpip());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_starttime()->::k8s::io::apimachinery::pkg::apis::meta::v1::Time::MergeFrom(
          from._internal_starttime());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CarpStatus::CopyFrom(const CarpStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:k8s.io.apimachinery.pkg.apis.testapigroup.v1.CarpStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CarpStatus::IsInitialized() const {
  return true;
}

void CarpStatus::InternalSwap(CarpStatus* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.conditions_.InternalSwap(&other->_impl_.conditions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.phase_, lhs_arena,
      &other->_impl_.phase_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.reason_, lhs_arena,
      &other->_impl_.reason_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hostip_, lhs_arena,
      &other->_impl_.hostip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.carpip_, lhs_arena,
      &other->_impl_.carpip_, rhs_arena
  );
  swap(_impl_.starttime_, other->_impl_.starttime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CarpStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5ftestapigroup_5fv1_5fgenerated_2eproto_getter, &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5ftestapigroup_5fv1_5fgenerated_2eproto_once,
      file_level_metadata_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5ftestapigroup_5fv1_5fgenerated_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace testapigroup
}  // namespace apis
}  // namespace pkg
}  // namespace apimachinery
}  // namespace io
}  // namespace k8s
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::k8s::io::apimachinery::pkg::apis::testapigroup::v1::Carp*
Arena::CreateMaybeMessage< ::k8s::io::apimachinery::pkg::apis::testapigroup::v1::Carp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::k8s::io::apimachinery::pkg::apis::testapigroup::v1::Carp >(arena);
}
template<> PROTOBUF_NOINLINE ::k8s::io::apimachinery::pkg::apis::testapigroup::v1::CarpCondition*
Arena::CreateMaybeMessage< ::k8s::io::apimachinery::pkg::apis::testapigroup::v1::CarpCondition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::k8s::io::apimachinery::pkg::apis::testapigroup::v1::CarpCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::k8s::io::apimachinery::pkg::apis::testapigroup::v1::CarpList*
Arena::CreateMaybeMessage< ::k8s::io::apimachinery::pkg::apis::testapigroup::v1::CarpList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::k8s::io::apimachinery::pkg::apis::testapigroup::v1::CarpList >(arena);
}
template<> PROTOBUF_NOINLINE ::k8s::io::apimachinery::pkg::apis::testapigroup::v1::CarpSpec_NodeSelectorEntry_DoNotUse*
Arena::CreateMaybeMessage< ::k8s::io::apimachinery::pkg::apis::testapigroup::v1::CarpSpec_NodeSelectorEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::k8s::io::apimachinery::pkg::apis::testapigroup::v1::CarpSpec_NodeSelectorEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::k8s::io::apimachinery::pkg::apis::testapigroup::v1::CarpSpec*
Arena::CreateMaybeMessage< ::k8s::io::apimachinery::pkg::apis::testapigroup::v1::CarpSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::k8s::io::apimachinery::pkg::apis::testapigroup::v1::CarpSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::k8s::io::apimachinery::pkg::apis::testapigroup::v1::CarpStatus*
Arena::CreateMaybeMessage< ::k8s::io::apimachinery::pkg::apis::testapigroup::v1::CarpStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::k8s::io::apimachinery::pkg::apis::testapigroup::v1::CarpStatus >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
