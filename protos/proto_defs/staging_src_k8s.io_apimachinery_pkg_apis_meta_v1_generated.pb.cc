// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: staging_src_k8s.io_apimachinery_pkg_apis_meta_v1_generated.proto

#include "staging_src_k8s.io_apimachinery_pkg_apis_meta_v1_generated.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace k8s {
namespace io {
namespace apimachinery {
namespace pkg {
namespace apis {
namespace meta {
namespace v1 {
PROTOBUF_CONSTEXPR APIGroup::APIGroup(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.versions_)*/{}
  , /*decltype(_impl_.serveraddressbyclientcidrs_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.preferredversion_)*/nullptr} {}
struct APIGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR APIGroupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~APIGroupDefaultTypeInternal() {}
  union {
    APIGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 APIGroupDefaultTypeInternal _APIGroup_default_instance_;
PROTOBUF_CONSTEXPR APIGroupList::APIGroupList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.groups_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct APIGroupListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR APIGroupListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~APIGroupListDefaultTypeInternal() {}
  union {
    APIGroupList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 APIGroupListDefaultTypeInternal _APIGroupList_default_instance_;
PROTOBUF_CONSTEXPR APIResource::APIResource(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.shortnames_)*/{}
  , /*decltype(_impl_.categories_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.kind_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.singularname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.group_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.storageversionhash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.verbs_)*/nullptr
  , /*decltype(_impl_.namespaced_)*/false} {}
struct APIResourceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR APIResourceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~APIResourceDefaultTypeInternal() {}
  union {
    APIResource _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 APIResourceDefaultTypeInternal _APIResource_default_instance_;
PROTOBUF_CONSTEXPR APIResourceList::APIResourceList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.resources_)*/{}
  , /*decltype(_impl_.groupversion_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct APIResourceListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR APIResourceListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~APIResourceListDefaultTypeInternal() {}
  union {
    APIResourceList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 APIResourceListDefaultTypeInternal _APIResourceList_default_instance_;
PROTOBUF_CONSTEXPR APIVersions::APIVersions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.versions_)*/{}
  , /*decltype(_impl_.serveraddressbyclientcidrs_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct APIVersionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR APIVersionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~APIVersionsDefaultTypeInternal() {}
  union {
    APIVersions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 APIVersionsDefaultTypeInternal _APIVersions_default_instance_;
PROTOBUF_CONSTEXPR ApplyOptions::ApplyOptions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.dryrun_)*/{}
  , /*decltype(_impl_.fieldmanager_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.force_)*/false} {}
struct ApplyOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ApplyOptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ApplyOptionsDefaultTypeInternal() {}
  union {
    ApplyOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ApplyOptionsDefaultTypeInternal _ApplyOptions_default_instance_;
PROTOBUF_CONSTEXPR Condition::Condition(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.reason_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lasttransitiontime_)*/nullptr
  , /*decltype(_impl_.observedgeneration_)*/int64_t{0}} {}
struct ConditionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConditionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConditionDefaultTypeInternal() {}
  union {
    Condition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConditionDefaultTypeInternal _Condition_default_instance_;
PROTOBUF_CONSTEXPR CreateOptions::CreateOptions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.dryrun_)*/{}
  , /*decltype(_impl_.fieldmanager_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fieldvalidation_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct CreateOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateOptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateOptionsDefaultTypeInternal() {}
  union {
    CreateOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateOptionsDefaultTypeInternal _CreateOptions_default_instance_;
PROTOBUF_CONSTEXPR DeleteOptions::DeleteOptions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.dryrun_)*/{}
  , /*decltype(_impl_.propagationpolicy_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.preconditions_)*/nullptr
  , /*decltype(_impl_.graceperiodseconds_)*/int64_t{0}
  , /*decltype(_impl_.orphandependents_)*/false} {}
struct DeleteOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteOptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteOptionsDefaultTypeInternal() {}
  union {
    DeleteOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteOptionsDefaultTypeInternal _DeleteOptions_default_instance_;
PROTOBUF_CONSTEXPR Duration::Duration(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.duration_)*/int64_t{0}} {}
struct DurationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DurationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DurationDefaultTypeInternal() {}
  union {
    Duration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DurationDefaultTypeInternal _Duration_default_instance_;
PROTOBUF_CONSTEXPR FieldsV1::FieldsV1(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.raw_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct FieldsV1DefaultTypeInternal {
  PROTOBUF_CONSTEXPR FieldsV1DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FieldsV1DefaultTypeInternal() {}
  union {
    FieldsV1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FieldsV1DefaultTypeInternal _FieldsV1_default_instance_;
PROTOBUF_CONSTEXPR GetOptions::GetOptions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.resourceversion_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct GetOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetOptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetOptionsDefaultTypeInternal() {}
  union {
    GetOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetOptionsDefaultTypeInternal _GetOptions_default_instance_;
PROTOBUF_CONSTEXPR GroupKind::GroupKind(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.group_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.kind_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct GroupKindDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GroupKindDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GroupKindDefaultTypeInternal() {}
  union {
    GroupKind _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GroupKindDefaultTypeInternal _GroupKind_default_instance_;
PROTOBUF_CONSTEXPR GroupResource::GroupResource(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.group_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.resource_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct GroupResourceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GroupResourceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GroupResourceDefaultTypeInternal() {}
  union {
    GroupResource _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GroupResourceDefaultTypeInternal _GroupResource_default_instance_;
PROTOBUF_CONSTEXPR GroupVersion::GroupVersion(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.group_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct GroupVersionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GroupVersionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GroupVersionDefaultTypeInternal() {}
  union {
    GroupVersion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GroupVersionDefaultTypeInternal _GroupVersion_default_instance_;
PROTOBUF_CONSTEXPR GroupVersionForDiscovery::GroupVersionForDiscovery(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.groupversion_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct GroupVersionForDiscoveryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GroupVersionForDiscoveryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GroupVersionForDiscoveryDefaultTypeInternal() {}
  union {
    GroupVersionForDiscovery _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GroupVersionForDiscoveryDefaultTypeInternal _GroupVersionForDiscovery_default_instance_;
PROTOBUF_CONSTEXPR GroupVersionKind::GroupVersionKind(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.group_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.kind_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct GroupVersionKindDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GroupVersionKindDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GroupVersionKindDefaultTypeInternal() {}
  union {
    GroupVersionKind _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GroupVersionKindDefaultTypeInternal _GroupVersionKind_default_instance_;
PROTOBUF_CONSTEXPR GroupVersionResource::GroupVersionResource(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.group_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.resource_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct GroupVersionResourceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GroupVersionResourceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GroupVersionResourceDefaultTypeInternal() {}
  union {
    GroupVersionResource _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GroupVersionResourceDefaultTypeInternal _GroupVersionResource_default_instance_;
PROTOBUF_CONSTEXPR LabelSelector_MatchLabelsEntry_DoNotUse::LabelSelector_MatchLabelsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct LabelSelector_MatchLabelsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LabelSelector_MatchLabelsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LabelSelector_MatchLabelsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    LabelSelector_MatchLabelsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LabelSelector_MatchLabelsEntry_DoNotUseDefaultTypeInternal _LabelSelector_MatchLabelsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR LabelSelector::LabelSelector(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.matchlabels_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.matchexpressions_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LabelSelectorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LabelSelectorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LabelSelectorDefaultTypeInternal() {}
  union {
    LabelSelector _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LabelSelectorDefaultTypeInternal _LabelSelector_default_instance_;
PROTOBUF_CONSTEXPR LabelSelectorRequirement::LabelSelectorRequirement(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.values_)*/{}
  , /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.operator__)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct LabelSelectorRequirementDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LabelSelectorRequirementDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LabelSelectorRequirementDefaultTypeInternal() {}
  union {
    LabelSelectorRequirement _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LabelSelectorRequirementDefaultTypeInternal _LabelSelectorRequirement_default_instance_;
PROTOBUF_CONSTEXPR List::List(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.metadata_)*/nullptr} {}
struct ListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListDefaultTypeInternal() {}
  union {
    List _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListDefaultTypeInternal _List_default_instance_;
PROTOBUF_CONSTEXPR ListMeta::ListMeta(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.selflink_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.resourceversion_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.continue__)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.remainingitemcount_)*/int64_t{0}} {}
struct ListMetaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListMetaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListMetaDefaultTypeInternal() {}
  union {
    ListMeta _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListMetaDefaultTypeInternal _ListMeta_default_instance_;
PROTOBUF_CONSTEXPR ListOptions::ListOptions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.labelselector_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fieldselector_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.resourceversion_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.continue__)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.resourceversionmatch_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timeoutseconds_)*/int64_t{0}
  , /*decltype(_impl_.limit_)*/int64_t{0}
  , /*decltype(_impl_.watch_)*/false
  , /*decltype(_impl_.allowwatchbookmarks_)*/false
  , /*decltype(_impl_.sendinitialevents_)*/false} {}
struct ListOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListOptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListOptionsDefaultTypeInternal() {}
  union {
    ListOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListOptionsDefaultTypeInternal _ListOptions_default_instance_;
PROTOBUF_CONSTEXPR ManagedFieldsEntry::ManagedFieldsEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.manager_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.operation_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.apiversion_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fieldstype_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.subresource_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.time_)*/nullptr
  , /*decltype(_impl_.fieldsv1_)*/nullptr} {}
struct ManagedFieldsEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ManagedFieldsEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ManagedFieldsEntryDefaultTypeInternal() {}
  union {
    ManagedFieldsEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ManagedFieldsEntryDefaultTypeInternal _ManagedFieldsEntry_default_instance_;
PROTOBUF_CONSTEXPR MicroTime::MicroTime(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.seconds_)*/int64_t{0}
  , /*decltype(_impl_.nanos_)*/0} {}
struct MicroTimeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MicroTimeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MicroTimeDefaultTypeInternal() {}
  union {
    MicroTime _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MicroTimeDefaultTypeInternal _MicroTime_default_instance_;
PROTOBUF_CONSTEXPR ObjectMeta_LabelsEntry_DoNotUse::ObjectMeta_LabelsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct ObjectMeta_LabelsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObjectMeta_LabelsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObjectMeta_LabelsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ObjectMeta_LabelsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObjectMeta_LabelsEntry_DoNotUseDefaultTypeInternal _ObjectMeta_LabelsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR ObjectMeta_AnnotationsEntry_DoNotUse::ObjectMeta_AnnotationsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct ObjectMeta_AnnotationsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObjectMeta_AnnotationsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObjectMeta_AnnotationsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ObjectMeta_AnnotationsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObjectMeta_AnnotationsEntry_DoNotUseDefaultTypeInternal _ObjectMeta_AnnotationsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR ObjectMeta::ObjectMeta(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.labels_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.annotations_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.ownerreferences_)*/{}
  , /*decltype(_impl_.finalizers_)*/{}
  , /*decltype(_impl_.managedfields_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.generatename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.namespace__)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.selflink_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.resourceversion_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.creationtimestamp_)*/nullptr
  , /*decltype(_impl_.deletiontimestamp_)*/nullptr
  , /*decltype(_impl_.generation_)*/int64_t{0}
  , /*decltype(_impl_.deletiongraceperiodseconds_)*/int64_t{0}} {}
struct ObjectMetaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObjectMetaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObjectMetaDefaultTypeInternal() {}
  union {
    ObjectMeta _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObjectMetaDefaultTypeInternal _ObjectMeta_default_instance_;
PROTOBUF_CONSTEXPR OwnerReference::OwnerReference(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.kind_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.apiversion_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.controller_)*/false
  , /*decltype(_impl_.blockownerdeletion_)*/false} {}
struct OwnerReferenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OwnerReferenceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OwnerReferenceDefaultTypeInternal() {}
  union {
    OwnerReference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OwnerReferenceDefaultTypeInternal _OwnerReference_default_instance_;
PROTOBUF_CONSTEXPR PartialObjectMetadata::PartialObjectMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.metadata_)*/nullptr} {}
struct PartialObjectMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PartialObjectMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PartialObjectMetadataDefaultTypeInternal() {}
  union {
    PartialObjectMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PartialObjectMetadataDefaultTypeInternal _PartialObjectMetadata_default_instance_;
PROTOBUF_CONSTEXPR PartialObjectMetadataList::PartialObjectMetadataList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.metadata_)*/nullptr} {}
struct PartialObjectMetadataListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PartialObjectMetadataListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PartialObjectMetadataListDefaultTypeInternal() {}
  union {
    PartialObjectMetadataList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PartialObjectMetadataListDefaultTypeInternal _PartialObjectMetadataList_default_instance_;
PROTOBUF_CONSTEXPR Patch::Patch(
    ::_pbi::ConstantInitialized) {}
struct PatchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PatchDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PatchDefaultTypeInternal() {}
  union {
    Patch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PatchDefaultTypeInternal _Patch_default_instance_;
PROTOBUF_CONSTEXPR PatchOptions::PatchOptions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.dryrun_)*/{}
  , /*decltype(_impl_.fieldmanager_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fieldvalidation_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.force_)*/false} {}
struct PatchOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PatchOptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PatchOptionsDefaultTypeInternal() {}
  union {
    PatchOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PatchOptionsDefaultTypeInternal _PatchOptions_default_instance_;
PROTOBUF_CONSTEXPR Preconditions::Preconditions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.resourceversion_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct PreconditionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PreconditionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PreconditionsDefaultTypeInternal() {}
  union {
    Preconditions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PreconditionsDefaultTypeInternal _Preconditions_default_instance_;
PROTOBUF_CONSTEXPR RootPaths::RootPaths(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.paths_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RootPathsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RootPathsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RootPathsDefaultTypeInternal() {}
  union {
    RootPaths _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RootPathsDefaultTypeInternal _RootPaths_default_instance_;
PROTOBUF_CONSTEXPR ServerAddressByClientCIDR::ServerAddressByClientCIDR(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.clientcidr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.serveraddress_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct ServerAddressByClientCIDRDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerAddressByClientCIDRDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerAddressByClientCIDRDefaultTypeInternal() {}
  union {
    ServerAddressByClientCIDR _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerAddressByClientCIDRDefaultTypeInternal _ServerAddressByClientCIDR_default_instance_;
PROTOBUF_CONSTEXPR Status::Status(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.status_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.reason_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.metadata_)*/nullptr
  , /*decltype(_impl_.details_)*/nullptr
  , /*decltype(_impl_.code_)*/0} {}
struct StatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatusDefaultTypeInternal() {}
  union {
    Status _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatusDefaultTypeInternal _Status_default_instance_;
PROTOBUF_CONSTEXPR StatusCause::StatusCause(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.reason_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.field_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct StatusCauseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatusCauseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatusCauseDefaultTypeInternal() {}
  union {
    StatusCause _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatusCauseDefaultTypeInternal _StatusCause_default_instance_;
PROTOBUF_CONSTEXPR StatusDetails::StatusDetails(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.causes_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.group_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.kind_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.retryafterseconds_)*/0} {}
struct StatusDetailsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatusDetailsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatusDetailsDefaultTypeInternal() {}
  union {
    StatusDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatusDetailsDefaultTypeInternal _StatusDetails_default_instance_;
PROTOBUF_CONSTEXPR TableOptions::TableOptions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.includeobject_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct TableOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TableOptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TableOptionsDefaultTypeInternal() {}
  union {
    TableOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TableOptionsDefaultTypeInternal _TableOptions_default_instance_;
PROTOBUF_CONSTEXPR Time::Time(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.seconds_)*/int64_t{0}
  , /*decltype(_impl_.nanos_)*/0} {}
struct TimeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TimeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TimeDefaultTypeInternal() {}
  union {
    Time _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TimeDefaultTypeInternal _Time_default_instance_;
PROTOBUF_CONSTEXPR Timestamp::Timestamp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.seconds_)*/int64_t{0}
  , /*decltype(_impl_.nanos_)*/0} {}
struct TimestampDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TimestampDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TimestampDefaultTypeInternal() {}
  union {
    Timestamp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TimestampDefaultTypeInternal _Timestamp_default_instance_;
PROTOBUF_CONSTEXPR TypeMeta::TypeMeta(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.kind_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.apiversion_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct TypeMetaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TypeMetaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TypeMetaDefaultTypeInternal() {}
  union {
    TypeMeta _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TypeMetaDefaultTypeInternal _TypeMeta_default_instance_;
PROTOBUF_CONSTEXPR UpdateOptions::UpdateOptions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.dryrun_)*/{}
  , /*decltype(_impl_.fieldmanager_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fieldvalidation_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct UpdateOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateOptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateOptionsDefaultTypeInternal() {}
  union {
    UpdateOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateOptionsDefaultTypeInternal _UpdateOptions_default_instance_;
PROTOBUF_CONSTEXPR Verbs::Verbs(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VerbsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VerbsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VerbsDefaultTypeInternal() {}
  union {
    Verbs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VerbsDefaultTypeInternal _Verbs_default_instance_;
PROTOBUF_CONSTEXPR WatchEvent::WatchEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.object_)*/nullptr} {}
struct WatchEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WatchEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WatchEventDefaultTypeInternal() {}
  union {
    WatchEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WatchEventDefaultTypeInternal _WatchEvent_default_instance_;
}  // namespace v1
}  // namespace meta
}  // namespace apis
}  // namespace pkg
}  // namespace apimachinery
}  // namespace io
}  // namespace k8s
static ::_pb::Metadata file_level_metadata_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto[47];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto = nullptr;

const uint32_t TableStruct_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::APIGroup, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::APIGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::APIGroup, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::APIGroup, _impl_.versions_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::APIGroup, _impl_.preferredversion_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::APIGroup, _impl_.serveraddressbyclientcidrs_),
  0,
  ~0u,
  1,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::APIGroupList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::APIGroupList, _impl_.groups_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::APIResource, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::APIResource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::APIResource, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::APIResource, _impl_.singularname_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::APIResource, _impl_.namespaced_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::APIResource, _impl_.group_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::APIResource, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::APIResource, _impl_.kind_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::APIResource, _impl_.verbs_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::APIResource, _impl_.shortnames_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::APIResource, _impl_.categories_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::APIResource, _impl_.storageversionhash_),
  0,
  2,
  7,
  3,
  4,
  1,
  6,
  ~0u,
  ~0u,
  5,
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::APIResourceList, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::APIResourceList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::APIResourceList, _impl_.groupversion_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::APIResourceList, _impl_.resources_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::APIVersions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::APIVersions, _impl_.versions_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::APIVersions, _impl_.serveraddressbyclientcidrs_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::ApplyOptions, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::ApplyOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::ApplyOptions, _impl_.dryrun_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::ApplyOptions, _impl_.force_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::ApplyOptions, _impl_.fieldmanager_),
  ~0u,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::Condition, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::Condition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::Condition, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::Condition, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::Condition, _impl_.observedgeneration_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::Condition, _impl_.lasttransitiontime_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::Condition, _impl_.reason_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::Condition, _impl_.message_),
  0,
  1,
  5,
  4,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::CreateOptions, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::CreateOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::CreateOptions, _impl_.dryrun_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::CreateOptions, _impl_.fieldmanager_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::CreateOptions, _impl_.fieldvalidation_),
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::DeleteOptions, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::DeleteOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::DeleteOptions, _impl_.graceperiodseconds_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::DeleteOptions, _impl_.preconditions_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::DeleteOptions, _impl_.orphandependents_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::DeleteOptions, _impl_.propagationpolicy_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::DeleteOptions, _impl_.dryrun_),
  2,
  1,
  3,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::Duration, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::Duration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::Duration, _impl_.duration_),
  0,
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::FieldsV1, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::FieldsV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::FieldsV1, _impl_.raw_),
  0,
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::GetOptions, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::GetOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::GetOptions, _impl_.resourceversion_),
  0,
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::GroupKind, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::GroupKind, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::GroupKind, _impl_.group_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::GroupKind, _impl_.kind_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::GroupResource, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::GroupResource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::GroupResource, _impl_.group_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::GroupResource, _impl_.resource_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::GroupVersion, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::GroupVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::GroupVersion, _impl_.group_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::GroupVersion, _impl_.version_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::GroupVersionForDiscovery, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::GroupVersionForDiscovery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::GroupVersionForDiscovery, _impl_.groupversion_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::GroupVersionForDiscovery, _impl_.version_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::GroupVersionKind, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::GroupVersionKind, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::GroupVersionKind, _impl_.group_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::GroupVersionKind, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::GroupVersionKind, _impl_.kind_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::GroupVersionResource, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::GroupVersionResource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::GroupVersionResource, _impl_.group_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::GroupVersionResource, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::GroupVersionResource, _impl_.resource_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::LabelSelector_MatchLabelsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::LabelSelector_MatchLabelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::LabelSelector_MatchLabelsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::LabelSelector_MatchLabelsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::LabelSelector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::LabelSelector, _impl_.matchlabels_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::LabelSelector, _impl_.matchexpressions_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::LabelSelectorRequirement, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::LabelSelectorRequirement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::LabelSelectorRequirement, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::LabelSelectorRequirement, _impl_.operator__),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::LabelSelectorRequirement, _impl_.values_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::List, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::List, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::List, _impl_.metadata_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::List, _impl_.items_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta, _impl_.selflink_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta, _impl_.resourceversion_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta, _impl_.continue__),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta, _impl_.remainingitemcount_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::ListOptions, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::ListOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::ListOptions, _impl_.labelselector_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::ListOptions, _impl_.fieldselector_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::ListOptions, _impl_.watch_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::ListOptions, _impl_.allowwatchbookmarks_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::ListOptions, _impl_.resourceversion_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::ListOptions, _impl_.resourceversionmatch_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::ListOptions, _impl_.timeoutseconds_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::ListOptions, _impl_.limit_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::ListOptions, _impl_.continue__),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::ListOptions, _impl_.sendinitialevents_),
  0,
  1,
  7,
  8,
  2,
  4,
  5,
  6,
  3,
  9,
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::ManagedFieldsEntry, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::ManagedFieldsEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::ManagedFieldsEntry, _impl_.manager_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::ManagedFieldsEntry, _impl_.operation_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::ManagedFieldsEntry, _impl_.apiversion_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::ManagedFieldsEntry, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::ManagedFieldsEntry, _impl_.fieldstype_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::ManagedFieldsEntry, _impl_.fieldsv1_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::ManagedFieldsEntry, _impl_.subresource_),
  0,
  1,
  2,
  5,
  3,
  6,
  4,
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::MicroTime, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::MicroTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::MicroTime, _impl_.seconds_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::MicroTime, _impl_.nanos_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta_LabelsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta_LabelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta_LabelsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta_LabelsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta_AnnotationsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta_AnnotationsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta_AnnotationsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta_AnnotationsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta, _impl_.generatename_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta, _impl_.namespace__),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta, _impl_.selflink_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta, _impl_.uid_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta, _impl_.resourceversion_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta, _impl_.generation_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta, _impl_.creationtimestamp_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta, _impl_.deletiontimestamp_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta, _impl_.deletiongraceperiodseconds_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta, _impl_.labels_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta, _impl_.annotations_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta, _impl_.ownerreferences_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta, _impl_.finalizers_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta, _impl_.managedfields_),
  0,
  1,
  2,
  3,
  4,
  5,
  8,
  6,
  7,
  9,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::OwnerReference, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::OwnerReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::OwnerReference, _impl_.apiversion_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::OwnerReference, _impl_.kind_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::OwnerReference, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::OwnerReference, _impl_.uid_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::OwnerReference, _impl_.controller_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::OwnerReference, _impl_.blockownerdeletion_),
  3,
  0,
  1,
  2,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::PartialObjectMetadata, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::PartialObjectMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::PartialObjectMetadata, _impl_.metadata_),
  0,
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::PartialObjectMetadataList, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::PartialObjectMetadataList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::PartialObjectMetadataList, _impl_.metadata_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::PartialObjectMetadataList, _impl_.items_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::Patch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::PatchOptions, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::PatchOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::PatchOptions, _impl_.dryrun_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::PatchOptions, _impl_.force_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::PatchOptions, _impl_.fieldmanager_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::PatchOptions, _impl_.fieldvalidation_),
  ~0u,
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::Preconditions, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::Preconditions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::Preconditions, _impl_.uid_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::Preconditions, _impl_.resourceversion_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::RootPaths, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::RootPaths, _impl_.paths_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::ServerAddressByClientCIDR, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::ServerAddressByClientCIDR, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::ServerAddressByClientCIDR, _impl_.clientcidr_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::ServerAddressByClientCIDR, _impl_.serveraddress_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::Status, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::Status, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::Status, _impl_.metadata_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::Status, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::Status, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::Status, _impl_.reason_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::Status, _impl_.details_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::Status, _impl_.code_),
  3,
  0,
  1,
  2,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::StatusCause, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::StatusCause, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::StatusCause, _impl_.reason_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::StatusCause, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::StatusCause, _impl_.field_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::StatusDetails, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::StatusDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::StatusDetails, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::StatusDetails, _impl_.group_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::StatusDetails, _impl_.kind_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::StatusDetails, _impl_.uid_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::StatusDetails, _impl_.causes_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::StatusDetails, _impl_.retryafterseconds_),
  0,
  1,
  2,
  3,
  ~0u,
  4,
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::TableOptions, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::TableOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::TableOptions, _impl_.includeobject_),
  0,
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::Time, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::Time, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::Time, _impl_.seconds_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::Time, _impl_.nanos_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::Timestamp, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::Timestamp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::Timestamp, _impl_.seconds_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::Timestamp, _impl_.nanos_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::TypeMeta, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::TypeMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::TypeMeta, _impl_.kind_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::TypeMeta, _impl_.apiversion_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::UpdateOptions, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::UpdateOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::UpdateOptions, _impl_.dryrun_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::UpdateOptions, _impl_.fieldmanager_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::UpdateOptions, _impl_.fieldvalidation_),
  ~0u,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::Verbs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::Verbs, _impl_.items_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::WatchEvent, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::WatchEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::WatchEvent, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::apimachinery::pkg::apis::meta::v1::WatchEvent, _impl_.object_),
  0,
  1,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, -1, sizeof(::k8s::io::apimachinery::pkg::apis::meta::v1::APIGroup)},
  { 14, -1, -1, sizeof(::k8s::io::apimachinery::pkg::apis::meta::v1::APIGroupList)},
  { 21, 37, -1, sizeof(::k8s::io::apimachinery::pkg::apis::meta::v1::APIResource)},
  { 47, 55, -1, sizeof(::k8s::io::apimachinery::pkg::apis::meta::v1::APIResourceList)},
  { 57, -1, -1, sizeof(::k8s::io::apimachinery::pkg::apis::meta::v1::APIVersions)},
  { 65, 74, -1, sizeof(::k8s::io::apimachinery::pkg::apis::meta::v1::ApplyOptions)},
  { 77, 89, -1, sizeof(::k8s::io::apimachinery::pkg::apis::meta::v1::Condition)},
  { 95, 104, -1, sizeof(::k8s::io::apimachinery::pkg::apis::meta::v1::CreateOptions)},
  { 107, 118, -1, sizeof(::k8s::io::apimachinery::pkg::apis::meta::v1::DeleteOptions)},
  { 123, 130, -1, sizeof(::k8s::io::apimachinery::pkg::apis::meta::v1::Duration)},
  { 131, 138, -1, sizeof(::k8s::io::apimachinery::pkg::apis::meta::v1::FieldsV1)},
  { 139, 146, -1, sizeof(::k8s::io::apimachinery::pkg::apis::meta::v1::GetOptions)},
  { 147, 155, -1, sizeof(::k8s::io::apimachinery::pkg::apis::meta::v1::GroupKind)},
  { 157, 165, -1, sizeof(::k8s::io::apimachinery::pkg::apis::meta::v1::GroupResource)},
  { 167, 175, -1, sizeof(::k8s::io::apimachinery::pkg::apis::meta::v1::GroupVersion)},
  { 177, 185, -1, sizeof(::k8s::io::apimachinery::pkg::apis::meta::v1::GroupVersionForDiscovery)},
  { 187, 196, -1, sizeof(::k8s::io::apimachinery::pkg::apis::meta::v1::GroupVersionKind)},
  { 199, 208, -1, sizeof(::k8s::io::apimachinery::pkg::apis::meta::v1::GroupVersionResource)},
  { 211, 219, -1, sizeof(::k8s::io::apimachinery::pkg::apis::meta::v1::LabelSelector_MatchLabelsEntry_DoNotUse)},
  { 221, -1, -1, sizeof(::k8s::io::apimachinery::pkg::apis::meta::v1::LabelSelector)},
  { 229, 238, -1, sizeof(::k8s::io::apimachinery::pkg::apis::meta::v1::LabelSelectorRequirement)},
  { 241, 249, -1, sizeof(::k8s::io::apimachinery::pkg::apis::meta::v1::List)},
  { 251, 261, -1, sizeof(::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta)},
  { 265, 281, -1, sizeof(::k8s::io::apimachinery::pkg::apis::meta::v1::ListOptions)},
  { 291, 304, -1, sizeof(::k8s::io::apimachinery::pkg::apis::meta::v1::ManagedFieldsEntry)},
  { 311, 319, -1, sizeof(::k8s::io::apimachinery::pkg::apis::meta::v1::MicroTime)},
  { 321, 329, -1, sizeof(::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta_LabelsEntry_DoNotUse)},
  { 331, 339, -1, sizeof(::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta_AnnotationsEntry_DoNotUse)},
  { 341, 362, -1, sizeof(::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta)},
  { 377, 389, -1, sizeof(::k8s::io::apimachinery::pkg::apis::meta::v1::OwnerReference)},
  { 395, 402, -1, sizeof(::k8s::io::apimachinery::pkg::apis::meta::v1::PartialObjectMetadata)},
  { 403, 411, -1, sizeof(::k8s::io::apimachinery::pkg::apis::meta::v1::PartialObjectMetadataList)},
  { 413, -1, -1, sizeof(::k8s::io::apimachinery::pkg::apis::meta::v1::Patch)},
  { 419, 429, -1, sizeof(::k8s::io::apimachinery::pkg::apis::meta::v1::PatchOptions)},
  { 433, 441, -1, sizeof(::k8s::io::apimachinery::pkg::apis::meta::v1::Preconditions)},
  { 443, -1, -1, sizeof(::k8s::io::apimachinery::pkg::apis::meta::v1::RootPaths)},
  { 450, 458, -1, sizeof(::k8s::io::apimachinery::pkg::apis::meta::v1::ServerAddressByClientCIDR)},
  { 460, 472, -1, sizeof(::k8s::io::apimachinery::pkg::apis::meta::v1::Status)},
  { 478, 487, -1, sizeof(::k8s::io::apimachinery::pkg::apis::meta::v1::StatusCause)},
  { 490, 502, -1, sizeof(::k8s::io::apimachinery::pkg::apis::meta::v1::StatusDetails)},
  { 508, 515, -1, sizeof(::k8s::io::apimachinery::pkg::apis::meta::v1::TableOptions)},
  { 516, 524, -1, sizeof(::k8s::io::apimachinery::pkg::apis::meta::v1::Time)},
  { 526, 534, -1, sizeof(::k8s::io::apimachinery::pkg::apis::meta::v1::Timestamp)},
  { 536, 544, -1, sizeof(::k8s::io::apimachinery::pkg::apis::meta::v1::TypeMeta)},
  { 546, 555, -1, sizeof(::k8s::io::apimachinery::pkg::apis::meta::v1::UpdateOptions)},
  { 558, -1, -1, sizeof(::k8s::io::apimachinery::pkg::apis::meta::v1::Verbs)},
  { 565, 573, -1, sizeof(::k8s::io::apimachinery::pkg::apis::meta::v1::WatchEvent)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::k8s::io::apimachinery::pkg::apis::meta::v1::_APIGroup_default_instance_._instance,
  &::k8s::io::apimachinery::pkg::apis::meta::v1::_APIGroupList_default_instance_._instance,
  &::k8s::io::apimachinery::pkg::apis::meta::v1::_APIResource_default_instance_._instance,
  &::k8s::io::apimachinery::pkg::apis::meta::v1::_APIResourceList_default_instance_._instance,
  &::k8s::io::apimachinery::pkg::apis::meta::v1::_APIVersions_default_instance_._instance,
  &::k8s::io::apimachinery::pkg::apis::meta::v1::_ApplyOptions_default_instance_._instance,
  &::k8s::io::apimachinery::pkg::apis::meta::v1::_Condition_default_instance_._instance,
  &::k8s::io::apimachinery::pkg::apis::meta::v1::_CreateOptions_default_instance_._instance,
  &::k8s::io::apimachinery::pkg::apis::meta::v1::_DeleteOptions_default_instance_._instance,
  &::k8s::io::apimachinery::pkg::apis::meta::v1::_Duration_default_instance_._instance,
  &::k8s::io::apimachinery::pkg::apis::meta::v1::_FieldsV1_default_instance_._instance,
  &::k8s::io::apimachinery::pkg::apis::meta::v1::_GetOptions_default_instance_._instance,
  &::k8s::io::apimachinery::pkg::apis::meta::v1::_GroupKind_default_instance_._instance,
  &::k8s::io::apimachinery::pkg::apis::meta::v1::_GroupResource_default_instance_._instance,
  &::k8s::io::apimachinery::pkg::apis::meta::v1::_GroupVersion_default_instance_._instance,
  &::k8s::io::apimachinery::pkg::apis::meta::v1::_GroupVersionForDiscovery_default_instance_._instance,
  &::k8s::io::apimachinery::pkg::apis::meta::v1::_GroupVersionKind_default_instance_._instance,
  &::k8s::io::apimachinery::pkg::apis::meta::v1::_GroupVersionResource_default_instance_._instance,
  &::k8s::io::apimachinery::pkg::apis::meta::v1::_LabelSelector_MatchLabelsEntry_DoNotUse_default_instance_._instance,
  &::k8s::io::apimachinery::pkg::apis::meta::v1::_LabelSelector_default_instance_._instance,
  &::k8s::io::apimachinery::pkg::apis::meta::v1::_LabelSelectorRequirement_default_instance_._instance,
  &::k8s::io::apimachinery::pkg::apis::meta::v1::_List_default_instance_._instance,
  &::k8s::io::apimachinery::pkg::apis::meta::v1::_ListMeta_default_instance_._instance,
  &::k8s::io::apimachinery::pkg::apis::meta::v1::_ListOptions_default_instance_._instance,
  &::k8s::io::apimachinery::pkg::apis::meta::v1::_ManagedFieldsEntry_default_instance_._instance,
  &::k8s::io::apimachinery::pkg::apis::meta::v1::_MicroTime_default_instance_._instance,
  &::k8s::io::apimachinery::pkg::apis::meta::v1::_ObjectMeta_LabelsEntry_DoNotUse_default_instance_._instance,
  &::k8s::io::apimachinery::pkg::apis::meta::v1::_ObjectMeta_AnnotationsEntry_DoNotUse_default_instance_._instance,
  &::k8s::io::apimachinery::pkg::apis::meta::v1::_ObjectMeta_default_instance_._instance,
  &::k8s::io::apimachinery::pkg::apis::meta::v1::_OwnerReference_default_instance_._instance,
  &::k8s::io::apimachinery::pkg::apis::meta::v1::_PartialObjectMetadata_default_instance_._instance,
  &::k8s::io::apimachinery::pkg::apis::meta::v1::_PartialObjectMetadataList_default_instance_._instance,
  &::k8s::io::apimachinery::pkg::apis::meta::v1::_Patch_default_instance_._instance,
  &::k8s::io::apimachinery::pkg::apis::meta::v1::_PatchOptions_default_instance_._instance,
  &::k8s::io::apimachinery::pkg::apis::meta::v1::_Preconditions_default_instance_._instance,
  &::k8s::io::apimachinery::pkg::apis::meta::v1::_RootPaths_default_instance_._instance,
  &::k8s::io::apimachinery::pkg::apis::meta::v1::_ServerAddressByClientCIDR_default_instance_._instance,
  &::k8s::io::apimachinery::pkg::apis::meta::v1::_Status_default_instance_._instance,
  &::k8s::io::apimachinery::pkg::apis::meta::v1::_StatusCause_default_instance_._instance,
  &::k8s::io::apimachinery::pkg::apis::meta::v1::_StatusDetails_default_instance_._instance,
  &::k8s::io::apimachinery::pkg::apis::meta::v1::_TableOptions_default_instance_._instance,
  &::k8s::io::apimachinery::pkg::apis::meta::v1::_Time_default_instance_._instance,
  &::k8s::io::apimachinery::pkg::apis::meta::v1::_Timestamp_default_instance_._instance,
  &::k8s::io::apimachinery::pkg::apis::meta::v1::_TypeMeta_default_instance_._instance,
  &::k8s::io::apimachinery::pkg::apis::meta::v1::_UpdateOptions_default_instance_._instance,
  &::k8s::io::apimachinery::pkg::apis::meta::v1::_Verbs_default_instance_._instance,
  &::k8s::io::apimachinery::pkg::apis::meta::v1::_WatchEvent_default_instance_._instance,
};

const char descriptor_table_protodef_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n@staging_src_k8s.io_apimachinery_pkg_ap"
  "is_meta_v1_generated.proto\022$k8s.io.apima"
  "chinery.pkg.apis.meta.v1\032;staging_src_k8"
  "s.io_apimachinery_pkg_runtime_generated."
  "proto\032Bstaging_src_k8s.io_apimachinery_p"
  "kg_runtime_schema_generated.proto\"\251\002\n\010AP"
  "IGroup\022\014\n\004name\030\001 \001(\014\022P\n\010versions\030\002 \003(\0132>"
  ".k8s.io.apimachinery.pkg.apis.meta.v1.Gr"
  "oupVersionForDiscovery\022X\n\020preferredVersi"
  "on\030\003 \001(\0132>.k8s.io.apimachinery.pkg.apis."
  "meta.v1.GroupVersionForDiscovery\022c\n\032serv"
  "erAddressByClientCIDRs\030\004 \003(\0132\?.k8s.io.ap"
  "imachinery.pkg.apis.meta.v1.ServerAddres"
  "sByClientCIDR\"N\n\014APIGroupList\022>\n\006groups\030"
  "\001 \003(\0132..k8s.io.apimachinery.pkg.apis.met"
  "a.v1.APIGroup\"\363\001\n\013APIResource\022\014\n\004name\030\001 "
  "\001(\014\022\024\n\014singularName\030\006 \001(\014\022\022\n\nnamespaced\030"
  "\002 \001(\010\022\r\n\005group\030\010 \001(\014\022\017\n\007version\030\t \001(\014\022\014\n"
  "\004kind\030\003 \001(\014\022:\n\005verbs\030\004 \001(\0132+.k8s.io.apim"
  "achinery.pkg.apis.meta.v1.Verbs\022\022\n\nshort"
  "Names\030\005 \003(\t\022\022\n\ncategories\030\007 \003(\t\022\032\n\022stora"
  "geVersionHash\030\n \001(\014\"m\n\017APIResourceList\022\024"
  "\n\014groupVersion\030\001 \001(\014\022D\n\tresources\030\002 \003(\0132"
  "1.k8s.io.apimachinery.pkg.apis.meta.v1.A"
  "PIResource\"\204\001\n\013APIVersions\022\020\n\010versions\030\001"
  " \003(\t\022c\n\032serverAddressByClientCIDRs\030\002 \003(\013"
  "2\?.k8s.io.apimachinery.pkg.apis.meta.v1."
  "ServerAddressByClientCIDR\"C\n\014ApplyOption"
  "s\022\016\n\006dryRun\030\001 \003(\t\022\r\n\005force\030\002 \001(\010\022\024\n\014fiel"
  "dManager\030\003 \001(\014\"\256\001\n\tCondition\022\014\n\004type\030\001 \001"
  "(\014\022\016\n\006status\030\002 \001(\014\022\032\n\022observedGeneration"
  "\030\003 \001(\003\022F\n\022lastTransitionTime\030\004 \001(\0132*.k8s"
  ".io.apimachinery.pkg.apis.meta.v1.Time\022\016"
  "\n\006reason\030\005 \001(\014\022\017\n\007message\030\006 \001(\014\"N\n\rCreat"
  "eOptions\022\016\n\006dryRun\030\001 \003(\t\022\024\n\014fieldManager"
  "\030\003 \001(\014\022\027\n\017fieldValidation\030\004 \001(\014\"\274\001\n\rDele"
  "teOptions\022\032\n\022gracePeriodSeconds\030\001 \001(\003\022J\n"
  "\rpreconditions\030\002 \001(\01323.k8s.io.apimachine"
  "ry.pkg.apis.meta.v1.Preconditions\022\030\n\020orp"
  "hanDependents\030\003 \001(\010\022\031\n\021propagationPolicy"
  "\030\004 \001(\014\022\016\n\006dryRun\030\005 \003(\t\"\034\n\010Duration\022\020\n\010du"
  "ration\030\001 \001(\003\"\027\n\010FieldsV1\022\013\n\003Raw\030\001 \001(\014\"%\n"
  "\nGetOptions\022\027\n\017resourceVersion\030\001 \001(\014\"(\n\t"
  "GroupKind\022\r\n\005group\030\001 \001(\014\022\014\n\004kind\030\002 \001(\014\"0"
  "\n\rGroupResource\022\r\n\005group\030\001 \001(\014\022\020\n\010resour"
  "ce\030\002 \001(\014\".\n\014GroupVersion\022\r\n\005group\030\001 \001(\014\022"
  "\017\n\007version\030\002 \001(\014\"A\n\030GroupVersionForDisco"
  "very\022\024\n\014groupVersion\030\001 \001(\014\022\017\n\007version\030\002 "
  "\001(\014\"@\n\020GroupVersionKind\022\r\n\005group\030\001 \001(\014\022\017"
  "\n\007version\030\002 \001(\014\022\014\n\004kind\030\003 \001(\014\"H\n\024GroupVe"
  "rsionResource\022\r\n\005group\030\001 \001(\014\022\017\n\007version\030"
  "\002 \001(\014\022\020\n\010resource\030\003 \001(\014\"\370\001\n\rLabelSelecto"
  "r\022Y\n\013matchLabels\030\001 \003(\0132D.k8s.io.apimachi"
  "nery.pkg.apis.meta.v1.LabelSelector.Matc"
  "hLabelsEntry\022X\n\020matchExpressions\030\002 \003(\0132>"
  ".k8s.io.apimachinery.pkg.apis.meta.v1.La"
  "belSelectorRequirement\0322\n\020MatchLabelsEnt"
  "ry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"I\n\030La"
  "belSelectorRequirement\022\013\n\003key\030\001 \001(\014\022\020\n\010o"
  "perator\030\002 \001(\014\022\016\n\006values\030\003 \003(\t\"\206\001\n\004List\022@"
  "\n\010metadata\030\001 \001(\0132..k8s.io.apimachinery.p"
  "kg.apis.meta.v1.ListMeta\022<\n\005items\030\002 \003(\0132"
  "-.k8s.io.apimachinery.pkg.runtime.RawExt"
  "ension\"c\n\010ListMeta\022\020\n\010selfLink\030\001 \001(\014\022\027\n\017"
  "resourceVersion\030\002 \001(\014\022\020\n\010continue\030\003 \001(\014\022"
  "\032\n\022remainingItemCount\030\004 \001(\003\"\362\001\n\013ListOpti"
  "ons\022\025\n\rlabelSelector\030\001 \001(\014\022\025\n\rfieldSelec"
  "tor\030\002 \001(\014\022\r\n\005watch\030\003 \001(\010\022\033\n\023allowWatchBo"
  "okmarks\030\t \001(\010\022\027\n\017resourceVersion\030\004 \001(\014\022\034"
  "\n\024resourceVersionMatch\030\n \001(\014\022\026\n\016timeoutS"
  "econds\030\005 \001(\003\022\r\n\005limit\030\007 \001(\003\022\020\n\010continue\030"
  "\010 \001(\014\022\031\n\021sendInitialEvents\030\013 \001(\010\"\361\001\n\022Man"
  "agedFieldsEntry\022\017\n\007manager\030\001 \001(\014\022\021\n\toper"
  "ation\030\002 \001(\014\022\022\n\napiVersion\030\003 \001(\014\0228\n\004time\030"
  "\004 \001(\0132*.k8s.io.apimachinery.pkg.apis.met"
  "a.v1.Time\022\022\n\nfieldsType\030\006 \001(\014\022@\n\010fieldsV"
  "1\030\007 \001(\0132..k8s.io.apimachinery.pkg.apis.m"
  "eta.v1.FieldsV1\022\023\n\013subresource\030\010 \001(\014\"+\n\t"
  "MicroTime\022\017\n\007seconds\030\001 \001(\003\022\r\n\005nanos\030\002 \001("
  "\005\"\376\005\n\nObjectMeta\022\014\n\004name\030\001 \001(\014\022\024\n\014genera"
  "teName\030\002 \001(\014\022\021\n\tnamespace\030\003 \001(\014\022\020\n\010selfL"
  "ink\030\004 \001(\014\022\013\n\003uid\030\005 \001(\014\022\027\n\017resourceVersio"
  "n\030\006 \001(\014\022\022\n\ngeneration\030\007 \001(\003\022E\n\021creationT"
  "imestamp\030\010 \001(\0132*.k8s.io.apimachinery.pkg"
  ".apis.meta.v1.Time\022E\n\021deletionTimestamp\030"
  "\t \001(\0132*.k8s.io.apimachinery.pkg.apis.met"
  "a.v1.Time\022\"\n\032deletionGracePeriodSeconds\030"
  "\n \001(\003\022L\n\006labels\030\013 \003(\0132<.k8s.io.apimachin"
  "ery.pkg.apis.meta.v1.ObjectMeta.LabelsEn"
  "try\022V\n\013annotations\030\014 \003(\0132A.k8s.io.apimac"
  "hinery.pkg.apis.meta.v1.ObjectMeta.Annot"
  "ationsEntry\022M\n\017ownerReferences\030\r \003(\01324.k"
  "8s.io.apimachinery.pkg.apis.meta.v1.Owne"
  "rReference\022\022\n\nfinalizers\030\016 \003(\t\022O\n\rmanage"
  "dFields\030\021 \003(\01328.k8s.io.apimachinery.pkg."
  "apis.meta.v1.ManagedFieldsEntry\032-\n\013Label"
  "sEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\0322"
  "\n\020AnnotationsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value"
  "\030\002 \001(\t:\0028\001\"}\n\016OwnerReference\022\022\n\napiVersi"
  "on\030\005 \001(\014\022\014\n\004kind\030\001 \001(\014\022\014\n\004name\030\003 \001(\014\022\013\n\003"
  "uid\030\004 \001(\014\022\022\n\ncontroller\030\006 \001(\010\022\032\n\022blockOw"
  "nerDeletion\030\007 \001(\010\"[\n\025PartialObjectMetada"
  "ta\022B\n\010metadata\030\001 \001(\01320.k8s.io.apimachine"
  "ry.pkg.apis.meta.v1.ObjectMeta\"\251\001\n\031Parti"
  "alObjectMetadataList\022@\n\010metadata\030\001 \001(\0132."
  ".k8s.io.apimachinery.pkg.apis.meta.v1.Li"
  "stMeta\022J\n\005items\030\002 \003(\0132;.k8s.io.apimachin"
  "ery.pkg.apis.meta.v1.PartialObjectMetada"
  "ta\"\007\n\005Patch\"\\\n\014PatchOptions\022\016\n\006dryRun\030\001 "
  "\003(\t\022\r\n\005force\030\002 \001(\010\022\024\n\014fieldManager\030\003 \001(\014"
  "\022\027\n\017fieldValidation\030\004 \001(\014\"5\n\rPreconditio"
  "ns\022\013\n\003uid\030\001 \001(\014\022\027\n\017resourceVersion\030\002 \001(\014"
  "\"\032\n\tRootPaths\022\r\n\005paths\030\001 \003(\t\"F\n\031ServerAd"
  "dressByClientCIDR\022\022\n\nclientCIDR\030\001 \001(\014\022\025\n"
  "\rserverAddress\030\002 \001(\014\"\317\001\n\006Status\022@\n\010metad"
  "ata\030\001 \001(\0132..k8s.io.apimachinery.pkg.apis"
  ".meta.v1.ListMeta\022\016\n\006status\030\002 \001(\014\022\017\n\007mes"
  "sage\030\003 \001(\014\022\016\n\006reason\030\004 \001(\014\022D\n\007details\030\005 "
  "\001(\01323.k8s.io.apimachinery.pkg.apis.meta."
  "v1.StatusDetails\022\014\n\004code\030\006 \001(\005\"=\n\013Status"
  "Cause\022\016\n\006reason\030\001 \001(\014\022\017\n\007message\030\002 \001(\014\022\r"
  "\n\005field\030\003 \001(\014\"\245\001\n\rStatusDetails\022\014\n\004name\030"
  "\001 \001(\014\022\r\n\005group\030\002 \001(\014\022\014\n\004kind\030\003 \001(\014\022\013\n\003ui"
  "d\030\006 \001(\014\022A\n\006causes\030\004 \003(\01321.k8s.io.apimach"
  "inery.pkg.apis.meta.v1.StatusCause\022\031\n\021re"
  "tryAfterSeconds\030\005 \001(\005\"%\n\014TableOptions\022\025\n"
  "\rincludeObject\030\001 \001(\014\"&\n\004Time\022\017\n\007seconds\030"
  "\001 \001(\003\022\r\n\005nanos\030\002 \001(\005\"+\n\tTimestamp\022\017\n\007sec"
  "onds\030\001 \001(\003\022\r\n\005nanos\030\002 \001(\005\",\n\010TypeMeta\022\014\n"
  "\004kind\030\001 \001(\014\022\022\n\napiVersion\030\002 \001(\014\"N\n\rUpdat"
  "eOptions\022\016\n\006dryRun\030\001 \003(\t\022\024\n\014fieldManager"
  "\030\002 \001(\014\022\027\n\017fieldValidation\030\003 \001(\014\"\026\n\005Verbs"
  "\022\r\n\005items\030\001 \003(\t\"Y\n\nWatchEvent\022\014\n\004type\030\001 "
  "\001(\014\022=\n\006object\030\002 \001(\0132-.k8s.io.apimachiner"
  "y.pkg.runtime.RawExtensionB&Z$k8s.io/api"
  "machinery/pkg/apis/meta/v1"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_deps[2] = {
  &::descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fruntime_5fgenerated_2eproto,
  &::descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fruntime_5fschema_5fgenerated_2eproto,
};
static ::_pbi::once_flag descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto = {
    false, false, 5426, descriptor_table_protodef_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto,
    "staging_src_k8s.io_apimachinery_pkg_apis_meta_v1_generated.proto",
    &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_once, descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_deps, 2, 47,
    schemas, file_default_instances, TableStruct_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto::offsets,
    file_level_metadata_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto, file_level_enum_descriptors_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto,
    file_level_service_descriptors_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_getter() {
  return &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto(&descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto);
namespace k8s {
namespace io {
namespace apimachinery {
namespace pkg {
namespace apis {
namespace meta {
namespace v1 {

// ===================================================================

class APIGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<APIGroup>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::k8s::io::apimachinery::pkg::apis::meta::v1::GroupVersionForDiscovery& preferredversion(const APIGroup* msg);
  static void set_has_preferredversion(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::k8s::io::apimachinery::pkg::apis::meta::v1::GroupVersionForDiscovery&
APIGroup::_Internal::preferredversion(const APIGroup* msg) {
  return *msg->_impl_.preferredversion_;
}
APIGroup::APIGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.APIGroup)
}
APIGroup::APIGroup(const APIGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  APIGroup* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.versions_){from._impl_.versions_}
    , decltype(_impl_.serveraddressbyclientcidrs_){from._impl_.serveraddressbyclientcidrs_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.preferredversion_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_preferredversion()) {
    _this->_impl_.preferredversion_ = new ::k8s::io::apimachinery::pkg::apis::meta::v1::GroupVersionForDiscovery(*from._impl_.preferredversion_);
  }
  // @@protoc_insertion_point(copy_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.APIGroup)
}

inline void APIGroup::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.versions_){arena}
    , decltype(_impl_.serveraddressbyclientcidrs_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.preferredversion_){nullptr}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

APIGroup::~APIGroup() {
  // @@protoc_insertion_point(destructor:k8s.io.apimachinery.pkg.apis.meta.v1.APIGroup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void APIGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.versions_.~RepeatedPtrField();
  _impl_.serveraddressbyclientcidrs_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.preferredversion_;
}

void APIGroup::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void APIGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:k8s.io.apimachinery.pkg.apis.meta.v1.APIGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.versions_.Clear();
  _impl_.serveraddressbyclientcidrs_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.preferredversion_ != nullptr);
      _impl_.preferredversion_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* APIGroup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery versions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_versions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery preferredVersion = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_preferredversion(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .k8s.io.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR serverAddressByClientCIDRs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_serveraddressbyclientcidrs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* APIGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:k8s.io.apimachinery.pkg.apis.meta.v1.APIGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery versions = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_versions_size()); i < n; i++) {
    const auto& repfield = this->_internal_versions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery preferredVersion = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::preferredversion(this),
        _Internal::preferredversion(this).GetCachedSize(), target, stream);
  }

  // repeated .k8s.io.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR serverAddressByClientCIDRs = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_serveraddressbyclientcidrs_size()); i < n; i++) {
    const auto& repfield = this->_internal_serveraddressbyclientcidrs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:k8s.io.apimachinery.pkg.apis.meta.v1.APIGroup)
  return target;
}

size_t APIGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:k8s.io.apimachinery.pkg.apis.meta.v1.APIGroup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery versions = 2;
  total_size += 1UL * this->_internal_versions_size();
  for (const auto& msg : this->_impl_.versions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .k8s.io.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR serverAddressByClientCIDRs = 4;
  total_size += 1UL * this->_internal_serveraddressbyclientcidrs_size();
  for (const auto& msg : this->_impl_.serveraddressbyclientcidrs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_name());
    }

    // optional .k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery preferredVersion = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.preferredversion_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData APIGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    APIGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*APIGroup::GetClassData() const { return &_class_data_; }


void APIGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<APIGroup*>(&to_msg);
  auto& from = static_cast<const APIGroup&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.APIGroup)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.versions_.MergeFrom(from._impl_.versions_);
  _this->_impl_.serveraddressbyclientcidrs_.MergeFrom(from._impl_.serveraddressbyclientcidrs_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_preferredversion()->::k8s::io::apimachinery::pkg::apis::meta::v1::GroupVersionForDiscovery::MergeFrom(
          from._internal_preferredversion());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void APIGroup::CopyFrom(const APIGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.APIGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool APIGroup::IsInitialized() const {
  return true;
}

void APIGroup::InternalSwap(APIGroup* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.versions_.InternalSwap(&other->_impl_.versions_);
  _impl_.serveraddressbyclientcidrs_.InternalSwap(&other->_impl_.serveraddressbyclientcidrs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.preferredversion_, other->_impl_.preferredversion_);
}

::PROTOBUF_NAMESPACE_ID::Metadata APIGroup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_getter, &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_once,
      file_level_metadata_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto[0]);
}

// ===================================================================

class APIGroupList::_Internal {
 public:
};

APIGroupList::APIGroupList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.APIGroupList)
}
APIGroupList::APIGroupList(const APIGroupList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  APIGroupList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.groups_){from._impl_.groups_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.APIGroupList)
}

inline void APIGroupList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.groups_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

APIGroupList::~APIGroupList() {
  // @@protoc_insertion_point(destructor:k8s.io.apimachinery.pkg.apis.meta.v1.APIGroupList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void APIGroupList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.groups_.~RepeatedPtrField();
}

void APIGroupList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void APIGroupList::Clear() {
// @@protoc_insertion_point(message_clear_start:k8s.io.apimachinery.pkg.apis.meta.v1.APIGroupList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.groups_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* APIGroupList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .k8s.io.apimachinery.pkg.apis.meta.v1.APIGroup groups = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_groups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* APIGroupList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:k8s.io.apimachinery.pkg.apis.meta.v1.APIGroupList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .k8s.io.apimachinery.pkg.apis.meta.v1.APIGroup groups = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_groups_size()); i < n; i++) {
    const auto& repfield = this->_internal_groups(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:k8s.io.apimachinery.pkg.apis.meta.v1.APIGroupList)
  return target;
}

size_t APIGroupList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:k8s.io.apimachinery.pkg.apis.meta.v1.APIGroupList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .k8s.io.apimachinery.pkg.apis.meta.v1.APIGroup groups = 1;
  total_size += 1UL * this->_internal_groups_size();
  for (const auto& msg : this->_impl_.groups_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData APIGroupList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    APIGroupList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*APIGroupList::GetClassData() const { return &_class_data_; }


void APIGroupList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<APIGroupList*>(&to_msg);
  auto& from = static_cast<const APIGroupList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.APIGroupList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.groups_.MergeFrom(from._impl_.groups_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void APIGroupList::CopyFrom(const APIGroupList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.APIGroupList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool APIGroupList::IsInitialized() const {
  return true;
}

void APIGroupList::InternalSwap(APIGroupList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.groups_.InternalSwap(&other->_impl_.groups_);
}

::PROTOBUF_NAMESPACE_ID::Metadata APIGroupList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_getter, &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_once,
      file_level_metadata_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto[1]);
}

// ===================================================================

class APIResource::_Internal {
 public:
  using HasBits = decltype(std::declval<APIResource>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_singularname(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_namespaced(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_group(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::k8s::io::apimachinery::pkg::apis::meta::v1::Verbs& verbs(const APIResource* msg);
  static void set_has_verbs(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_storageversionhash(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::k8s::io::apimachinery::pkg::apis::meta::v1::Verbs&
APIResource::_Internal::verbs(const APIResource* msg) {
  return *msg->_impl_.verbs_;
}
APIResource::APIResource(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.APIResource)
}
APIResource::APIResource(const APIResource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  APIResource* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.shortnames_){from._impl_.shortnames_}
    , decltype(_impl_.categories_){from._impl_.categories_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.kind_){}
    , decltype(_impl_.singularname_){}
    , decltype(_impl_.group_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.storageversionhash_){}
    , decltype(_impl_.verbs_){nullptr}
    , decltype(_impl_.namespaced_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.kind_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.kind_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_kind()) {
    _this->_impl_.kind_.Set(from._internal_kind(), 
      _this->GetArenaForAllocation());
  }
  _impl_.singularname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.singularname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_singularname()) {
    _this->_impl_.singularname_.Set(from._internal_singularname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.group_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.group_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_group()) {
    _this->_impl_.group_.Set(from._internal_group(), 
      _this->GetArenaForAllocation());
  }
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_version()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.storageversionhash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.storageversionhash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_storageversionhash()) {
    _this->_impl_.storageversionhash_.Set(from._internal_storageversionhash(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_verbs()) {
    _this->_impl_.verbs_ = new ::k8s::io::apimachinery::pkg::apis::meta::v1::Verbs(*from._impl_.verbs_);
  }
  _this->_impl_.namespaced_ = from._impl_.namespaced_;
  // @@protoc_insertion_point(copy_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.APIResource)
}

inline void APIResource::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.shortnames_){arena}
    , decltype(_impl_.categories_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.kind_){}
    , decltype(_impl_.singularname_){}
    , decltype(_impl_.group_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.storageversionhash_){}
    , decltype(_impl_.verbs_){nullptr}
    , decltype(_impl_.namespaced_){false}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.kind_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.kind_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.singularname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.singularname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.group_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.group_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.storageversionhash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.storageversionhash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

APIResource::~APIResource() {
  // @@protoc_insertion_point(destructor:k8s.io.apimachinery.pkg.apis.meta.v1.APIResource)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void APIResource::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.shortnames_.~RepeatedPtrField();
  _impl_.categories_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  _impl_.kind_.Destroy();
  _impl_.singularname_.Destroy();
  _impl_.group_.Destroy();
  _impl_.version_.Destroy();
  _impl_.storageversionhash_.Destroy();
  if (this != internal_default_instance()) delete _impl_.verbs_;
}

void APIResource::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void APIResource::Clear() {
// @@protoc_insertion_point(message_clear_start:k8s.io.apimachinery.pkg.apis.meta.v1.APIResource)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.shortnames_.Clear();
  _impl_.categories_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.kind_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.singularname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.group_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.storageversionhash_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.verbs_ != nullptr);
      _impl_.verbs_->Clear();
    }
  }
  _impl_.namespaced_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* APIResource::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool namespaced = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_namespaced(&has_bits);
          _impl_.namespaced_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes kind = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_kind();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .k8s.io.apimachinery.pkg.apis.meta.v1.Verbs verbs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_verbs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string shortNames = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_shortnames();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "k8s.io.apimachinery.pkg.apis.meta.v1.APIResource.shortNames");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bytes singularName = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_singularname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string categories = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_categories();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "k8s.io.apimachinery.pkg.apis.meta.v1.APIResource.categories");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bytes group = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_group();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes version = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes storageVersionHash = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_storageversionhash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* APIResource::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:k8s.io.apimachinery.pkg.apis.meta.v1.APIResource)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional bool namespaced = 2;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_namespaced(), target);
  }

  // optional bytes kind = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_kind(), target);
  }

  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.Verbs verbs = 4;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::verbs(this),
        _Internal::verbs(this).GetCachedSize(), target, stream);
  }

  // repeated string shortNames = 5;
  for (int i = 0, n = this->_internal_shortnames_size(); i < n; i++) {
    const auto& s = this->_internal_shortnames(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "k8s.io.apimachinery.pkg.apis.meta.v1.APIResource.shortNames");
    target = stream->WriteString(5, s, target);
  }

  // optional bytes singularName = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_singularname(), target);
  }

  // repeated string categories = 7;
  for (int i = 0, n = this->_internal_categories_size(); i < n; i++) {
    const auto& s = this->_internal_categories(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "k8s.io.apimachinery.pkg.apis.meta.v1.APIResource.categories");
    target = stream->WriteString(7, s, target);
  }

  // optional bytes group = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_group(), target);
  }

  // optional bytes version = 9;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_version(), target);
  }

  // optional bytes storageVersionHash = 10;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_storageversionhash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:k8s.io.apimachinery.pkg.apis.meta.v1.APIResource)
  return target;
}

size_t APIResource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:k8s.io.apimachinery.pkg.apis.meta.v1.APIResource)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string shortNames = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.shortnames_.size());
  for (int i = 0, n = _impl_.shortnames_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.shortnames_.Get(i));
  }

  // repeated string categories = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.categories_.size());
  for (int i = 0, n = _impl_.categories_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.categories_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_name());
    }

    // optional bytes kind = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_kind());
    }

    // optional bytes singularName = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_singularname());
    }

    // optional bytes group = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_group());
    }

    // optional bytes version = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_version());
    }

    // optional bytes storageVersionHash = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_storageversionhash());
    }

    // optional .k8s.io.apimachinery.pkg.apis.meta.v1.Verbs verbs = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.verbs_);
    }

    // optional bool namespaced = 2;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData APIResource::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    APIResource::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*APIResource::GetClassData() const { return &_class_data_; }


void APIResource::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<APIResource*>(&to_msg);
  auto& from = static_cast<const APIResource&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.APIResource)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.shortnames_.MergeFrom(from._impl_.shortnames_);
  _this->_impl_.categories_.MergeFrom(from._impl_.categories_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_kind(from._internal_kind());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_singularname(from._internal_singularname());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_group(from._internal_group());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_version(from._internal_version());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_storageversionhash(from._internal_storageversionhash());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_verbs()->::k8s::io::apimachinery::pkg::apis::meta::v1::Verbs::MergeFrom(
          from._internal_verbs());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.namespaced_ = from._impl_.namespaced_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void APIResource::CopyFrom(const APIResource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.APIResource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool APIResource::IsInitialized() const {
  return true;
}

void APIResource::InternalSwap(APIResource* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.shortnames_.InternalSwap(&other->_impl_.shortnames_);
  _impl_.categories_.InternalSwap(&other->_impl_.categories_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.kind_, lhs_arena,
      &other->_impl_.kind_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.singularname_, lhs_arena,
      &other->_impl_.singularname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.group_, lhs_arena,
      &other->_impl_.group_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.storageversionhash_, lhs_arena,
      &other->_impl_.storageversionhash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(APIResource, _impl_.namespaced_)
      + sizeof(APIResource::_impl_.namespaced_)
      - PROTOBUF_FIELD_OFFSET(APIResource, _impl_.verbs_)>(
          reinterpret_cast<char*>(&_impl_.verbs_),
          reinterpret_cast<char*>(&other->_impl_.verbs_));
}

::PROTOBUF_NAMESPACE_ID::Metadata APIResource::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_getter, &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_once,
      file_level_metadata_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto[2]);
}

// ===================================================================

class APIResourceList::_Internal {
 public:
  using HasBits = decltype(std::declval<APIResourceList>()._impl_._has_bits_);
  static void set_has_groupversion(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

APIResourceList::APIResourceList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.APIResourceList)
}
APIResourceList::APIResourceList(const APIResourceList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  APIResourceList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.resources_){from._impl_.resources_}
    , decltype(_impl_.groupversion_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.groupversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.groupversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_groupversion()) {
    _this->_impl_.groupversion_.Set(from._internal_groupversion(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.APIResourceList)
}

inline void APIResourceList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.resources_){arena}
    , decltype(_impl_.groupversion_){}
  };
  _impl_.groupversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.groupversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

APIResourceList::~APIResourceList() {
  // @@protoc_insertion_point(destructor:k8s.io.apimachinery.pkg.apis.meta.v1.APIResourceList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void APIResourceList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.resources_.~RepeatedPtrField();
  _impl_.groupversion_.Destroy();
}

void APIResourceList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void APIResourceList::Clear() {
// @@protoc_insertion_point(message_clear_start:k8s.io.apimachinery.pkg.apis.meta.v1.APIResourceList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.resources_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.groupversion_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* APIResourceList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes groupVersion = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_groupversion();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .k8s.io.apimachinery.pkg.apis.meta.v1.APIResource resources = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_resources(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* APIResourceList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:k8s.io.apimachinery.pkg.apis.meta.v1.APIResourceList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes groupVersion = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_groupversion(), target);
  }

  // repeated .k8s.io.apimachinery.pkg.apis.meta.v1.APIResource resources = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_resources_size()); i < n; i++) {
    const auto& repfield = this->_internal_resources(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:k8s.io.apimachinery.pkg.apis.meta.v1.APIResourceList)
  return target;
}

size_t APIResourceList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:k8s.io.apimachinery.pkg.apis.meta.v1.APIResourceList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .k8s.io.apimachinery.pkg.apis.meta.v1.APIResource resources = 2;
  total_size += 1UL * this->_internal_resources_size();
  for (const auto& msg : this->_impl_.resources_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bytes groupVersion = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_groupversion());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData APIResourceList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    APIResourceList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*APIResourceList::GetClassData() const { return &_class_data_; }


void APIResourceList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<APIResourceList*>(&to_msg);
  auto& from = static_cast<const APIResourceList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.APIResourceList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.resources_.MergeFrom(from._impl_.resources_);
  if (from._internal_has_groupversion()) {
    _this->_internal_set_groupversion(from._internal_groupversion());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void APIResourceList::CopyFrom(const APIResourceList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.APIResourceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool APIResourceList::IsInitialized() const {
  return true;
}

void APIResourceList::InternalSwap(APIResourceList* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.resources_.InternalSwap(&other->_impl_.resources_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.groupversion_, lhs_arena,
      &other->_impl_.groupversion_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata APIResourceList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_getter, &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_once,
      file_level_metadata_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto[3]);
}

// ===================================================================

class APIVersions::_Internal {
 public:
};

APIVersions::APIVersions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.APIVersions)
}
APIVersions::APIVersions(const APIVersions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  APIVersions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.versions_){from._impl_.versions_}
    , decltype(_impl_.serveraddressbyclientcidrs_){from._impl_.serveraddressbyclientcidrs_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.APIVersions)
}

inline void APIVersions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.versions_){arena}
    , decltype(_impl_.serveraddressbyclientcidrs_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

APIVersions::~APIVersions() {
  // @@protoc_insertion_point(destructor:k8s.io.apimachinery.pkg.apis.meta.v1.APIVersions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void APIVersions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.versions_.~RepeatedPtrField();
  _impl_.serveraddressbyclientcidrs_.~RepeatedPtrField();
}

void APIVersions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void APIVersions::Clear() {
// @@protoc_insertion_point(message_clear_start:k8s.io.apimachinery.pkg.apis.meta.v1.APIVersions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.versions_.Clear();
  _impl_.serveraddressbyclientcidrs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* APIVersions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string versions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_versions();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "k8s.io.apimachinery.pkg.apis.meta.v1.APIVersions.versions");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .k8s.io.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR serverAddressByClientCIDRs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_serveraddressbyclientcidrs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* APIVersions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:k8s.io.apimachinery.pkg.apis.meta.v1.APIVersions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string versions = 1;
  for (int i = 0, n = this->_internal_versions_size(); i < n; i++) {
    const auto& s = this->_internal_versions(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "k8s.io.apimachinery.pkg.apis.meta.v1.APIVersions.versions");
    target = stream->WriteString(1, s, target);
  }

  // repeated .k8s.io.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR serverAddressByClientCIDRs = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_serveraddressbyclientcidrs_size()); i < n; i++) {
    const auto& repfield = this->_internal_serveraddressbyclientcidrs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:k8s.io.apimachinery.pkg.apis.meta.v1.APIVersions)
  return target;
}

size_t APIVersions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:k8s.io.apimachinery.pkg.apis.meta.v1.APIVersions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string versions = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.versions_.size());
  for (int i = 0, n = _impl_.versions_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.versions_.Get(i));
  }

  // repeated .k8s.io.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR serverAddressByClientCIDRs = 2;
  total_size += 1UL * this->_internal_serveraddressbyclientcidrs_size();
  for (const auto& msg : this->_impl_.serveraddressbyclientcidrs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData APIVersions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    APIVersions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*APIVersions::GetClassData() const { return &_class_data_; }


void APIVersions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<APIVersions*>(&to_msg);
  auto& from = static_cast<const APIVersions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.APIVersions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.versions_.MergeFrom(from._impl_.versions_);
  _this->_impl_.serveraddressbyclientcidrs_.MergeFrom(from._impl_.serveraddressbyclientcidrs_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void APIVersions::CopyFrom(const APIVersions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.APIVersions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool APIVersions::IsInitialized() const {
  return true;
}

void APIVersions::InternalSwap(APIVersions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.versions_.InternalSwap(&other->_impl_.versions_);
  _impl_.serveraddressbyclientcidrs_.InternalSwap(&other->_impl_.serveraddressbyclientcidrs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata APIVersions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_getter, &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_once,
      file_level_metadata_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto[4]);
}

// ===================================================================

class ApplyOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<ApplyOptions>()._impl_._has_bits_);
  static void set_has_force(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_fieldmanager(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ApplyOptions::ApplyOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.ApplyOptions)
}
ApplyOptions::ApplyOptions(const ApplyOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ApplyOptions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dryrun_){from._impl_.dryrun_}
    , decltype(_impl_.fieldmanager_){}
    , decltype(_impl_.force_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.fieldmanager_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fieldmanager_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_fieldmanager()) {
    _this->_impl_.fieldmanager_.Set(from._internal_fieldmanager(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.force_ = from._impl_.force_;
  // @@protoc_insertion_point(copy_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.ApplyOptions)
}

inline void ApplyOptions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dryrun_){arena}
    , decltype(_impl_.fieldmanager_){}
    , decltype(_impl_.force_){false}
  };
  _impl_.fieldmanager_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fieldmanager_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ApplyOptions::~ApplyOptions() {
  // @@protoc_insertion_point(destructor:k8s.io.apimachinery.pkg.apis.meta.v1.ApplyOptions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ApplyOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dryrun_.~RepeatedPtrField();
  _impl_.fieldmanager_.Destroy();
}

void ApplyOptions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ApplyOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:k8s.io.apimachinery.pkg.apis.meta.v1.ApplyOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dryrun_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.fieldmanager_.ClearNonDefaultToEmpty();
  }
  _impl_.force_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ApplyOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string dryRun = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_dryrun();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "k8s.io.apimachinery.pkg.apis.meta.v1.ApplyOptions.dryRun");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool force = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_force(&has_bits);
          _impl_.force_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes fieldManager = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_fieldmanager();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ApplyOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:k8s.io.apimachinery.pkg.apis.meta.v1.ApplyOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string dryRun = 1;
  for (int i = 0, n = this->_internal_dryrun_size(); i < n; i++) {
    const auto& s = this->_internal_dryrun(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "k8s.io.apimachinery.pkg.apis.meta.v1.ApplyOptions.dryRun");
    target = stream->WriteString(1, s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool force = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_force(), target);
  }

  // optional bytes fieldManager = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_fieldmanager(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:k8s.io.apimachinery.pkg.apis.meta.v1.ApplyOptions)
  return target;
}

size_t ApplyOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:k8s.io.apimachinery.pkg.apis.meta.v1.ApplyOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string dryRun = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.dryrun_.size());
  for (int i = 0, n = _impl_.dryrun_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.dryrun_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes fieldManager = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_fieldmanager());
    }

    // optional bool force = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ApplyOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ApplyOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ApplyOptions::GetClassData() const { return &_class_data_; }


void ApplyOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ApplyOptions*>(&to_msg);
  auto& from = static_cast<const ApplyOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.ApplyOptions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.dryrun_.MergeFrom(from._impl_.dryrun_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_fieldmanager(from._internal_fieldmanager());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.force_ = from._impl_.force_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ApplyOptions::CopyFrom(const ApplyOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.ApplyOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyOptions::IsInitialized() const {
  return true;
}

void ApplyOptions::InternalSwap(ApplyOptions* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.dryrun_.InternalSwap(&other->_impl_.dryrun_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fieldmanager_, lhs_arena,
      &other->_impl_.fieldmanager_, rhs_arena
  );
  swap(_impl_.force_, other->_impl_.force_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ApplyOptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_getter, &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_once,
      file_level_metadata_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto[5]);
}

// ===================================================================

class Condition::_Internal {
 public:
  using HasBits = decltype(std::declval<Condition>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_observedgeneration(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::k8s::io::apimachinery::pkg::apis::meta::v1::Time& lasttransitiontime(const Condition* msg);
  static void set_has_lasttransitiontime(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::k8s::io::apimachinery::pkg::apis::meta::v1::Time&
Condition::_Internal::lasttransitiontime(const Condition* msg) {
  return *msg->_impl_.lasttransitiontime_;
}
Condition::Condition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.Condition)
}
Condition::Condition(const Condition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Condition* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_){}
    , decltype(_impl_.status_){}
    , decltype(_impl_.reason_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.lasttransitiontime_){nullptr}
    , decltype(_impl_.observedgeneration_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_type()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_status()) {
    _this->_impl_.status_.Set(from._internal_status(), 
      _this->GetArenaForAllocation());
  }
  _impl_.reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_reason()) {
    _this->_impl_.reason_.Set(from._internal_reason(), 
      _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_message()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_lasttransitiontime()) {
    _this->_impl_.lasttransitiontime_ = new ::k8s::io::apimachinery::pkg::apis::meta::v1::Time(*from._impl_.lasttransitiontime_);
  }
  _this->_impl_.observedgeneration_ = from._impl_.observedgeneration_;
  // @@protoc_insertion_point(copy_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.Condition)
}

inline void Condition::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_){}
    , decltype(_impl_.status_){}
    , decltype(_impl_.reason_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.lasttransitiontime_){nullptr}
    , decltype(_impl_.observedgeneration_){int64_t{0}}
  };
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Condition::~Condition() {
  // @@protoc_insertion_point(destructor:k8s.io.apimachinery.pkg.apis.meta.v1.Condition)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Condition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.type_.Destroy();
  _impl_.status_.Destroy();
  _impl_.reason_.Destroy();
  _impl_.message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.lasttransitiontime_;
}

void Condition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Condition::Clear() {
// @@protoc_insertion_point(message_clear_start:k8s.io.apimachinery.pkg.apis.meta.v1.Condition)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.status_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.reason_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.message_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.lasttransitiontime_ != nullptr);
      _impl_.lasttransitiontime_->Clear();
    }
  }
  _impl_.observedgeneration_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Condition::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_status();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 observedGeneration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_observedgeneration(&has_bits);
          _impl_.observedgeneration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_lasttransitiontime(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes reason = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_reason();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes message = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Condition::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:k8s.io.apimachinery.pkg.apis.meta.v1.Condition)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_type(), target);
  }

  // optional bytes status = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_status(), target);
  }

  // optional int64 observedGeneration = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_observedgeneration(), target);
  }

  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::lasttransitiontime(this),
        _Internal::lasttransitiontime(this).GetCachedSize(), target, stream);
  }

  // optional bytes reason = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_reason(), target);
  }

  // optional bytes message = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:k8s.io.apimachinery.pkg.apis.meta.v1.Condition)
  return target;
}

size_t Condition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:k8s.io.apimachinery.pkg.apis.meta.v1.Condition)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional bytes type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_type());
    }

    // optional bytes status = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_status());
    }

    // optional bytes reason = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_reason());
    }

    // optional bytes message = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_message());
    }

    // optional .k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.lasttransitiontime_);
    }

    // optional int64 observedGeneration = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_observedgeneration());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Condition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Condition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Condition::GetClassData() const { return &_class_data_; }


void Condition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Condition*>(&to_msg);
  auto& from = static_cast<const Condition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.Condition)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_type(from._internal_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_status(from._internal_status());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_reason(from._internal_reason());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_lasttransitiontime()->::k8s::io::apimachinery::pkg::apis::meta::v1::Time::MergeFrom(
          from._internal_lasttransitiontime());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.observedgeneration_ = from._impl_.observedgeneration_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Condition::CopyFrom(const Condition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.Condition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Condition::IsInitialized() const {
  return true;
}

void Condition::InternalSwap(Condition* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.status_, lhs_arena,
      &other->_impl_.status_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.reason_, lhs_arena,
      &other->_impl_.reason_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Condition, _impl_.observedgeneration_)
      + sizeof(Condition::_impl_.observedgeneration_)
      - PROTOBUF_FIELD_OFFSET(Condition, _impl_.lasttransitiontime_)>(
          reinterpret_cast<char*>(&_impl_.lasttransitiontime_),
          reinterpret_cast<char*>(&other->_impl_.lasttransitiontime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Condition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_getter, &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_once,
      file_level_metadata_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto[6]);
}

// ===================================================================

class CreateOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<CreateOptions>()._impl_._has_bits_);
  static void set_has_fieldmanager(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fieldvalidation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CreateOptions::CreateOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.CreateOptions)
}
CreateOptions::CreateOptions(const CreateOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateOptions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dryrun_){from._impl_.dryrun_}
    , decltype(_impl_.fieldmanager_){}
    , decltype(_impl_.fieldvalidation_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.fieldmanager_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fieldmanager_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_fieldmanager()) {
    _this->_impl_.fieldmanager_.Set(from._internal_fieldmanager(), 
      _this->GetArenaForAllocation());
  }
  _impl_.fieldvalidation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fieldvalidation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_fieldvalidation()) {
    _this->_impl_.fieldvalidation_.Set(from._internal_fieldvalidation(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.CreateOptions)
}

inline void CreateOptions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dryrun_){arena}
    , decltype(_impl_.fieldmanager_){}
    , decltype(_impl_.fieldvalidation_){}
  };
  _impl_.fieldmanager_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fieldmanager_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fieldvalidation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fieldvalidation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateOptions::~CreateOptions() {
  // @@protoc_insertion_point(destructor:k8s.io.apimachinery.pkg.apis.meta.v1.CreateOptions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dryrun_.~RepeatedPtrField();
  _impl_.fieldmanager_.Destroy();
  _impl_.fieldvalidation_.Destroy();
}

void CreateOptions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:k8s.io.apimachinery.pkg.apis.meta.v1.CreateOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dryrun_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.fieldmanager_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.fieldvalidation_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string dryRun = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_dryrun();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "k8s.io.apimachinery.pkg.apis.meta.v1.CreateOptions.dryRun");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bytes fieldManager = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_fieldmanager();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes fieldValidation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_fieldvalidation();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:k8s.io.apimachinery.pkg.apis.meta.v1.CreateOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string dryRun = 1;
  for (int i = 0, n = this->_internal_dryrun_size(); i < n; i++) {
    const auto& s = this->_internal_dryrun(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "k8s.io.apimachinery.pkg.apis.meta.v1.CreateOptions.dryRun");
    target = stream->WriteString(1, s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes fieldManager = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_fieldmanager(), target);
  }

  // optional bytes fieldValidation = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_fieldvalidation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:k8s.io.apimachinery.pkg.apis.meta.v1.CreateOptions)
  return target;
}

size_t CreateOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:k8s.io.apimachinery.pkg.apis.meta.v1.CreateOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string dryRun = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.dryrun_.size());
  for (int i = 0, n = _impl_.dryrun_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.dryrun_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes fieldManager = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_fieldmanager());
    }

    // optional bytes fieldValidation = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_fieldvalidation());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateOptions::GetClassData() const { return &_class_data_; }


void CreateOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateOptions*>(&to_msg);
  auto& from = static_cast<const CreateOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.CreateOptions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.dryrun_.MergeFrom(from._impl_.dryrun_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_fieldmanager(from._internal_fieldmanager());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_fieldvalidation(from._internal_fieldvalidation());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateOptions::CopyFrom(const CreateOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.CreateOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateOptions::IsInitialized() const {
  return true;
}

void CreateOptions::InternalSwap(CreateOptions* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.dryrun_.InternalSwap(&other->_impl_.dryrun_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fieldmanager_, lhs_arena,
      &other->_impl_.fieldmanager_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fieldvalidation_, lhs_arena,
      &other->_impl_.fieldvalidation_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateOptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_getter, &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_once,
      file_level_metadata_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto[7]);
}

// ===================================================================

class DeleteOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<DeleteOptions>()._impl_._has_bits_);
  static void set_has_graceperiodseconds(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::k8s::io::apimachinery::pkg::apis::meta::v1::Preconditions& preconditions(const DeleteOptions* msg);
  static void set_has_preconditions(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_orphandependents(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_propagationpolicy(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::k8s::io::apimachinery::pkg::apis::meta::v1::Preconditions&
DeleteOptions::_Internal::preconditions(const DeleteOptions* msg) {
  return *msg->_impl_.preconditions_;
}
DeleteOptions::DeleteOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.DeleteOptions)
}
DeleteOptions::DeleteOptions(const DeleteOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteOptions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dryrun_){from._impl_.dryrun_}
    , decltype(_impl_.propagationpolicy_){}
    , decltype(_impl_.preconditions_){nullptr}
    , decltype(_impl_.graceperiodseconds_){}
    , decltype(_impl_.orphandependents_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.propagationpolicy_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.propagationpolicy_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_propagationpolicy()) {
    _this->_impl_.propagationpolicy_.Set(from._internal_propagationpolicy(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_preconditions()) {
    _this->_impl_.preconditions_ = new ::k8s::io::apimachinery::pkg::apis::meta::v1::Preconditions(*from._impl_.preconditions_);
  }
  ::memcpy(&_impl_.graceperiodseconds_, &from._impl_.graceperiodseconds_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.orphandependents_) -
    reinterpret_cast<char*>(&_impl_.graceperiodseconds_)) + sizeof(_impl_.orphandependents_));
  // @@protoc_insertion_point(copy_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.DeleteOptions)
}

inline void DeleteOptions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dryrun_){arena}
    , decltype(_impl_.propagationpolicy_){}
    , decltype(_impl_.preconditions_){nullptr}
    , decltype(_impl_.graceperiodseconds_){int64_t{0}}
    , decltype(_impl_.orphandependents_){false}
  };
  _impl_.propagationpolicy_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.propagationpolicy_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeleteOptions::~DeleteOptions() {
  // @@protoc_insertion_point(destructor:k8s.io.apimachinery.pkg.apis.meta.v1.DeleteOptions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dryrun_.~RepeatedPtrField();
  _impl_.propagationpolicy_.Destroy();
  if (this != internal_default_instance()) delete _impl_.preconditions_;
}

void DeleteOptions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:k8s.io.apimachinery.pkg.apis.meta.v1.DeleteOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dryrun_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.propagationpolicy_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.preconditions_ != nullptr);
      _impl_.preconditions_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.graceperiodseconds_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.orphandependents_) -
        reinterpret_cast<char*>(&_impl_.graceperiodseconds_)) + sizeof(_impl_.orphandependents_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 gracePeriodSeconds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_graceperiodseconds(&has_bits);
          _impl_.graceperiodseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .k8s.io.apimachinery.pkg.apis.meta.v1.Preconditions preconditions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_preconditions(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool orphanDependents = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_orphandependents(&has_bits);
          _impl_.orphandependents_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes propagationPolicy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_propagationpolicy();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string dryRun = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_dryrun();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "k8s.io.apimachinery.pkg.apis.meta.v1.DeleteOptions.dryRun");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:k8s.io.apimachinery.pkg.apis.meta.v1.DeleteOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 gracePeriodSeconds = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_graceperiodseconds(), target);
  }

  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.Preconditions preconditions = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::preconditions(this),
        _Internal::preconditions(this).GetCachedSize(), target, stream);
  }

  // optional bool orphanDependents = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_orphandependents(), target);
  }

  // optional bytes propagationPolicy = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_propagationpolicy(), target);
  }

  // repeated string dryRun = 5;
  for (int i = 0, n = this->_internal_dryrun_size(); i < n; i++) {
    const auto& s = this->_internal_dryrun(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "k8s.io.apimachinery.pkg.apis.meta.v1.DeleteOptions.dryRun");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:k8s.io.apimachinery.pkg.apis.meta.v1.DeleteOptions)
  return target;
}

size_t DeleteOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:k8s.io.apimachinery.pkg.apis.meta.v1.DeleteOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string dryRun = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.dryrun_.size());
  for (int i = 0, n = _impl_.dryrun_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.dryrun_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes propagationPolicy = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_propagationpolicy());
    }

    // optional .k8s.io.apimachinery.pkg.apis.meta.v1.Preconditions preconditions = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.preconditions_);
    }

    // optional int64 gracePeriodSeconds = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_graceperiodseconds());
    }

    // optional bool orphanDependents = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteOptions::GetClassData() const { return &_class_data_; }


void DeleteOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteOptions*>(&to_msg);
  auto& from = static_cast<const DeleteOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.DeleteOptions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.dryrun_.MergeFrom(from._impl_.dryrun_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_propagationpolicy(from._internal_propagationpolicy());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_preconditions()->::k8s::io::apimachinery::pkg::apis::meta::v1::Preconditions::MergeFrom(
          from._internal_preconditions());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.graceperiodseconds_ = from._impl_.graceperiodseconds_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.orphandependents_ = from._impl_.orphandependents_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteOptions::CopyFrom(const DeleteOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.DeleteOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteOptions::IsInitialized() const {
  return true;
}

void DeleteOptions::InternalSwap(DeleteOptions* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.dryrun_.InternalSwap(&other->_impl_.dryrun_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.propagationpolicy_, lhs_arena,
      &other->_impl_.propagationpolicy_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeleteOptions, _impl_.orphandependents_)
      + sizeof(DeleteOptions::_impl_.orphandependents_)
      - PROTOBUF_FIELD_OFFSET(DeleteOptions, _impl_.preconditions_)>(
          reinterpret_cast<char*>(&_impl_.preconditions_),
          reinterpret_cast<char*>(&other->_impl_.preconditions_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteOptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_getter, &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_once,
      file_level_metadata_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto[8]);
}

// ===================================================================

class Duration::_Internal {
 public:
  using HasBits = decltype(std::declval<Duration>()._impl_._has_bits_);
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Duration::Duration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.Duration)
}
Duration::Duration(const Duration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Duration* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.duration_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.duration_ = from._impl_.duration_;
  // @@protoc_insertion_point(copy_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.Duration)
}

inline void Duration::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.duration_){int64_t{0}}
  };
}

Duration::~Duration() {
  // @@protoc_insertion_point(destructor:k8s.io.apimachinery.pkg.apis.meta.v1.Duration)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Duration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Duration::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Duration::Clear() {
// @@protoc_insertion_point(message_clear_start:k8s.io.apimachinery.pkg.apis.meta.v1.Duration)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.duration_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Duration::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 duration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_duration(&has_bits);
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Duration::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:k8s.io.apimachinery.pkg.apis.meta.v1.Duration)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 duration = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:k8s.io.apimachinery.pkg.apis.meta.v1.Duration)
  return target;
}

size_t Duration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:k8s.io.apimachinery.pkg.apis.meta.v1.Duration)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 duration = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_duration());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Duration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Duration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Duration::GetClassData() const { return &_class_data_; }


void Duration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Duration*>(&to_msg);
  auto& from = static_cast<const Duration&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.Duration)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_duration()) {
    _this->_internal_set_duration(from._internal_duration());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Duration::CopyFrom(const Duration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.Duration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Duration::IsInitialized() const {
  return true;
}

void Duration::InternalSwap(Duration* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.duration_, other->_impl_.duration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Duration::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_getter, &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_once,
      file_level_metadata_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto[9]);
}

// ===================================================================

class FieldsV1::_Internal {
 public:
  using HasBits = decltype(std::declval<FieldsV1>()._impl_._has_bits_);
  static void set_has_raw(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

FieldsV1::FieldsV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.FieldsV1)
}
FieldsV1::FieldsV1(const FieldsV1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FieldsV1* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.raw_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.raw_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.raw_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_raw()) {
    _this->_impl_.raw_.Set(from._internal_raw(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.FieldsV1)
}

inline void FieldsV1::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.raw_){}
  };
  _impl_.raw_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.raw_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FieldsV1::~FieldsV1() {
  // @@protoc_insertion_point(destructor:k8s.io.apimachinery.pkg.apis.meta.v1.FieldsV1)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FieldsV1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.raw_.Destroy();
}

void FieldsV1::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FieldsV1::Clear() {
// @@protoc_insertion_point(message_clear_start:k8s.io.apimachinery.pkg.apis.meta.v1.FieldsV1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.raw_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FieldsV1::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes Raw = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_raw();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FieldsV1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:k8s.io.apimachinery.pkg.apis.meta.v1.FieldsV1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes Raw = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_raw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:k8s.io.apimachinery.pkg.apis.meta.v1.FieldsV1)
  return target;
}

size_t FieldsV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:k8s.io.apimachinery.pkg.apis.meta.v1.FieldsV1)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes Raw = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_raw());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FieldsV1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FieldsV1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FieldsV1::GetClassData() const { return &_class_data_; }


void FieldsV1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FieldsV1*>(&to_msg);
  auto& from = static_cast<const FieldsV1&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.FieldsV1)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_raw()) {
    _this->_internal_set_raw(from._internal_raw());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FieldsV1::CopyFrom(const FieldsV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.FieldsV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldsV1::IsInitialized() const {
  return true;
}

void FieldsV1::InternalSwap(FieldsV1* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.raw_, lhs_arena,
      &other->_impl_.raw_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata FieldsV1::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_getter, &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_once,
      file_level_metadata_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto[10]);
}

// ===================================================================

class GetOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<GetOptions>()._impl_._has_bits_);
  static void set_has_resourceversion(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GetOptions::GetOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.GetOptions)
}
GetOptions::GetOptions(const GetOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetOptions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.resourceversion_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.resourceversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.resourceversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_resourceversion()) {
    _this->_impl_.resourceversion_.Set(from._internal_resourceversion(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.GetOptions)
}

inline void GetOptions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.resourceversion_){}
  };
  _impl_.resourceversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.resourceversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetOptions::~GetOptions() {
  // @@protoc_insertion_point(destructor:k8s.io.apimachinery.pkg.apis.meta.v1.GetOptions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.resourceversion_.Destroy();
}

void GetOptions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:k8s.io.apimachinery.pkg.apis.meta.v1.GetOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.resourceversion_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes resourceVersion = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_resourceversion();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:k8s.io.apimachinery.pkg.apis.meta.v1.GetOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes resourceVersion = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_resourceversion(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:k8s.io.apimachinery.pkg.apis.meta.v1.GetOptions)
  return target;
}

size_t GetOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:k8s.io.apimachinery.pkg.apis.meta.v1.GetOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes resourceVersion = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_resourceversion());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetOptions::GetClassData() const { return &_class_data_; }


void GetOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetOptions*>(&to_msg);
  auto& from = static_cast<const GetOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.GetOptions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_resourceversion()) {
    _this->_internal_set_resourceversion(from._internal_resourceversion());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetOptions::CopyFrom(const GetOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.GetOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOptions::IsInitialized() const {
  return true;
}

void GetOptions::InternalSwap(GetOptions* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.resourceversion_, lhs_arena,
      &other->_impl_.resourceversion_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetOptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_getter, &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_once,
      file_level_metadata_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto[11]);
}

// ===================================================================

class GroupKind::_Internal {
 public:
  using HasBits = decltype(std::declval<GroupKind>()._impl_._has_bits_);
  static void set_has_group(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

GroupKind::GroupKind(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.GroupKind)
}
GroupKind::GroupKind(const GroupKind& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GroupKind* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.group_){}
    , decltype(_impl_.kind_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.group_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.group_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_group()) {
    _this->_impl_.group_.Set(from._internal_group(), 
      _this->GetArenaForAllocation());
  }
  _impl_.kind_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.kind_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_kind()) {
    _this->_impl_.kind_.Set(from._internal_kind(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.GroupKind)
}

inline void GroupKind::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.group_){}
    , decltype(_impl_.kind_){}
  };
  _impl_.group_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.group_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.kind_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.kind_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GroupKind::~GroupKind() {
  // @@protoc_insertion_point(destructor:k8s.io.apimachinery.pkg.apis.meta.v1.GroupKind)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GroupKind::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.group_.Destroy();
  _impl_.kind_.Destroy();
}

void GroupKind::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GroupKind::Clear() {
// @@protoc_insertion_point(message_clear_start:k8s.io.apimachinery.pkg.apis.meta.v1.GroupKind)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.group_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.kind_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupKind::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes group = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_group();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes kind = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_kind();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GroupKind::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:k8s.io.apimachinery.pkg.apis.meta.v1.GroupKind)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes group = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_group(), target);
  }

  // optional bytes kind = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_kind(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:k8s.io.apimachinery.pkg.apis.meta.v1.GroupKind)
  return target;
}

size_t GroupKind::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:k8s.io.apimachinery.pkg.apis.meta.v1.GroupKind)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes group = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_group());
    }

    // optional bytes kind = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_kind());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GroupKind::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GroupKind::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GroupKind::GetClassData() const { return &_class_data_; }


void GroupKind::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GroupKind*>(&to_msg);
  auto& from = static_cast<const GroupKind&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.GroupKind)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_group(from._internal_group());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_kind(from._internal_kind());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GroupKind::CopyFrom(const GroupKind& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.GroupKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupKind::IsInitialized() const {
  return true;
}

void GroupKind::InternalSwap(GroupKind* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.group_, lhs_arena,
      &other->_impl_.group_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.kind_, lhs_arena,
      &other->_impl_.kind_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupKind::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_getter, &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_once,
      file_level_metadata_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto[12]);
}

// ===================================================================

class GroupResource::_Internal {
 public:
  using HasBits = decltype(std::declval<GroupResource>()._impl_._has_bits_);
  static void set_has_group(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_resource(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

GroupResource::GroupResource(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.GroupResource)
}
GroupResource::GroupResource(const GroupResource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GroupResource* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.group_){}
    , decltype(_impl_.resource_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.group_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.group_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_group()) {
    _this->_impl_.group_.Set(from._internal_group(), 
      _this->GetArenaForAllocation());
  }
  _impl_.resource_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.resource_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_resource()) {
    _this->_impl_.resource_.Set(from._internal_resource(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.GroupResource)
}

inline void GroupResource::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.group_){}
    , decltype(_impl_.resource_){}
  };
  _impl_.group_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.group_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.resource_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.resource_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GroupResource::~GroupResource() {
  // @@protoc_insertion_point(destructor:k8s.io.apimachinery.pkg.apis.meta.v1.GroupResource)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GroupResource::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.group_.Destroy();
  _impl_.resource_.Destroy();
}

void GroupResource::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GroupResource::Clear() {
// @@protoc_insertion_point(message_clear_start:k8s.io.apimachinery.pkg.apis.meta.v1.GroupResource)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.group_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.resource_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupResource::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes group = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_group();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes resource = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_resource();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GroupResource::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:k8s.io.apimachinery.pkg.apis.meta.v1.GroupResource)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes group = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_group(), target);
  }

  // optional bytes resource = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_resource(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:k8s.io.apimachinery.pkg.apis.meta.v1.GroupResource)
  return target;
}

size_t GroupResource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:k8s.io.apimachinery.pkg.apis.meta.v1.GroupResource)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes group = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_group());
    }

    // optional bytes resource = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_resource());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GroupResource::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GroupResource::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GroupResource::GetClassData() const { return &_class_data_; }


void GroupResource::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GroupResource*>(&to_msg);
  auto& from = static_cast<const GroupResource&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.GroupResource)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_group(from._internal_group());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_resource(from._internal_resource());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GroupResource::CopyFrom(const GroupResource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.GroupResource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupResource::IsInitialized() const {
  return true;
}

void GroupResource::InternalSwap(GroupResource* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.group_, lhs_arena,
      &other->_impl_.group_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.resource_, lhs_arena,
      &other->_impl_.resource_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupResource::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_getter, &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_once,
      file_level_metadata_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto[13]);
}

// ===================================================================

class GroupVersion::_Internal {
 public:
  using HasBits = decltype(std::declval<GroupVersion>()._impl_._has_bits_);
  static void set_has_group(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

GroupVersion::GroupVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersion)
}
GroupVersion::GroupVersion(const GroupVersion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GroupVersion* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.group_){}
    , decltype(_impl_.version_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.group_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.group_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_group()) {
    _this->_impl_.group_.Set(from._internal_group(), 
      _this->GetArenaForAllocation());
  }
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_version()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersion)
}

inline void GroupVersion::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.group_){}
    , decltype(_impl_.version_){}
  };
  _impl_.group_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.group_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GroupVersion::~GroupVersion() {
  // @@protoc_insertion_point(destructor:k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersion)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GroupVersion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.group_.Destroy();
  _impl_.version_.Destroy();
}

void GroupVersion::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GroupVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersion)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.group_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.version_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupVersion::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes group = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_group();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GroupVersion::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersion)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes group = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_group(), target);
  }

  // optional bytes version = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersion)
  return target;
}

size_t GroupVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersion)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes group = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_group());
    }

    // optional bytes version = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_version());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GroupVersion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GroupVersion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GroupVersion::GetClassData() const { return &_class_data_; }


void GroupVersion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GroupVersion*>(&to_msg);
  auto& from = static_cast<const GroupVersion&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersion)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_group(from._internal_group());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_version(from._internal_version());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GroupVersion::CopyFrom(const GroupVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupVersion::IsInitialized() const {
  return true;
}

void GroupVersion::InternalSwap(GroupVersion* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.group_, lhs_arena,
      &other->_impl_.group_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupVersion::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_getter, &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_once,
      file_level_metadata_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto[14]);
}

// ===================================================================

class GroupVersionForDiscovery::_Internal {
 public:
  using HasBits = decltype(std::declval<GroupVersionForDiscovery>()._impl_._has_bits_);
  static void set_has_groupversion(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

GroupVersionForDiscovery::GroupVersionForDiscovery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery)
}
GroupVersionForDiscovery::GroupVersionForDiscovery(const GroupVersionForDiscovery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GroupVersionForDiscovery* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.groupversion_){}
    , decltype(_impl_.version_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.groupversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.groupversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_groupversion()) {
    _this->_impl_.groupversion_.Set(from._internal_groupversion(), 
      _this->GetArenaForAllocation());
  }
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_version()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery)
}

inline void GroupVersionForDiscovery::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.groupversion_){}
    , decltype(_impl_.version_){}
  };
  _impl_.groupversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.groupversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GroupVersionForDiscovery::~GroupVersionForDiscovery() {
  // @@protoc_insertion_point(destructor:k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GroupVersionForDiscovery::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.groupversion_.Destroy();
  _impl_.version_.Destroy();
}

void GroupVersionForDiscovery::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GroupVersionForDiscovery::Clear() {
// @@protoc_insertion_point(message_clear_start:k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.groupversion_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.version_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupVersionForDiscovery::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes groupVersion = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_groupversion();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GroupVersionForDiscovery::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes groupVersion = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_groupversion(), target);
  }

  // optional bytes version = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery)
  return target;
}

size_t GroupVersionForDiscovery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes groupVersion = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_groupversion());
    }

    // optional bytes version = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_version());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GroupVersionForDiscovery::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GroupVersionForDiscovery::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GroupVersionForDiscovery::GetClassData() const { return &_class_data_; }


void GroupVersionForDiscovery::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GroupVersionForDiscovery*>(&to_msg);
  auto& from = static_cast<const GroupVersionForDiscovery&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_groupversion(from._internal_groupversion());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_version(from._internal_version());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GroupVersionForDiscovery::CopyFrom(const GroupVersionForDiscovery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupVersionForDiscovery::IsInitialized() const {
  return true;
}

void GroupVersionForDiscovery::InternalSwap(GroupVersionForDiscovery* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.groupversion_, lhs_arena,
      &other->_impl_.groupversion_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupVersionForDiscovery::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_getter, &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_once,
      file_level_metadata_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto[15]);
}

// ===================================================================

class GroupVersionKind::_Internal {
 public:
  using HasBits = decltype(std::declval<GroupVersionKind>()._impl_._has_bits_);
  static void set_has_group(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

GroupVersionKind::GroupVersionKind(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionKind)
}
GroupVersionKind::GroupVersionKind(const GroupVersionKind& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GroupVersionKind* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.group_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.kind_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.group_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.group_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_group()) {
    _this->_impl_.group_.Set(from._internal_group(), 
      _this->GetArenaForAllocation());
  }
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_version()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.kind_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.kind_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_kind()) {
    _this->_impl_.kind_.Set(from._internal_kind(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionKind)
}

inline void GroupVersionKind::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.group_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.kind_){}
  };
  _impl_.group_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.group_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.kind_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.kind_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GroupVersionKind::~GroupVersionKind() {
  // @@protoc_insertion_point(destructor:k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionKind)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GroupVersionKind::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.group_.Destroy();
  _impl_.version_.Destroy();
  _impl_.kind_.Destroy();
}

void GroupVersionKind::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GroupVersionKind::Clear() {
// @@protoc_insertion_point(message_clear_start:k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionKind)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.group_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.kind_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupVersionKind::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes group = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_group();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes kind = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_kind();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GroupVersionKind::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionKind)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes group = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_group(), target);
  }

  // optional bytes version = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_version(), target);
  }

  // optional bytes kind = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_kind(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionKind)
  return target;
}

size_t GroupVersionKind::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionKind)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes group = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_group());
    }

    // optional bytes version = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_version());
    }

    // optional bytes kind = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_kind());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GroupVersionKind::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GroupVersionKind::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GroupVersionKind::GetClassData() const { return &_class_data_; }


void GroupVersionKind::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GroupVersionKind*>(&to_msg);
  auto& from = static_cast<const GroupVersionKind&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionKind)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_group(from._internal_group());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_version(from._internal_version());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_kind(from._internal_kind());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GroupVersionKind::CopyFrom(const GroupVersionKind& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupVersionKind::IsInitialized() const {
  return true;
}

void GroupVersionKind::InternalSwap(GroupVersionKind* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.group_, lhs_arena,
      &other->_impl_.group_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.kind_, lhs_arena,
      &other->_impl_.kind_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupVersionKind::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_getter, &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_once,
      file_level_metadata_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto[16]);
}

// ===================================================================

class GroupVersionResource::_Internal {
 public:
  using HasBits = decltype(std::declval<GroupVersionResource>()._impl_._has_bits_);
  static void set_has_group(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_resource(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

GroupVersionResource::GroupVersionResource(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionResource)
}
GroupVersionResource::GroupVersionResource(const GroupVersionResource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GroupVersionResource* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.group_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.resource_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.group_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.group_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_group()) {
    _this->_impl_.group_.Set(from._internal_group(), 
      _this->GetArenaForAllocation());
  }
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_version()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.resource_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.resource_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_resource()) {
    _this->_impl_.resource_.Set(from._internal_resource(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionResource)
}

inline void GroupVersionResource::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.group_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.resource_){}
  };
  _impl_.group_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.group_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.resource_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.resource_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GroupVersionResource::~GroupVersionResource() {
  // @@protoc_insertion_point(destructor:k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionResource)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GroupVersionResource::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.group_.Destroy();
  _impl_.version_.Destroy();
  _impl_.resource_.Destroy();
}

void GroupVersionResource::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GroupVersionResource::Clear() {
// @@protoc_insertion_point(message_clear_start:k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionResource)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.group_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.resource_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupVersionResource::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes group = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_group();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes resource = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_resource();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GroupVersionResource::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionResource)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes group = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_group(), target);
  }

  // optional bytes version = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_version(), target);
  }

  // optional bytes resource = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_resource(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionResource)
  return target;
}

size_t GroupVersionResource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionResource)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes group = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_group());
    }

    // optional bytes version = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_version());
    }

    // optional bytes resource = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_resource());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GroupVersionResource::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GroupVersionResource::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GroupVersionResource::GetClassData() const { return &_class_data_; }


void GroupVersionResource::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GroupVersionResource*>(&to_msg);
  auto& from = static_cast<const GroupVersionResource&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionResource)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_group(from._internal_group());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_version(from._internal_version());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_resource(from._internal_resource());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GroupVersionResource::CopyFrom(const GroupVersionResource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionResource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupVersionResource::IsInitialized() const {
  return true;
}

void GroupVersionResource::InternalSwap(GroupVersionResource* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.group_, lhs_arena,
      &other->_impl_.group_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.resource_, lhs_arena,
      &other->_impl_.resource_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupVersionResource::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_getter, &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_once,
      file_level_metadata_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto[17]);
}

// ===================================================================

LabelSelector_MatchLabelsEntry_DoNotUse::LabelSelector_MatchLabelsEntry_DoNotUse() {}
LabelSelector_MatchLabelsEntry_DoNotUse::LabelSelector_MatchLabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void LabelSelector_MatchLabelsEntry_DoNotUse::MergeFrom(const LabelSelector_MatchLabelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata LabelSelector_MatchLabelsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_getter, &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_once,
      file_level_metadata_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto[18]);
}

// ===================================================================

class LabelSelector::_Internal {
 public:
};

LabelSelector::LabelSelector(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &LabelSelector::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector)
}
LabelSelector::LabelSelector(const LabelSelector& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LabelSelector* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.matchlabels_)*/{}
    , decltype(_impl_.matchexpressions_){from._impl_.matchexpressions_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.matchlabels_.MergeFrom(from._impl_.matchlabels_);
  // @@protoc_insertion_point(copy_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector)
}

inline void LabelSelector::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.matchlabels_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.matchexpressions_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LabelSelector::~LabelSelector() {
  // @@protoc_insertion_point(destructor:k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void LabelSelector::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.matchlabels_.Destruct();
  _impl_.matchlabels_.~MapField();
  _impl_.matchexpressions_.~RepeatedPtrField();
}

void LabelSelector::ArenaDtor(void* object) {
  LabelSelector* _this = reinterpret_cast< LabelSelector* >(object);
  _this->_impl_.matchlabels_.Destruct();
}
void LabelSelector::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LabelSelector::Clear() {
// @@protoc_insertion_point(message_clear_start:k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.matchlabels_.Clear();
  _impl_.matchexpressions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LabelSelector::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, string> matchLabels = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.matchlabels_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement matchExpressions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_matchexpressions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LabelSelector::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> matchLabels = 1;
  if (!this->_internal_matchlabels().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = LabelSelector_MatchLabelsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_matchlabels();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector.MatchLabelsEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector.MatchLabelsEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // repeated .k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement matchExpressions = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_matchexpressions_size()); i < n; i++) {
    const auto& repfield = this->_internal_matchexpressions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector)
  return target;
}

size_t LabelSelector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> matchLabels = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_matchlabels_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_matchlabels().begin();
      it != this->_internal_matchlabels().end(); ++it) {
    total_size += LabelSelector_MatchLabelsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement matchExpressions = 2;
  total_size += 1UL * this->_internal_matchexpressions_size();
  for (const auto& msg : this->_impl_.matchexpressions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LabelSelector::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LabelSelector::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LabelSelector::GetClassData() const { return &_class_data_; }


void LabelSelector::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LabelSelector*>(&to_msg);
  auto& from = static_cast<const LabelSelector&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.matchlabels_.MergeFrom(from._impl_.matchlabels_);
  _this->_impl_.matchexpressions_.MergeFrom(from._impl_.matchexpressions_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LabelSelector::CopyFrom(const LabelSelector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelSelector::IsInitialized() const {
  return true;
}

void LabelSelector::InternalSwap(LabelSelector* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.matchlabels_.InternalSwap(&other->_impl_.matchlabels_);
  _impl_.matchexpressions_.InternalSwap(&other->_impl_.matchexpressions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LabelSelector::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_getter, &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_once,
      file_level_metadata_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto[19]);
}

// ===================================================================

class LabelSelectorRequirement::_Internal {
 public:
  using HasBits = decltype(std::declval<LabelSelectorRequirement>()._impl_._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_operator_(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

LabelSelectorRequirement::LabelSelectorRequirement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement)
}
LabelSelectorRequirement::LabelSelectorRequirement(const LabelSelectorRequirement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LabelSelectorRequirement* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.values_){from._impl_.values_}
    , decltype(_impl_.key_){}
    , decltype(_impl_.operator__){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_key()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.operator__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.operator__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_operator_()) {
    _this->_impl_.operator__.Set(from._internal_operator_(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement)
}

inline void LabelSelectorRequirement::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.values_){arena}
    , decltype(_impl_.key_){}
    , decltype(_impl_.operator__){}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.operator__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.operator__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LabelSelectorRequirement::~LabelSelectorRequirement() {
  // @@protoc_insertion_point(destructor:k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LabelSelectorRequirement::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.values_.~RepeatedPtrField();
  _impl_.key_.Destroy();
  _impl_.operator__.Destroy();
}

void LabelSelectorRequirement::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LabelSelectorRequirement::Clear() {
// @@protoc_insertion_point(message_clear_start:k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.values_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.operator__.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LabelSelectorRequirement::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes operator = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_operator_();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string values = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_values();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement.values");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LabelSelectorRequirement::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes key = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_key(), target);
  }

  // optional bytes operator = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_operator_(), target);
  }

  // repeated string values = 3;
  for (int i = 0, n = this->_internal_values_size(); i < n; i++) {
    const auto& s = this->_internal_values(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement.values");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement)
  return target;
}

size_t LabelSelectorRequirement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string values = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.values_.size());
  for (int i = 0, n = _impl_.values_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.values_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_key());
    }

    // optional bytes operator = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_operator_());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LabelSelectorRequirement::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LabelSelectorRequirement::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LabelSelectorRequirement::GetClassData() const { return &_class_data_; }


void LabelSelectorRequirement::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LabelSelectorRequirement*>(&to_msg);
  auto& from = static_cast<const LabelSelectorRequirement&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_operator_(from._internal_operator_());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LabelSelectorRequirement::CopyFrom(const LabelSelectorRequirement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelSelectorRequirement::IsInitialized() const {
  return true;
}

void LabelSelectorRequirement::InternalSwap(LabelSelectorRequirement* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.operator__, lhs_arena,
      &other->_impl_.operator__, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata LabelSelectorRequirement::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_getter, &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_once,
      file_level_metadata_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto[20]);
}

// ===================================================================

class List::_Internal {
 public:
  using HasBits = decltype(std::declval<List>()._impl_._has_bits_);
  static const ::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta& metadata(const List* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta&
List::_Internal::metadata(const List* msg) {
  return *msg->_impl_.metadata_;
}
void List::clear_items() {
  _impl_.items_.Clear();
}
List::List(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.List)
}
List::List(const List& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  List* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.metadata_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    _this->_impl_.metadata_ = new ::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta(*from._impl_.metadata_);
  }
  // @@protoc_insertion_point(copy_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.List)
}

inline void List::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.items_){arena}
    , decltype(_impl_.metadata_){nullptr}
  };
}

List::~List() {
  // @@protoc_insertion_point(destructor:k8s.io.apimachinery.pkg.apis.meta.v1.List)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void List::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.metadata_;
}

void List::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void List::Clear() {
// @@protoc_insertion_point(message_clear_start:k8s.io.apimachinery.pkg.apis.meta.v1.List)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.metadata_ != nullptr);
    _impl_.metadata_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* List::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .k8s.io.apimachinery.pkg.runtime.RawExtension items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* List::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:k8s.io.apimachinery.pkg.apis.meta.v1.List)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::metadata(this),
        _Internal::metadata(this).GetCachedSize(), target, stream);
  }

  // repeated .k8s.io.apimachinery.pkg.runtime.RawExtension items = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:k8s.io.apimachinery.pkg.apis.meta.v1.List)
  return target;
}

size_t List::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:k8s.io.apimachinery.pkg.apis.meta.v1.List)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .k8s.io.apimachinery.pkg.runtime.RawExtension items = 2;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.metadata_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData List::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    List::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*List::GetClassData() const { return &_class_data_; }


void List::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<List*>(&to_msg);
  auto& from = static_cast<const List&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.List)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (from._internal_has_metadata()) {
    _this->_internal_mutable_metadata()->::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta::MergeFrom(
        from._internal_metadata());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void List::CopyFrom(const List& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.List)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool List::IsInitialized() const {
  return true;
}

void List::InternalSwap(List* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  swap(_impl_.metadata_, other->_impl_.metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata List::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_getter, &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_once,
      file_level_metadata_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto[21]);
}

// ===================================================================

class ListMeta::_Internal {
 public:
  using HasBits = decltype(std::declval<ListMeta>()._impl_._has_bits_);
  static void set_has_selflink(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_resourceversion(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_continue_(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_remainingitemcount(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

ListMeta::ListMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta)
}
ListMeta::ListMeta(const ListMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListMeta* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.selflink_){}
    , decltype(_impl_.resourceversion_){}
    , decltype(_impl_.continue__){}
    , decltype(_impl_.remainingitemcount_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.selflink_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.selflink_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_selflink()) {
    _this->_impl_.selflink_.Set(from._internal_selflink(), 
      _this->GetArenaForAllocation());
  }
  _impl_.resourceversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.resourceversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_resourceversion()) {
    _this->_impl_.resourceversion_.Set(from._internal_resourceversion(), 
      _this->GetArenaForAllocation());
  }
  _impl_.continue__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.continue__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_continue_()) {
    _this->_impl_.continue__.Set(from._internal_continue_(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.remainingitemcount_ = from._impl_.remainingitemcount_;
  // @@protoc_insertion_point(copy_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta)
}

inline void ListMeta::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.selflink_){}
    , decltype(_impl_.resourceversion_){}
    , decltype(_impl_.continue__){}
    , decltype(_impl_.remainingitemcount_){int64_t{0}}
  };
  _impl_.selflink_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.selflink_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.resourceversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.resourceversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.continue__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.continue__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListMeta::~ListMeta() {
  // @@protoc_insertion_point(destructor:k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListMeta::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.selflink_.Destroy();
  _impl_.resourceversion_.Destroy();
  _impl_.continue__.Destroy();
}

void ListMeta::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.selflink_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.resourceversion_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.continue__.ClearNonDefaultToEmpty();
    }
  }
  _impl_.remainingitemcount_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListMeta::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes selfLink = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_selflink();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes resourceVersion = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_resourceversion();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes continue = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_continue_();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 remainingItemCount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_remainingitemcount(&has_bits);
          _impl_.remainingitemcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListMeta::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes selfLink = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_selflink(), target);
  }

  // optional bytes resourceVersion = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_resourceversion(), target);
  }

  // optional bytes continue = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_continue_(), target);
  }

  // optional int64 remainingItemCount = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_remainingitemcount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta)
  return target;
}

size_t ListMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes selfLink = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_selflink());
    }

    // optional bytes resourceVersion = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_resourceversion());
    }

    // optional bytes continue = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_continue_());
    }

    // optional int64 remainingItemCount = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_remainingitemcount());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListMeta::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListMeta::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListMeta::GetClassData() const { return &_class_data_; }


void ListMeta::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListMeta*>(&to_msg);
  auto& from = static_cast<const ListMeta&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_selflink(from._internal_selflink());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_resourceversion(from._internal_resourceversion());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_continue_(from._internal_continue_());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.remainingitemcount_ = from._impl_.remainingitemcount_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListMeta::CopyFrom(const ListMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListMeta::IsInitialized() const {
  return true;
}

void ListMeta::InternalSwap(ListMeta* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.selflink_, lhs_arena,
      &other->_impl_.selflink_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.resourceversion_, lhs_arena,
      &other->_impl_.resourceversion_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.continue__, lhs_arena,
      &other->_impl_.continue__, rhs_arena
  );
  swap(_impl_.remainingitemcount_, other->_impl_.remainingitemcount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListMeta::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_getter, &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_once,
      file_level_metadata_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto[22]);
}

// ===================================================================

class ListOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<ListOptions>()._impl_._has_bits_);
  static void set_has_labelselector(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fieldselector(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_watch(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_allowwatchbookmarks(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_resourceversion(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_resourceversionmatch(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_timeoutseconds(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_continue_(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_sendinitialevents(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

ListOptions::ListOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.ListOptions)
}
ListOptions::ListOptions(const ListOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListOptions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.labelselector_){}
    , decltype(_impl_.fieldselector_){}
    , decltype(_impl_.resourceversion_){}
    , decltype(_impl_.continue__){}
    , decltype(_impl_.resourceversionmatch_){}
    , decltype(_impl_.timeoutseconds_){}
    , decltype(_impl_.limit_){}
    , decltype(_impl_.watch_){}
    , decltype(_impl_.allowwatchbookmarks_){}
    , decltype(_impl_.sendinitialevents_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.labelselector_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.labelselector_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_labelselector()) {
    _this->_impl_.labelselector_.Set(from._internal_labelselector(), 
      _this->GetArenaForAllocation());
  }
  _impl_.fieldselector_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fieldselector_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_fieldselector()) {
    _this->_impl_.fieldselector_.Set(from._internal_fieldselector(), 
      _this->GetArenaForAllocation());
  }
  _impl_.resourceversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.resourceversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_resourceversion()) {
    _this->_impl_.resourceversion_.Set(from._internal_resourceversion(), 
      _this->GetArenaForAllocation());
  }
  _impl_.continue__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.continue__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_continue_()) {
    _this->_impl_.continue__.Set(from._internal_continue_(), 
      _this->GetArenaForAllocation());
  }
  _impl_.resourceversionmatch_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.resourceversionmatch_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_resourceversionmatch()) {
    _this->_impl_.resourceversionmatch_.Set(from._internal_resourceversionmatch(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.timeoutseconds_, &from._impl_.timeoutseconds_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.sendinitialevents_) -
    reinterpret_cast<char*>(&_impl_.timeoutseconds_)) + sizeof(_impl_.sendinitialevents_));
  // @@protoc_insertion_point(copy_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.ListOptions)
}

inline void ListOptions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.labelselector_){}
    , decltype(_impl_.fieldselector_){}
    , decltype(_impl_.resourceversion_){}
    , decltype(_impl_.continue__){}
    , decltype(_impl_.resourceversionmatch_){}
    , decltype(_impl_.timeoutseconds_){int64_t{0}}
    , decltype(_impl_.limit_){int64_t{0}}
    , decltype(_impl_.watch_){false}
    , decltype(_impl_.allowwatchbookmarks_){false}
    , decltype(_impl_.sendinitialevents_){false}
  };
  _impl_.labelselector_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.labelselector_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fieldselector_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fieldselector_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.resourceversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.resourceversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.continue__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.continue__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.resourceversionmatch_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.resourceversionmatch_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListOptions::~ListOptions() {
  // @@protoc_insertion_point(destructor:k8s.io.apimachinery.pkg.apis.meta.v1.ListOptions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.labelselector_.Destroy();
  _impl_.fieldselector_.Destroy();
  _impl_.resourceversion_.Destroy();
  _impl_.continue__.Destroy();
  _impl_.resourceversionmatch_.Destroy();
}

void ListOptions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:k8s.io.apimachinery.pkg.apis.meta.v1.ListOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.labelselector_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.fieldselector_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.resourceversion_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.continue__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.resourceversionmatch_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&_impl_.timeoutseconds_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.watch_) -
        reinterpret_cast<char*>(&_impl_.timeoutseconds_)) + sizeof(_impl_.watch_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.allowwatchbookmarks_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.sendinitialevents_) -
        reinterpret_cast<char*>(&_impl_.allowwatchbookmarks_)) + sizeof(_impl_.sendinitialevents_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes labelSelector = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_labelselector();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes fieldSelector = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_fieldselector();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool watch = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_watch(&has_bits);
          _impl_.watch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes resourceVersion = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_resourceversion();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 timeoutSeconds = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_timeoutseconds(&has_bits);
          _impl_.timeoutseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 limit = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_limit(&has_bits);
          _impl_.limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes continue = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_continue_();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool allowWatchBookmarks = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_allowwatchbookmarks(&has_bits);
          _impl_.allowwatchbookmarks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes resourceVersionMatch = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_resourceversionmatch();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool sendInitialEvents = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_sendinitialevents(&has_bits);
          _impl_.sendinitialevents_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:k8s.io.apimachinery.pkg.apis.meta.v1.ListOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes labelSelector = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_labelselector(), target);
  }

  // optional bytes fieldSelector = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_fieldselector(), target);
  }

  // optional bool watch = 3;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_watch(), target);
  }

  // optional bytes resourceVersion = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_resourceversion(), target);
  }

  // optional int64 timeoutSeconds = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_timeoutseconds(), target);
  }

  // optional int64 limit = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_limit(), target);
  }

  // optional bytes continue = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_continue_(), target);
  }

  // optional bool allowWatchBookmarks = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_allowwatchbookmarks(), target);
  }

  // optional bytes resourceVersionMatch = 10;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_resourceversionmatch(), target);
  }

  // optional bool sendInitialEvents = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_sendinitialevents(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:k8s.io.apimachinery.pkg.apis.meta.v1.ListOptions)
  return target;
}

size_t ListOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:k8s.io.apimachinery.pkg.apis.meta.v1.ListOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes labelSelector = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_labelselector());
    }

    // optional bytes fieldSelector = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_fieldselector());
    }

    // optional bytes resourceVersion = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_resourceversion());
    }

    // optional bytes continue = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_continue_());
    }

    // optional bytes resourceVersionMatch = 10;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_resourceversionmatch());
    }

    // optional int64 timeoutSeconds = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timeoutseconds());
    }

    // optional int64 limit = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_limit());
    }

    // optional bool watch = 3;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional bool allowWatchBookmarks = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool sendInitialEvents = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListOptions::GetClassData() const { return &_class_data_; }


void ListOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListOptions*>(&to_msg);
  auto& from = static_cast<const ListOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.ListOptions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_labelselector(from._internal_labelselector());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_fieldselector(from._internal_fieldselector());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_resourceversion(from._internal_resourceversion());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_continue_(from._internal_continue_());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_resourceversionmatch(from._internal_resourceversionmatch());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.timeoutseconds_ = from._impl_.timeoutseconds_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.limit_ = from._impl_.limit_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.watch_ = from._impl_.watch_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.allowwatchbookmarks_ = from._impl_.allowwatchbookmarks_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.sendinitialevents_ = from._impl_.sendinitialevents_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListOptions::CopyFrom(const ListOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.ListOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListOptions::IsInitialized() const {
  return true;
}

void ListOptions::InternalSwap(ListOptions* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.labelselector_, lhs_arena,
      &other->_impl_.labelselector_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fieldselector_, lhs_arena,
      &other->_impl_.fieldselector_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.resourceversion_, lhs_arena,
      &other->_impl_.resourceversion_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.continue__, lhs_arena,
      &other->_impl_.continue__, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.resourceversionmatch_, lhs_arena,
      &other->_impl_.resourceversionmatch_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListOptions, _impl_.sendinitialevents_)
      + sizeof(ListOptions::_impl_.sendinitialevents_)
      - PROTOBUF_FIELD_OFFSET(ListOptions, _impl_.timeoutseconds_)>(
          reinterpret_cast<char*>(&_impl_.timeoutseconds_),
          reinterpret_cast<char*>(&other->_impl_.timeoutseconds_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListOptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_getter, &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_once,
      file_level_metadata_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto[23]);
}

// ===================================================================

class ManagedFieldsEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<ManagedFieldsEntry>()._impl_._has_bits_);
  static void set_has_manager(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_operation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_apiversion(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::k8s::io::apimachinery::pkg::apis::meta::v1::Time& time(const ManagedFieldsEntry* msg);
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_fieldstype(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::k8s::io::apimachinery::pkg::apis::meta::v1::FieldsV1& fieldsv1(const ManagedFieldsEntry* msg);
  static void set_has_fieldsv1(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_subresource(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::k8s::io::apimachinery::pkg::apis::meta::v1::Time&
ManagedFieldsEntry::_Internal::time(const ManagedFieldsEntry* msg) {
  return *msg->_impl_.time_;
}
const ::k8s::io::apimachinery::pkg::apis::meta::v1::FieldsV1&
ManagedFieldsEntry::_Internal::fieldsv1(const ManagedFieldsEntry* msg) {
  return *msg->_impl_.fieldsv1_;
}
ManagedFieldsEntry::ManagedFieldsEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry)
}
ManagedFieldsEntry::ManagedFieldsEntry(const ManagedFieldsEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ManagedFieldsEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.manager_){}
    , decltype(_impl_.operation_){}
    , decltype(_impl_.apiversion_){}
    , decltype(_impl_.fieldstype_){}
    , decltype(_impl_.subresource_){}
    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.fieldsv1_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.manager_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.manager_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_manager()) {
    _this->_impl_.manager_.Set(from._internal_manager(), 
      _this->GetArenaForAllocation());
  }
  _impl_.operation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.operation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_operation()) {
    _this->_impl_.operation_.Set(from._internal_operation(), 
      _this->GetArenaForAllocation());
  }
  _impl_.apiversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.apiversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_apiversion()) {
    _this->_impl_.apiversion_.Set(from._internal_apiversion(), 
      _this->GetArenaForAllocation());
  }
  _impl_.fieldstype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fieldstype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_fieldstype()) {
    _this->_impl_.fieldstype_.Set(from._internal_fieldstype(), 
      _this->GetArenaForAllocation());
  }
  _impl_.subresource_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subresource_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_subresource()) {
    _this->_impl_.subresource_.Set(from._internal_subresource(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_time()) {
    _this->_impl_.time_ = new ::k8s::io::apimachinery::pkg::apis::meta::v1::Time(*from._impl_.time_);
  }
  if (from._internal_has_fieldsv1()) {
    _this->_impl_.fieldsv1_ = new ::k8s::io::apimachinery::pkg::apis::meta::v1::FieldsV1(*from._impl_.fieldsv1_);
  }
  // @@protoc_insertion_point(copy_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry)
}

inline void ManagedFieldsEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.manager_){}
    , decltype(_impl_.operation_){}
    , decltype(_impl_.apiversion_){}
    , decltype(_impl_.fieldstype_){}
    , decltype(_impl_.subresource_){}
    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.fieldsv1_){nullptr}
  };
  _impl_.manager_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.manager_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.operation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.operation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.apiversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.apiversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fieldstype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fieldstype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.subresource_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subresource_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ManagedFieldsEntry::~ManagedFieldsEntry() {
  // @@protoc_insertion_point(destructor:k8s.io.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ManagedFieldsEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.manager_.Destroy();
  _impl_.operation_.Destroy();
  _impl_.apiversion_.Destroy();
  _impl_.fieldstype_.Destroy();
  _impl_.subresource_.Destroy();
  if (this != internal_default_instance()) delete _impl_.time_;
  if (this != internal_default_instance()) delete _impl_.fieldsv1_;
}

void ManagedFieldsEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ManagedFieldsEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:k8s.io.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.manager_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.operation_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.apiversion_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.fieldstype_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.subresource_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.time_ != nullptr);
      _impl_.time_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.fieldsv1_ != nullptr);
      _impl_.fieldsv1_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ManagedFieldsEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes manager = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_manager();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes operation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_operation();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes apiVersion = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_apiversion();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .k8s.io.apimachinery.pkg.apis.meta.v1.Time time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes fieldsType = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_fieldstype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .k8s.io.apimachinery.pkg.apis.meta.v1.FieldsV1 fieldsV1 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_fieldsv1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes subresource = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_subresource();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ManagedFieldsEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:k8s.io.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes manager = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_manager(), target);
  }

  // optional bytes operation = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_operation(), target);
  }

  // optional bytes apiVersion = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_apiversion(), target);
  }

  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.Time time = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::time(this),
        _Internal::time(this).GetCachedSize(), target, stream);
  }

  // optional bytes fieldsType = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_fieldstype(), target);
  }

  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.FieldsV1 fieldsV1 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::fieldsv1(this),
        _Internal::fieldsv1(this).GetCachedSize(), target, stream);
  }

  // optional bytes subresource = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_subresource(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:k8s.io.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry)
  return target;
}

size_t ManagedFieldsEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:k8s.io.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional bytes manager = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_manager());
    }

    // optional bytes operation = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_operation());
    }

    // optional bytes apiVersion = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_apiversion());
    }

    // optional bytes fieldsType = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_fieldstype());
    }

    // optional bytes subresource = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_subresource());
    }

    // optional .k8s.io.apimachinery.pkg.apis.meta.v1.Time time = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.time_);
    }

    // optional .k8s.io.apimachinery.pkg.apis.meta.v1.FieldsV1 fieldsV1 = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.fieldsv1_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ManagedFieldsEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ManagedFieldsEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ManagedFieldsEntry::GetClassData() const { return &_class_data_; }


void ManagedFieldsEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ManagedFieldsEntry*>(&to_msg);
  auto& from = static_cast<const ManagedFieldsEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_manager(from._internal_manager());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_operation(from._internal_operation());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_apiversion(from._internal_apiversion());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_fieldstype(from._internal_fieldstype());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_subresource(from._internal_subresource());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_time()->::k8s::io::apimachinery::pkg::apis::meta::v1::Time::MergeFrom(
          from._internal_time());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_fieldsv1()->::k8s::io::apimachinery::pkg::apis::meta::v1::FieldsV1::MergeFrom(
          from._internal_fieldsv1());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ManagedFieldsEntry::CopyFrom(const ManagedFieldsEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManagedFieldsEntry::IsInitialized() const {
  return true;
}

void ManagedFieldsEntry::InternalSwap(ManagedFieldsEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.manager_, lhs_arena,
      &other->_impl_.manager_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.operation_, lhs_arena,
      &other->_impl_.operation_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.apiversion_, lhs_arena,
      &other->_impl_.apiversion_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fieldstype_, lhs_arena,
      &other->_impl_.fieldstype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.subresource_, lhs_arena,
      &other->_impl_.subresource_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ManagedFieldsEntry, _impl_.fieldsv1_)
      + sizeof(ManagedFieldsEntry::_impl_.fieldsv1_)
      - PROTOBUF_FIELD_OFFSET(ManagedFieldsEntry, _impl_.time_)>(
          reinterpret_cast<char*>(&_impl_.time_),
          reinterpret_cast<char*>(&other->_impl_.time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ManagedFieldsEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_getter, &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_once,
      file_level_metadata_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto[24]);
}

// ===================================================================

class MicroTime::_Internal {
 public:
  using HasBits = decltype(std::declval<MicroTime>()._impl_._has_bits_);
  static void set_has_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_nanos(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MicroTime::MicroTime(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.MicroTime)
}
MicroTime::MicroTime(const MicroTime& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MicroTime* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.seconds_){}
    , decltype(_impl_.nanos_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.seconds_, &from._impl_.seconds_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.nanos_) -
    reinterpret_cast<char*>(&_impl_.seconds_)) + sizeof(_impl_.nanos_));
  // @@protoc_insertion_point(copy_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.MicroTime)
}

inline void MicroTime::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.seconds_){int64_t{0}}
    , decltype(_impl_.nanos_){0}
  };
}

MicroTime::~MicroTime() {
  // @@protoc_insertion_point(destructor:k8s.io.apimachinery.pkg.apis.meta.v1.MicroTime)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MicroTime::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MicroTime::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MicroTime::Clear() {
// @@protoc_insertion_point(message_clear_start:k8s.io.apimachinery.pkg.apis.meta.v1.MicroTime)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.seconds_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.nanos_) -
        reinterpret_cast<char*>(&_impl_.seconds_)) + sizeof(_impl_.nanos_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MicroTime::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 seconds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_seconds(&has_bits);
          _impl_.seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 nanos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_nanos(&has_bits);
          _impl_.nanos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MicroTime::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:k8s.io.apimachinery.pkg.apis.meta.v1.MicroTime)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 seconds = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_seconds(), target);
  }

  // optional int32 nanos = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_nanos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:k8s.io.apimachinery.pkg.apis.meta.v1.MicroTime)
  return target;
}

size_t MicroTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:k8s.io.apimachinery.pkg.apis.meta.v1.MicroTime)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 seconds = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seconds());
    }

    // optional int32 nanos = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_nanos());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MicroTime::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MicroTime::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MicroTime::GetClassData() const { return &_class_data_; }


void MicroTime::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MicroTime*>(&to_msg);
  auto& from = static_cast<const MicroTime&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.MicroTime)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.seconds_ = from._impl_.seconds_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.nanos_ = from._impl_.nanos_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MicroTime::CopyFrom(const MicroTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.MicroTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MicroTime::IsInitialized() const {
  return true;
}

void MicroTime::InternalSwap(MicroTime* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MicroTime, _impl_.nanos_)
      + sizeof(MicroTime::_impl_.nanos_)
      - PROTOBUF_FIELD_OFFSET(MicroTime, _impl_.seconds_)>(
          reinterpret_cast<char*>(&_impl_.seconds_),
          reinterpret_cast<char*>(&other->_impl_.seconds_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MicroTime::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_getter, &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_once,
      file_level_metadata_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto[25]);
}

// ===================================================================

ObjectMeta_LabelsEntry_DoNotUse::ObjectMeta_LabelsEntry_DoNotUse() {}
ObjectMeta_LabelsEntry_DoNotUse::ObjectMeta_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ObjectMeta_LabelsEntry_DoNotUse::MergeFrom(const ObjectMeta_LabelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ObjectMeta_LabelsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_getter, &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_once,
      file_level_metadata_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto[26]);
}

// ===================================================================

ObjectMeta_AnnotationsEntry_DoNotUse::ObjectMeta_AnnotationsEntry_DoNotUse() {}
ObjectMeta_AnnotationsEntry_DoNotUse::ObjectMeta_AnnotationsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ObjectMeta_AnnotationsEntry_DoNotUse::MergeFrom(const ObjectMeta_AnnotationsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ObjectMeta_AnnotationsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_getter, &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_once,
      file_level_metadata_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto[27]);
}

// ===================================================================

class ObjectMeta::_Internal {
 public:
  using HasBits = decltype(std::declval<ObjectMeta>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_generatename(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_selflink(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_resourceversion(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_generation(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::k8s::io::apimachinery::pkg::apis::meta::v1::Time& creationtimestamp(const ObjectMeta* msg);
  static void set_has_creationtimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::k8s::io::apimachinery::pkg::apis::meta::v1::Time& deletiontimestamp(const ObjectMeta* msg);
  static void set_has_deletiontimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_deletiongraceperiodseconds(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

const ::k8s::io::apimachinery::pkg::apis::meta::v1::Time&
ObjectMeta::_Internal::creationtimestamp(const ObjectMeta* msg) {
  return *msg->_impl_.creationtimestamp_;
}
const ::k8s::io::apimachinery::pkg::apis::meta::v1::Time&
ObjectMeta::_Internal::deletiontimestamp(const ObjectMeta* msg) {
  return *msg->_impl_.deletiontimestamp_;
}
ObjectMeta::ObjectMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &ObjectMeta::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta)
}
ObjectMeta::ObjectMeta(const ObjectMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ObjectMeta* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.labels_)*/{}
    , /*decltype(_impl_.annotations_)*/{}
    , decltype(_impl_.ownerreferences_){from._impl_.ownerreferences_}
    , decltype(_impl_.finalizers_){from._impl_.finalizers_}
    , decltype(_impl_.managedfields_){from._impl_.managedfields_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.generatename_){}
    , decltype(_impl_.namespace__){}
    , decltype(_impl_.selflink_){}
    , decltype(_impl_.uid_){}
    , decltype(_impl_.resourceversion_){}
    , decltype(_impl_.creationtimestamp_){nullptr}
    , decltype(_impl_.deletiontimestamp_){nullptr}
    , decltype(_impl_.generation_){}
    , decltype(_impl_.deletiongraceperiodseconds_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.labels_.MergeFrom(from._impl_.labels_);
  _this->_impl_.annotations_.MergeFrom(from._impl_.annotations_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.generatename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.generatename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_generatename()) {
    _this->_impl_.generatename_.Set(from._internal_generatename(), 
      _this->GetArenaForAllocation());
  }
  _impl_.namespace__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.namespace__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_namespace_()) {
    _this->_impl_.namespace__.Set(from._internal_namespace_(), 
      _this->GetArenaForAllocation());
  }
  _impl_.selflink_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.selflink_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_selflink()) {
    _this->_impl_.selflink_.Set(from._internal_selflink(), 
      _this->GetArenaForAllocation());
  }
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_uid()) {
    _this->_impl_.uid_.Set(from._internal_uid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.resourceversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.resourceversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_resourceversion()) {
    _this->_impl_.resourceversion_.Set(from._internal_resourceversion(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_creationtimestamp()) {
    _this->_impl_.creationtimestamp_ = new ::k8s::io::apimachinery::pkg::apis::meta::v1::Time(*from._impl_.creationtimestamp_);
  }
  if (from._internal_has_deletiontimestamp()) {
    _this->_impl_.deletiontimestamp_ = new ::k8s::io::apimachinery::pkg::apis::meta::v1::Time(*from._impl_.deletiontimestamp_);
  }
  ::memcpy(&_impl_.generation_, &from._impl_.generation_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.deletiongraceperiodseconds_) -
    reinterpret_cast<char*>(&_impl_.generation_)) + sizeof(_impl_.deletiongraceperiodseconds_));
  // @@protoc_insertion_point(copy_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta)
}

inline void ObjectMeta::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.labels_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.annotations_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.ownerreferences_){arena}
    , decltype(_impl_.finalizers_){arena}
    , decltype(_impl_.managedfields_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.generatename_){}
    , decltype(_impl_.namespace__){}
    , decltype(_impl_.selflink_){}
    , decltype(_impl_.uid_){}
    , decltype(_impl_.resourceversion_){}
    , decltype(_impl_.creationtimestamp_){nullptr}
    , decltype(_impl_.deletiontimestamp_){nullptr}
    , decltype(_impl_.generation_){int64_t{0}}
    , decltype(_impl_.deletiongraceperiodseconds_){int64_t{0}}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.generatename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.generatename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.namespace__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.namespace__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.selflink_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.selflink_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.resourceversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.resourceversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ObjectMeta::~ObjectMeta() {
  // @@protoc_insertion_point(destructor:k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void ObjectMeta::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.labels_.Destruct();
  _impl_.labels_.~MapField();
  _impl_.annotations_.Destruct();
  _impl_.annotations_.~MapField();
  _impl_.ownerreferences_.~RepeatedPtrField();
  _impl_.finalizers_.~RepeatedPtrField();
  _impl_.managedfields_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  _impl_.generatename_.Destroy();
  _impl_.namespace__.Destroy();
  _impl_.selflink_.Destroy();
  _impl_.uid_.Destroy();
  _impl_.resourceversion_.Destroy();
  if (this != internal_default_instance()) delete _impl_.creationtimestamp_;
  if (this != internal_default_instance()) delete _impl_.deletiontimestamp_;
}

void ObjectMeta::ArenaDtor(void* object) {
  ObjectMeta* _this = reinterpret_cast< ObjectMeta* >(object);
  _this->_impl_.labels_.Destruct();
  _this->_impl_.annotations_.Destruct();
}
void ObjectMeta::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObjectMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.labels_.Clear();
  _impl_.annotations_.Clear();
  _impl_.ownerreferences_.Clear();
  _impl_.finalizers_.Clear();
  _impl_.managedfields_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.generatename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.selflink_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.uid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.resourceversion_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.creationtimestamp_ != nullptr);
      _impl_.creationtimestamp_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.deletiontimestamp_ != nullptr);
      _impl_.deletiontimestamp_->Clear();
    }
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.generation_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.deletiongraceperiodseconds_) -
        reinterpret_cast<char*>(&_impl_.generation_)) + sizeof(_impl_.deletiongraceperiodseconds_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectMeta::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes generateName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_generatename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes namespace = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes selfLink = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_selflink();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes uid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes resourceVersion = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_resourceversion();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 generation = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_generation(&has_bits);
          _impl_.generation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .k8s.io.apimachinery.pkg.apis.meta.v1.Time creationTimestamp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_creationtimestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .k8s.io.apimachinery.pkg.apis.meta.v1.Time deletionTimestamp = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_deletiontimestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 deletionGracePeriodSeconds = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_deletiongraceperiodseconds(&has_bits);
          _impl_.deletiongraceperiodseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, string> labels = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.labels_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> annotations = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.annotations_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .k8s.io.apimachinery.pkg.apis.meta.v1.OwnerReference ownerReferences = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ownerreferences(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string finalizers = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_finalizers();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta.finalizers");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .k8s.io.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry managedFields = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_managedfields(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObjectMeta::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional bytes generateName = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_generatename(), target);
  }

  // optional bytes namespace = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_namespace_(), target);
  }

  // optional bytes selfLink = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_selflink(), target);
  }

  // optional bytes uid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_uid(), target);
  }

  // optional bytes resourceVersion = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_resourceversion(), target);
  }

  // optional int64 generation = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_generation(), target);
  }

  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.Time creationTimestamp = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::creationtimestamp(this),
        _Internal::creationtimestamp(this).GetCachedSize(), target, stream);
  }

  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.Time deletionTimestamp = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::deletiontimestamp(this),
        _Internal::deletiontimestamp(this).GetCachedSize(), target, stream);
  }

  // optional int64 deletionGracePeriodSeconds = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(10, this->_internal_deletiongraceperiodseconds(), target);
  }

  // map<string, string> labels = 11;
  if (!this->_internal_labels().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = ObjectMeta_LabelsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_labels();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta.LabelsEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta.LabelsEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(11, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(11, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, string> annotations = 12;
  if (!this->_internal_annotations().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = ObjectMeta_AnnotationsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_annotations();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta.AnnotationsEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta.AnnotationsEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(12, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(12, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // repeated .k8s.io.apimachinery.pkg.apis.meta.v1.OwnerReference ownerReferences = 13;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ownerreferences_size()); i < n; i++) {
    const auto& repfield = this->_internal_ownerreferences(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string finalizers = 14;
  for (int i = 0, n = this->_internal_finalizers_size(); i < n; i++) {
    const auto& s = this->_internal_finalizers(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta.finalizers");
    target = stream->WriteString(14, s, target);
  }

  // repeated .k8s.io.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry managedFields = 17;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_managedfields_size()); i < n; i++) {
    const auto& repfield = this->_internal_managedfields(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(17, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta)
  return target;
}

size_t ObjectMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> labels = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_labels_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_labels().begin();
      it != this->_internal_labels().end(); ++it) {
    total_size += ObjectMeta_LabelsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> annotations = 12;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_annotations_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_annotations().begin();
      it != this->_internal_annotations().end(); ++it) {
    total_size += ObjectMeta_AnnotationsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .k8s.io.apimachinery.pkg.apis.meta.v1.OwnerReference ownerReferences = 13;
  total_size += 1UL * this->_internal_ownerreferences_size();
  for (const auto& msg : this->_impl_.ownerreferences_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string finalizers = 14;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.finalizers_.size());
  for (int i = 0, n = _impl_.finalizers_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.finalizers_.Get(i));
  }

  // repeated .k8s.io.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry managedFields = 17;
  total_size += 2UL * this->_internal_managedfields_size();
  for (const auto& msg : this->_impl_.managedfields_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_name());
    }

    // optional bytes generateName = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_generatename());
    }

    // optional bytes namespace = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_namespace_());
    }

    // optional bytes selfLink = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_selflink());
    }

    // optional bytes uid = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_uid());
    }

    // optional bytes resourceVersion = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_resourceversion());
    }

    // optional .k8s.io.apimachinery.pkg.apis.meta.v1.Time creationTimestamp = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.creationtimestamp_);
    }

    // optional .k8s.io.apimachinery.pkg.apis.meta.v1.Time deletionTimestamp = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.deletiontimestamp_);
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional int64 generation = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_generation());
    }

    // optional int64 deletionGracePeriodSeconds = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_deletiongraceperiodseconds());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObjectMeta::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ObjectMeta::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObjectMeta::GetClassData() const { return &_class_data_; }


void ObjectMeta::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ObjectMeta*>(&to_msg);
  auto& from = static_cast<const ObjectMeta&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.labels_.MergeFrom(from._impl_.labels_);
  _this->_impl_.annotations_.MergeFrom(from._impl_.annotations_);
  _this->_impl_.ownerreferences_.MergeFrom(from._impl_.ownerreferences_);
  _this->_impl_.finalizers_.MergeFrom(from._impl_.finalizers_);
  _this->_impl_.managedfields_.MergeFrom(from._impl_.managedfields_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_generatename(from._internal_generatename());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_selflink(from._internal_selflink());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_uid(from._internal_uid());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_resourceversion(from._internal_resourceversion());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_creationtimestamp()->::k8s::io::apimachinery::pkg::apis::meta::v1::Time::MergeFrom(
          from._internal_creationtimestamp());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_deletiontimestamp()->::k8s::io::apimachinery::pkg::apis::meta::v1::Time::MergeFrom(
          from._internal_deletiontimestamp());
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.generation_ = from._impl_.generation_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.deletiongraceperiodseconds_ = from._impl_.deletiongraceperiodseconds_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObjectMeta::CopyFrom(const ObjectMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectMeta::IsInitialized() const {
  return true;
}

void ObjectMeta::InternalSwap(ObjectMeta* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.labels_.InternalSwap(&other->_impl_.labels_);
  _impl_.annotations_.InternalSwap(&other->_impl_.annotations_);
  _impl_.ownerreferences_.InternalSwap(&other->_impl_.ownerreferences_);
  _impl_.finalizers_.InternalSwap(&other->_impl_.finalizers_);
  _impl_.managedfields_.InternalSwap(&other->_impl_.managedfields_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.generatename_, lhs_arena,
      &other->_impl_.generatename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.namespace__, lhs_arena,
      &other->_impl_.namespace__, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.selflink_, lhs_arena,
      &other->_impl_.selflink_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uid_, lhs_arena,
      &other->_impl_.uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.resourceversion_, lhs_arena,
      &other->_impl_.resourceversion_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObjectMeta, _impl_.deletiongraceperiodseconds_)
      + sizeof(ObjectMeta::_impl_.deletiongraceperiodseconds_)
      - PROTOBUF_FIELD_OFFSET(ObjectMeta, _impl_.creationtimestamp_)>(
          reinterpret_cast<char*>(&_impl_.creationtimestamp_),
          reinterpret_cast<char*>(&other->_impl_.creationtimestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectMeta::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_getter, &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_once,
      file_level_metadata_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto[28]);
}

// ===================================================================

class OwnerReference::_Internal {
 public:
  using HasBits = decltype(std::declval<OwnerReference>()._impl_._has_bits_);
  static void set_has_apiversion(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_controller(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_blockownerdeletion(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

OwnerReference::OwnerReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.OwnerReference)
}
OwnerReference::OwnerReference(const OwnerReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OwnerReference* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kind_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.uid_){}
    , decltype(_impl_.apiversion_){}
    , decltype(_impl_.controller_){}
    , decltype(_impl_.blockownerdeletion_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.kind_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.kind_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_kind()) {
    _this->_impl_.kind_.Set(from._internal_kind(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_uid()) {
    _this->_impl_.uid_.Set(from._internal_uid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.apiversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.apiversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_apiversion()) {
    _this->_impl_.apiversion_.Set(from._internal_apiversion(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.controller_, &from._impl_.controller_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.blockownerdeletion_) -
    reinterpret_cast<char*>(&_impl_.controller_)) + sizeof(_impl_.blockownerdeletion_));
  // @@protoc_insertion_point(copy_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.OwnerReference)
}

inline void OwnerReference::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kind_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.uid_){}
    , decltype(_impl_.apiversion_){}
    , decltype(_impl_.controller_){false}
    , decltype(_impl_.blockownerdeletion_){false}
  };
  _impl_.kind_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.kind_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.apiversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.apiversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OwnerReference::~OwnerReference() {
  // @@protoc_insertion_point(destructor:k8s.io.apimachinery.pkg.apis.meta.v1.OwnerReference)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OwnerReference::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.kind_.Destroy();
  _impl_.name_.Destroy();
  _impl_.uid_.Destroy();
  _impl_.apiversion_.Destroy();
}

void OwnerReference::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OwnerReference::Clear() {
// @@protoc_insertion_point(message_clear_start:k8s.io.apimachinery.pkg.apis.meta.v1.OwnerReference)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.kind_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.uid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.apiversion_.ClearNonDefaultToEmpty();
    }
  }
  ::memset(&_impl_.controller_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.blockownerdeletion_) -
      reinterpret_cast<char*>(&_impl_.controller_)) + sizeof(_impl_.blockownerdeletion_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OwnerReference::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes kind = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_kind();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes uid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes apiVersion = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_apiversion();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool controller = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_controller(&has_bits);
          _impl_.controller_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool blockOwnerDeletion = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_blockownerdeletion(&has_bits);
          _impl_.blockownerdeletion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OwnerReference::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:k8s.io.apimachinery.pkg.apis.meta.v1.OwnerReference)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes kind = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_kind(), target);
  }

  // optional bytes name = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_name(), target);
  }

  // optional bytes uid = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_uid(), target);
  }

  // optional bytes apiVersion = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_apiversion(), target);
  }

  // optional bool controller = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_controller(), target);
  }

  // optional bool blockOwnerDeletion = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_blockownerdeletion(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:k8s.io.apimachinery.pkg.apis.meta.v1.OwnerReference)
  return target;
}

size_t OwnerReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:k8s.io.apimachinery.pkg.apis.meta.v1.OwnerReference)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional bytes kind = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_kind());
    }

    // optional bytes name = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_name());
    }

    // optional bytes uid = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_uid());
    }

    // optional bytes apiVersion = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_apiversion());
    }

    // optional bool controller = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool blockOwnerDeletion = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OwnerReference::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OwnerReference::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OwnerReference::GetClassData() const { return &_class_data_; }


void OwnerReference::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OwnerReference*>(&to_msg);
  auto& from = static_cast<const OwnerReference&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.OwnerReference)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_kind(from._internal_kind());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_uid(from._internal_uid());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_apiversion(from._internal_apiversion());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.controller_ = from._impl_.controller_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.blockownerdeletion_ = from._impl_.blockownerdeletion_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OwnerReference::CopyFrom(const OwnerReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.OwnerReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OwnerReference::IsInitialized() const {
  return true;
}

void OwnerReference::InternalSwap(OwnerReference* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.kind_, lhs_arena,
      &other->_impl_.kind_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uid_, lhs_arena,
      &other->_impl_.uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.apiversion_, lhs_arena,
      &other->_impl_.apiversion_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OwnerReference, _impl_.blockownerdeletion_)
      + sizeof(OwnerReference::_impl_.blockownerdeletion_)
      - PROTOBUF_FIELD_OFFSET(OwnerReference, _impl_.controller_)>(
          reinterpret_cast<char*>(&_impl_.controller_),
          reinterpret_cast<char*>(&other->_impl_.controller_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OwnerReference::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_getter, &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_once,
      file_level_metadata_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto[29]);
}

// ===================================================================

class PartialObjectMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<PartialObjectMetadata>()._impl_._has_bits_);
  static const ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta& metadata(const PartialObjectMetadata* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta&
PartialObjectMetadata::_Internal::metadata(const PartialObjectMetadata* msg) {
  return *msg->_impl_.metadata_;
}
PartialObjectMetadata::PartialObjectMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.PartialObjectMetadata)
}
PartialObjectMetadata::PartialObjectMetadata(const PartialObjectMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PartialObjectMetadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.metadata_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    _this->_impl_.metadata_ = new ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta(*from._impl_.metadata_);
  }
  // @@protoc_insertion_point(copy_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.PartialObjectMetadata)
}

inline void PartialObjectMetadata::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.metadata_){nullptr}
  };
}

PartialObjectMetadata::~PartialObjectMetadata() {
  // @@protoc_insertion_point(destructor:k8s.io.apimachinery.pkg.apis.meta.v1.PartialObjectMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PartialObjectMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.metadata_;
}

void PartialObjectMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PartialObjectMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:k8s.io.apimachinery.pkg.apis.meta.v1.PartialObjectMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.metadata_ != nullptr);
    _impl_.metadata_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PartialObjectMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PartialObjectMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:k8s.io.apimachinery.pkg.apis.meta.v1.PartialObjectMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::metadata(this),
        _Internal::metadata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:k8s.io.apimachinery.pkg.apis.meta.v1.PartialObjectMetadata)
  return target;
}

size_t PartialObjectMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:k8s.io.apimachinery.pkg.apis.meta.v1.PartialObjectMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.metadata_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PartialObjectMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PartialObjectMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PartialObjectMetadata::GetClassData() const { return &_class_data_; }


void PartialObjectMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PartialObjectMetadata*>(&to_msg);
  auto& from = static_cast<const PartialObjectMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.PartialObjectMetadata)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_metadata()) {
    _this->_internal_mutable_metadata()->::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta::MergeFrom(
        from._internal_metadata());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PartialObjectMetadata::CopyFrom(const PartialObjectMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.PartialObjectMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartialObjectMetadata::IsInitialized() const {
  return true;
}

void PartialObjectMetadata::InternalSwap(PartialObjectMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.metadata_, other->_impl_.metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PartialObjectMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_getter, &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_once,
      file_level_metadata_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto[30]);
}

// ===================================================================

class PartialObjectMetadataList::_Internal {
 public:
  using HasBits = decltype(std::declval<PartialObjectMetadataList>()._impl_._has_bits_);
  static const ::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta& metadata(const PartialObjectMetadataList* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta&
PartialObjectMetadataList::_Internal::metadata(const PartialObjectMetadataList* msg) {
  return *msg->_impl_.metadata_;
}
PartialObjectMetadataList::PartialObjectMetadataList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.PartialObjectMetadataList)
}
PartialObjectMetadataList::PartialObjectMetadataList(const PartialObjectMetadataList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PartialObjectMetadataList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.metadata_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    _this->_impl_.metadata_ = new ::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta(*from._impl_.metadata_);
  }
  // @@protoc_insertion_point(copy_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.PartialObjectMetadataList)
}

inline void PartialObjectMetadataList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.items_){arena}
    , decltype(_impl_.metadata_){nullptr}
  };
}

PartialObjectMetadataList::~PartialObjectMetadataList() {
  // @@protoc_insertion_point(destructor:k8s.io.apimachinery.pkg.apis.meta.v1.PartialObjectMetadataList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PartialObjectMetadataList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.metadata_;
}

void PartialObjectMetadataList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PartialObjectMetadataList::Clear() {
// @@protoc_insertion_point(message_clear_start:k8s.io.apimachinery.pkg.apis.meta.v1.PartialObjectMetadataList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.metadata_ != nullptr);
    _impl_.metadata_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PartialObjectMetadataList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .k8s.io.apimachinery.pkg.apis.meta.v1.PartialObjectMetadata items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PartialObjectMetadataList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:k8s.io.apimachinery.pkg.apis.meta.v1.PartialObjectMetadataList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::metadata(this),
        _Internal::metadata(this).GetCachedSize(), target, stream);
  }

  // repeated .k8s.io.apimachinery.pkg.apis.meta.v1.PartialObjectMetadata items = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:k8s.io.apimachinery.pkg.apis.meta.v1.PartialObjectMetadataList)
  return target;
}

size_t PartialObjectMetadataList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:k8s.io.apimachinery.pkg.apis.meta.v1.PartialObjectMetadataList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .k8s.io.apimachinery.pkg.apis.meta.v1.PartialObjectMetadata items = 2;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.metadata_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PartialObjectMetadataList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PartialObjectMetadataList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PartialObjectMetadataList::GetClassData() const { return &_class_data_; }


void PartialObjectMetadataList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PartialObjectMetadataList*>(&to_msg);
  auto& from = static_cast<const PartialObjectMetadataList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.PartialObjectMetadataList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (from._internal_has_metadata()) {
    _this->_internal_mutable_metadata()->::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta::MergeFrom(
        from._internal_metadata());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PartialObjectMetadataList::CopyFrom(const PartialObjectMetadataList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.PartialObjectMetadataList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartialObjectMetadataList::IsInitialized() const {
  return true;
}

void PartialObjectMetadataList::InternalSwap(PartialObjectMetadataList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  swap(_impl_.metadata_, other->_impl_.metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PartialObjectMetadataList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_getter, &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_once,
      file_level_metadata_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto[31]);
}

// ===================================================================

class Patch::_Internal {
 public:
};

Patch::Patch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.Patch)
}
Patch::Patch(const Patch& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  Patch* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.Patch)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Patch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Patch::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Patch::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_getter, &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_once,
      file_level_metadata_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto[32]);
}

// ===================================================================

class PatchOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<PatchOptions>()._impl_._has_bits_);
  static void set_has_force(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_fieldmanager(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fieldvalidation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PatchOptions::PatchOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.PatchOptions)
}
PatchOptions::PatchOptions(const PatchOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PatchOptions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dryrun_){from._impl_.dryrun_}
    , decltype(_impl_.fieldmanager_){}
    , decltype(_impl_.fieldvalidation_){}
    , decltype(_impl_.force_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.fieldmanager_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fieldmanager_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_fieldmanager()) {
    _this->_impl_.fieldmanager_.Set(from._internal_fieldmanager(), 
      _this->GetArenaForAllocation());
  }
  _impl_.fieldvalidation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fieldvalidation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_fieldvalidation()) {
    _this->_impl_.fieldvalidation_.Set(from._internal_fieldvalidation(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.force_ = from._impl_.force_;
  // @@protoc_insertion_point(copy_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.PatchOptions)
}

inline void PatchOptions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dryrun_){arena}
    , decltype(_impl_.fieldmanager_){}
    , decltype(_impl_.fieldvalidation_){}
    , decltype(_impl_.force_){false}
  };
  _impl_.fieldmanager_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fieldmanager_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fieldvalidation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fieldvalidation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PatchOptions::~PatchOptions() {
  // @@protoc_insertion_point(destructor:k8s.io.apimachinery.pkg.apis.meta.v1.PatchOptions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PatchOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dryrun_.~RepeatedPtrField();
  _impl_.fieldmanager_.Destroy();
  _impl_.fieldvalidation_.Destroy();
}

void PatchOptions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PatchOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:k8s.io.apimachinery.pkg.apis.meta.v1.PatchOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dryrun_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.fieldmanager_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.fieldvalidation_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.force_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatchOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string dryRun = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_dryrun();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "k8s.io.apimachinery.pkg.apis.meta.v1.PatchOptions.dryRun");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool force = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_force(&has_bits);
          _impl_.force_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes fieldManager = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_fieldmanager();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes fieldValidation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_fieldvalidation();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PatchOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:k8s.io.apimachinery.pkg.apis.meta.v1.PatchOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string dryRun = 1;
  for (int i = 0, n = this->_internal_dryrun_size(); i < n; i++) {
    const auto& s = this->_internal_dryrun(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "k8s.io.apimachinery.pkg.apis.meta.v1.PatchOptions.dryRun");
    target = stream->WriteString(1, s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool force = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_force(), target);
  }

  // optional bytes fieldManager = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_fieldmanager(), target);
  }

  // optional bytes fieldValidation = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_fieldvalidation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:k8s.io.apimachinery.pkg.apis.meta.v1.PatchOptions)
  return target;
}

size_t PatchOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:k8s.io.apimachinery.pkg.apis.meta.v1.PatchOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string dryRun = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.dryrun_.size());
  for (int i = 0, n = _impl_.dryrun_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.dryrun_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes fieldManager = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_fieldmanager());
    }

    // optional bytes fieldValidation = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_fieldvalidation());
    }

    // optional bool force = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PatchOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PatchOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PatchOptions::GetClassData() const { return &_class_data_; }


void PatchOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PatchOptions*>(&to_msg);
  auto& from = static_cast<const PatchOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.PatchOptions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.dryrun_.MergeFrom(from._impl_.dryrun_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_fieldmanager(from._internal_fieldmanager());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_fieldvalidation(from._internal_fieldvalidation());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.force_ = from._impl_.force_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PatchOptions::CopyFrom(const PatchOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.PatchOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchOptions::IsInitialized() const {
  return true;
}

void PatchOptions::InternalSwap(PatchOptions* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.dryrun_.InternalSwap(&other->_impl_.dryrun_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fieldmanager_, lhs_arena,
      &other->_impl_.fieldmanager_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fieldvalidation_, lhs_arena,
      &other->_impl_.fieldvalidation_, rhs_arena
  );
  swap(_impl_.force_, other->_impl_.force_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchOptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_getter, &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_once,
      file_level_metadata_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto[33]);
}

// ===================================================================

class Preconditions::_Internal {
 public:
  using HasBits = decltype(std::declval<Preconditions>()._impl_._has_bits_);
  static void set_has_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_resourceversion(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Preconditions::Preconditions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.Preconditions)
}
Preconditions::Preconditions(const Preconditions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Preconditions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.uid_){}
    , decltype(_impl_.resourceversion_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_uid()) {
    _this->_impl_.uid_.Set(from._internal_uid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.resourceversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.resourceversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_resourceversion()) {
    _this->_impl_.resourceversion_.Set(from._internal_resourceversion(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.Preconditions)
}

inline void Preconditions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.uid_){}
    , decltype(_impl_.resourceversion_){}
  };
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.resourceversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.resourceversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Preconditions::~Preconditions() {
  // @@protoc_insertion_point(destructor:k8s.io.apimachinery.pkg.apis.meta.v1.Preconditions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Preconditions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uid_.Destroy();
  _impl_.resourceversion_.Destroy();
}

void Preconditions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Preconditions::Clear() {
// @@protoc_insertion_point(message_clear_start:k8s.io.apimachinery.pkg.apis.meta.v1.Preconditions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.uid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.resourceversion_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Preconditions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes resourceVersion = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_resourceversion();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Preconditions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:k8s.io.apimachinery.pkg.apis.meta.v1.Preconditions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes uid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_uid(), target);
  }

  // optional bytes resourceVersion = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_resourceversion(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:k8s.io.apimachinery.pkg.apis.meta.v1.Preconditions)
  return target;
}

size_t Preconditions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:k8s.io.apimachinery.pkg.apis.meta.v1.Preconditions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes uid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_uid());
    }

    // optional bytes resourceVersion = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_resourceversion());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Preconditions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Preconditions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Preconditions::GetClassData() const { return &_class_data_; }


void Preconditions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Preconditions*>(&to_msg);
  auto& from = static_cast<const Preconditions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.Preconditions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_uid(from._internal_uid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_resourceversion(from._internal_resourceversion());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Preconditions::CopyFrom(const Preconditions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.Preconditions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Preconditions::IsInitialized() const {
  return true;
}

void Preconditions::InternalSwap(Preconditions* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uid_, lhs_arena,
      &other->_impl_.uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.resourceversion_, lhs_arena,
      &other->_impl_.resourceversion_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Preconditions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_getter, &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_once,
      file_level_metadata_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto[34]);
}

// ===================================================================

class RootPaths::_Internal {
 public:
};

RootPaths::RootPaths(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.RootPaths)
}
RootPaths::RootPaths(const RootPaths& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RootPaths* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.paths_){from._impl_.paths_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.RootPaths)
}

inline void RootPaths::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.paths_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RootPaths::~RootPaths() {
  // @@protoc_insertion_point(destructor:k8s.io.apimachinery.pkg.apis.meta.v1.RootPaths)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RootPaths::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.paths_.~RepeatedPtrField();
}

void RootPaths::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RootPaths::Clear() {
// @@protoc_insertion_point(message_clear_start:k8s.io.apimachinery.pkg.apis.meta.v1.RootPaths)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.paths_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RootPaths::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string paths = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_paths();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "k8s.io.apimachinery.pkg.apis.meta.v1.RootPaths.paths");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RootPaths::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:k8s.io.apimachinery.pkg.apis.meta.v1.RootPaths)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string paths = 1;
  for (int i = 0, n = this->_internal_paths_size(); i < n; i++) {
    const auto& s = this->_internal_paths(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "k8s.io.apimachinery.pkg.apis.meta.v1.RootPaths.paths");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:k8s.io.apimachinery.pkg.apis.meta.v1.RootPaths)
  return target;
}

size_t RootPaths::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:k8s.io.apimachinery.pkg.apis.meta.v1.RootPaths)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string paths = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.paths_.size());
  for (int i = 0, n = _impl_.paths_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.paths_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RootPaths::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RootPaths::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RootPaths::GetClassData() const { return &_class_data_; }


void RootPaths::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RootPaths*>(&to_msg);
  auto& from = static_cast<const RootPaths&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.RootPaths)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.paths_.MergeFrom(from._impl_.paths_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RootPaths::CopyFrom(const RootPaths& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.RootPaths)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RootPaths::IsInitialized() const {
  return true;
}

void RootPaths::InternalSwap(RootPaths* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.paths_.InternalSwap(&other->_impl_.paths_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RootPaths::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_getter, &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_once,
      file_level_metadata_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto[35]);
}

// ===================================================================

class ServerAddressByClientCIDR::_Internal {
 public:
  using HasBits = decltype(std::declval<ServerAddressByClientCIDR>()._impl_._has_bits_);
  static void set_has_clientcidr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_serveraddress(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ServerAddressByClientCIDR::ServerAddressByClientCIDR(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR)
}
ServerAddressByClientCIDR::ServerAddressByClientCIDR(const ServerAddressByClientCIDR& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerAddressByClientCIDR* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.clientcidr_){}
    , decltype(_impl_.serveraddress_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.clientcidr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientcidr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_clientcidr()) {
    _this->_impl_.clientcidr_.Set(from._internal_clientcidr(), 
      _this->GetArenaForAllocation());
  }
  _impl_.serveraddress_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serveraddress_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_serveraddress()) {
    _this->_impl_.serveraddress_.Set(from._internal_serveraddress(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR)
}

inline void ServerAddressByClientCIDR::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.clientcidr_){}
    , decltype(_impl_.serveraddress_){}
  };
  _impl_.clientcidr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientcidr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.serveraddress_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serveraddress_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ServerAddressByClientCIDR::~ServerAddressByClientCIDR() {
  // @@protoc_insertion_point(destructor:k8s.io.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerAddressByClientCIDR::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.clientcidr_.Destroy();
  _impl_.serveraddress_.Destroy();
}

void ServerAddressByClientCIDR::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerAddressByClientCIDR::Clear() {
// @@protoc_insertion_point(message_clear_start:k8s.io.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.clientcidr_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.serveraddress_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerAddressByClientCIDR::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes clientCIDR = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_clientcidr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes serverAddress = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_serveraddress();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerAddressByClientCIDR::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:k8s.io.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes clientCIDR = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_clientcidr(), target);
  }

  // optional bytes serverAddress = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_serveraddress(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:k8s.io.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR)
  return target;
}

size_t ServerAddressByClientCIDR::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:k8s.io.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes clientCIDR = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_clientcidr());
    }

    // optional bytes serverAddress = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_serveraddress());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerAddressByClientCIDR::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerAddressByClientCIDR::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerAddressByClientCIDR::GetClassData() const { return &_class_data_; }


void ServerAddressByClientCIDR::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerAddressByClientCIDR*>(&to_msg);
  auto& from = static_cast<const ServerAddressByClientCIDR&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_clientcidr(from._internal_clientcidr());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_serveraddress(from._internal_serveraddress());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerAddressByClientCIDR::CopyFrom(const ServerAddressByClientCIDR& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerAddressByClientCIDR::IsInitialized() const {
  return true;
}

void ServerAddressByClientCIDR::InternalSwap(ServerAddressByClientCIDR* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.clientcidr_, lhs_arena,
      &other->_impl_.clientcidr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.serveraddress_, lhs_arena,
      &other->_impl_.serveraddress_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerAddressByClientCIDR::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_getter, &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_once,
      file_level_metadata_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto[36]);
}

// ===================================================================

class Status::_Internal {
 public:
  using HasBits = decltype(std::declval<Status>()._impl_._has_bits_);
  static const ::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta& metadata(const Status* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::k8s::io::apimachinery::pkg::apis::meta::v1::StatusDetails& details(const Status* msg);
  static void set_has_details(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta&
Status::_Internal::metadata(const Status* msg) {
  return *msg->_impl_.metadata_;
}
const ::k8s::io::apimachinery::pkg::apis::meta::v1::StatusDetails&
Status::_Internal::details(const Status* msg) {
  return *msg->_impl_.details_;
}
Status::Status(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.Status)
}
Status::Status(const Status& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Status* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.status_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.reason_){}
    , decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.details_){nullptr}
    , decltype(_impl_.code_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_status()) {
    _this->_impl_.status_.Set(from._internal_status(), 
      _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_message()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _impl_.reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_reason()) {
    _this->_impl_.reason_.Set(from._internal_reason(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_metadata()) {
    _this->_impl_.metadata_ = new ::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta(*from._impl_.metadata_);
  }
  if (from._internal_has_details()) {
    _this->_impl_.details_ = new ::k8s::io::apimachinery::pkg::apis::meta::v1::StatusDetails(*from._impl_.details_);
  }
  _this->_impl_.code_ = from._impl_.code_;
  // @@protoc_insertion_point(copy_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.Status)
}

inline void Status::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.status_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.reason_){}
    , decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.details_){nullptr}
    , decltype(_impl_.code_){0}
  };
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Status::~Status() {
  // @@protoc_insertion_point(destructor:k8s.io.apimachinery.pkg.apis.meta.v1.Status)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Status::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.status_.Destroy();
  _impl_.message_.Destroy();
  _impl_.reason_.Destroy();
  if (this != internal_default_instance()) delete _impl_.metadata_;
  if (this != internal_default_instance()) delete _impl_.details_;
}

void Status::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Status::Clear() {
// @@protoc_insertion_point(message_clear_start:k8s.io.apimachinery.pkg.apis.meta.v1.Status)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.status_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.message_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.reason_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.metadata_ != nullptr);
      _impl_.metadata_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.details_ != nullptr);
      _impl_.details_->Clear();
    }
  }
  _impl_.code_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Status::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_status();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes reason = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_reason();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .k8s.io.apimachinery.pkg.apis.meta.v1.StatusDetails details = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_details(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 code = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_code(&has_bits);
          _impl_.code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Status::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:k8s.io.apimachinery.pkg.apis.meta.v1.Status)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::metadata(this),
        _Internal::metadata(this).GetCachedSize(), target, stream);
  }

  // optional bytes status = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_status(), target);
  }

  // optional bytes message = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_message(), target);
  }

  // optional bytes reason = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_reason(), target);
  }

  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.StatusDetails details = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::details(this),
        _Internal::details(this).GetCachedSize(), target, stream);
  }

  // optional int32 code = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:k8s.io.apimachinery.pkg.apis.meta.v1.Status)
  return target;
}

size_t Status::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:k8s.io.apimachinery.pkg.apis.meta.v1.Status)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional bytes status = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_status());
    }

    // optional bytes message = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_message());
    }

    // optional bytes reason = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_reason());
    }

    // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.metadata_);
    }

    // optional .k8s.io.apimachinery.pkg.apis.meta.v1.StatusDetails details = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.details_);
    }

    // optional int32 code = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_code());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Status::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Status::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Status::GetClassData() const { return &_class_data_; }


void Status::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Status*>(&to_msg);
  auto& from = static_cast<const Status&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.Status)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_status(from._internal_status());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_reason(from._internal_reason());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_metadata()->::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta::MergeFrom(
          from._internal_metadata());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_details()->::k8s::io::apimachinery::pkg::apis::meta::v1::StatusDetails::MergeFrom(
          from._internal_details());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.code_ = from._impl_.code_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Status::CopyFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Status::IsInitialized() const {
  return true;
}

void Status::InternalSwap(Status* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.status_, lhs_arena,
      &other->_impl_.status_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.reason_, lhs_arena,
      &other->_impl_.reason_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Status, _impl_.code_)
      + sizeof(Status::_impl_.code_)
      - PROTOBUF_FIELD_OFFSET(Status, _impl_.metadata_)>(
          reinterpret_cast<char*>(&_impl_.metadata_),
          reinterpret_cast<char*>(&other->_impl_.metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Status::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_getter, &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_once,
      file_level_metadata_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto[37]);
}

// ===================================================================

class StatusCause::_Internal {
 public:
  using HasBits = decltype(std::declval<StatusCause>()._impl_._has_bits_);
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_field(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

StatusCause::StatusCause(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.StatusCause)
}
StatusCause::StatusCause(const StatusCause& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StatusCause* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reason_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.field_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_reason()) {
    _this->_impl_.reason_.Set(from._internal_reason(), 
      _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_message()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _impl_.field_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.field_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_field()) {
    _this->_impl_.field_.Set(from._internal_field(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.StatusCause)
}

inline void StatusCause::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reason_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.field_){}
  };
  _impl_.reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.field_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.field_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StatusCause::~StatusCause() {
  // @@protoc_insertion_point(destructor:k8s.io.apimachinery.pkg.apis.meta.v1.StatusCause)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StatusCause::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.reason_.Destroy();
  _impl_.message_.Destroy();
  _impl_.field_.Destroy();
}

void StatusCause::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StatusCause::Clear() {
// @@protoc_insertion_point(message_clear_start:k8s.io.apimachinery.pkg.apis.meta.v1.StatusCause)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.reason_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.message_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.field_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatusCause::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes reason = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_reason();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes field = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_field();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StatusCause::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:k8s.io.apimachinery.pkg.apis.meta.v1.StatusCause)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes reason = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_reason(), target);
  }

  // optional bytes message = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_message(), target);
  }

  // optional bytes field = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_field(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:k8s.io.apimachinery.pkg.apis.meta.v1.StatusCause)
  return target;
}

size_t StatusCause::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:k8s.io.apimachinery.pkg.apis.meta.v1.StatusCause)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes reason = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_reason());
    }

    // optional bytes message = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_message());
    }

    // optional bytes field = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_field());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StatusCause::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StatusCause::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StatusCause::GetClassData() const { return &_class_data_; }


void StatusCause::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StatusCause*>(&to_msg);
  auto& from = static_cast<const StatusCause&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.StatusCause)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_reason(from._internal_reason());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_field(from._internal_field());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StatusCause::CopyFrom(const StatusCause& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.StatusCause)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusCause::IsInitialized() const {
  return true;
}

void StatusCause::InternalSwap(StatusCause* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.reason_, lhs_arena,
      &other->_impl_.reason_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.field_, lhs_arena,
      &other->_impl_.field_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata StatusCause::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_getter, &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_once,
      file_level_metadata_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto[38]);
}

// ===================================================================

class StatusDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<StatusDetails>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_group(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_retryafterseconds(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

StatusDetails::StatusDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.StatusDetails)
}
StatusDetails::StatusDetails(const StatusDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StatusDetails* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.causes_){from._impl_.causes_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.group_){}
    , decltype(_impl_.kind_){}
    , decltype(_impl_.uid_){}
    , decltype(_impl_.retryafterseconds_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.group_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.group_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_group()) {
    _this->_impl_.group_.Set(from._internal_group(), 
      _this->GetArenaForAllocation());
  }
  _impl_.kind_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.kind_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_kind()) {
    _this->_impl_.kind_.Set(from._internal_kind(), 
      _this->GetArenaForAllocation());
  }
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_uid()) {
    _this->_impl_.uid_.Set(from._internal_uid(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.retryafterseconds_ = from._impl_.retryafterseconds_;
  // @@protoc_insertion_point(copy_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.StatusDetails)
}

inline void StatusDetails::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.causes_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.group_){}
    , decltype(_impl_.kind_){}
    , decltype(_impl_.uid_){}
    , decltype(_impl_.retryafterseconds_){0}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.group_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.group_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.kind_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.kind_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StatusDetails::~StatusDetails() {
  // @@protoc_insertion_point(destructor:k8s.io.apimachinery.pkg.apis.meta.v1.StatusDetails)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StatusDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.causes_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  _impl_.group_.Destroy();
  _impl_.kind_.Destroy();
  _impl_.uid_.Destroy();
}

void StatusDetails::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StatusDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:k8s.io.apimachinery.pkg.apis.meta.v1.StatusDetails)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.causes_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.group_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.kind_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.uid_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.retryafterseconds_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatusDetails::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes group = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_group();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes kind = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_kind();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .k8s.io.apimachinery.pkg.apis.meta.v1.StatusCause causes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_causes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 retryAfterSeconds = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_retryafterseconds(&has_bits);
          _impl_.retryafterseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes uid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StatusDetails::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:k8s.io.apimachinery.pkg.apis.meta.v1.StatusDetails)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional bytes group = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_group(), target);
  }

  // optional bytes kind = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_kind(), target);
  }

  // repeated .k8s.io.apimachinery.pkg.apis.meta.v1.StatusCause causes = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_causes_size()); i < n; i++) {
    const auto& repfield = this->_internal_causes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional int32 retryAfterSeconds = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_retryafterseconds(), target);
  }

  // optional bytes uid = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:k8s.io.apimachinery.pkg.apis.meta.v1.StatusDetails)
  return target;
}

size_t StatusDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:k8s.io.apimachinery.pkg.apis.meta.v1.StatusDetails)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .k8s.io.apimachinery.pkg.apis.meta.v1.StatusCause causes = 4;
  total_size += 1UL * this->_internal_causes_size();
  for (const auto& msg : this->_impl_.causes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_name());
    }

    // optional bytes group = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_group());
    }

    // optional bytes kind = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_kind());
    }

    // optional bytes uid = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_uid());
    }

    // optional int32 retryAfterSeconds = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_retryafterseconds());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StatusDetails::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StatusDetails::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StatusDetails::GetClassData() const { return &_class_data_; }


void StatusDetails::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StatusDetails*>(&to_msg);
  auto& from = static_cast<const StatusDetails&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.StatusDetails)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.causes_.MergeFrom(from._impl_.causes_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_group(from._internal_group());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_kind(from._internal_kind());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_uid(from._internal_uid());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.retryafterseconds_ = from._impl_.retryafterseconds_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StatusDetails::CopyFrom(const StatusDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.StatusDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusDetails::IsInitialized() const {
  return true;
}

void StatusDetails::InternalSwap(StatusDetails* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.causes_.InternalSwap(&other->_impl_.causes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.group_, lhs_arena,
      &other->_impl_.group_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.kind_, lhs_arena,
      &other->_impl_.kind_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uid_, lhs_arena,
      &other->_impl_.uid_, rhs_arena
  );
  swap(_impl_.retryafterseconds_, other->_impl_.retryafterseconds_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StatusDetails::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_getter, &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_once,
      file_level_metadata_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto[39]);
}

// ===================================================================

class TableOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<TableOptions>()._impl_._has_bits_);
  static void set_has_includeobject(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TableOptions::TableOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.TableOptions)
}
TableOptions::TableOptions(const TableOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TableOptions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.includeobject_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.includeobject_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.includeobject_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_includeobject()) {
    _this->_impl_.includeobject_.Set(from._internal_includeobject(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.TableOptions)
}

inline void TableOptions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.includeobject_){}
  };
  _impl_.includeobject_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.includeobject_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TableOptions::~TableOptions() {
  // @@protoc_insertion_point(destructor:k8s.io.apimachinery.pkg.apis.meta.v1.TableOptions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TableOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.includeobject_.Destroy();
}

void TableOptions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TableOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:k8s.io.apimachinery.pkg.apis.meta.v1.TableOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.includeobject_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes includeObject = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_includeobject();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TableOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:k8s.io.apimachinery.pkg.apis.meta.v1.TableOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes includeObject = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_includeobject(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:k8s.io.apimachinery.pkg.apis.meta.v1.TableOptions)
  return target;
}

size_t TableOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:k8s.io.apimachinery.pkg.apis.meta.v1.TableOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes includeObject = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_includeobject());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TableOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TableOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TableOptions::GetClassData() const { return &_class_data_; }


void TableOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TableOptions*>(&to_msg);
  auto& from = static_cast<const TableOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.TableOptions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_includeobject()) {
    _this->_internal_set_includeobject(from._internal_includeobject());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TableOptions::CopyFrom(const TableOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.TableOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableOptions::IsInitialized() const {
  return true;
}

void TableOptions::InternalSwap(TableOptions* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.includeobject_, lhs_arena,
      &other->_impl_.includeobject_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TableOptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_getter, &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_once,
      file_level_metadata_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto[40]);
}

// ===================================================================

class Time::_Internal {
 public:
  using HasBits = decltype(std::declval<Time>()._impl_._has_bits_);
  static void set_has_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_nanos(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Time::Time(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.Time)
}
Time::Time(const Time& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Time* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.seconds_){}
    , decltype(_impl_.nanos_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.seconds_, &from._impl_.seconds_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.nanos_) -
    reinterpret_cast<char*>(&_impl_.seconds_)) + sizeof(_impl_.nanos_));
  // @@protoc_insertion_point(copy_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.Time)
}

inline void Time::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.seconds_){int64_t{0}}
    , decltype(_impl_.nanos_){0}
  };
}

Time::~Time() {
  // @@protoc_insertion_point(destructor:k8s.io.apimachinery.pkg.apis.meta.v1.Time)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Time::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Time::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Time::Clear() {
// @@protoc_insertion_point(message_clear_start:k8s.io.apimachinery.pkg.apis.meta.v1.Time)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.seconds_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.nanos_) -
        reinterpret_cast<char*>(&_impl_.seconds_)) + sizeof(_impl_.nanos_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Time::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 seconds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_seconds(&has_bits);
          _impl_.seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 nanos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_nanos(&has_bits);
          _impl_.nanos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Time::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:k8s.io.apimachinery.pkg.apis.meta.v1.Time)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 seconds = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_seconds(), target);
  }

  // optional int32 nanos = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_nanos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:k8s.io.apimachinery.pkg.apis.meta.v1.Time)
  return target;
}

size_t Time::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:k8s.io.apimachinery.pkg.apis.meta.v1.Time)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 seconds = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seconds());
    }

    // optional int32 nanos = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_nanos());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Time::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Time::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Time::GetClassData() const { return &_class_data_; }


void Time::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Time*>(&to_msg);
  auto& from = static_cast<const Time&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.Time)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.seconds_ = from._impl_.seconds_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.nanos_ = from._impl_.nanos_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Time::CopyFrom(const Time& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.Time)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Time::IsInitialized() const {
  return true;
}

void Time::InternalSwap(Time* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Time, _impl_.nanos_)
      + sizeof(Time::_impl_.nanos_)
      - PROTOBUF_FIELD_OFFSET(Time, _impl_.seconds_)>(
          reinterpret_cast<char*>(&_impl_.seconds_),
          reinterpret_cast<char*>(&other->_impl_.seconds_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Time::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_getter, &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_once,
      file_level_metadata_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto[41]);
}

// ===================================================================

class Timestamp::_Internal {
 public:
  using HasBits = decltype(std::declval<Timestamp>()._impl_._has_bits_);
  static void set_has_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_nanos(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Timestamp::Timestamp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.Timestamp)
}
Timestamp::Timestamp(const Timestamp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Timestamp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.seconds_){}
    , decltype(_impl_.nanos_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.seconds_, &from._impl_.seconds_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.nanos_) -
    reinterpret_cast<char*>(&_impl_.seconds_)) + sizeof(_impl_.nanos_));
  // @@protoc_insertion_point(copy_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.Timestamp)
}

inline void Timestamp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.seconds_){int64_t{0}}
    , decltype(_impl_.nanos_){0}
  };
}

Timestamp::~Timestamp() {
  // @@protoc_insertion_point(destructor:k8s.io.apimachinery.pkg.apis.meta.v1.Timestamp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Timestamp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Timestamp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Timestamp::Clear() {
// @@protoc_insertion_point(message_clear_start:k8s.io.apimachinery.pkg.apis.meta.v1.Timestamp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.seconds_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.nanos_) -
        reinterpret_cast<char*>(&_impl_.seconds_)) + sizeof(_impl_.nanos_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Timestamp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 seconds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_seconds(&has_bits);
          _impl_.seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 nanos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_nanos(&has_bits);
          _impl_.nanos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Timestamp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:k8s.io.apimachinery.pkg.apis.meta.v1.Timestamp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 seconds = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_seconds(), target);
  }

  // optional int32 nanos = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_nanos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:k8s.io.apimachinery.pkg.apis.meta.v1.Timestamp)
  return target;
}

size_t Timestamp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:k8s.io.apimachinery.pkg.apis.meta.v1.Timestamp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 seconds = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seconds());
    }

    // optional int32 nanos = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_nanos());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Timestamp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Timestamp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Timestamp::GetClassData() const { return &_class_data_; }


void Timestamp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Timestamp*>(&to_msg);
  auto& from = static_cast<const Timestamp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.Timestamp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.seconds_ = from._impl_.seconds_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.nanos_ = from._impl_.nanos_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Timestamp::CopyFrom(const Timestamp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.Timestamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Timestamp::IsInitialized() const {
  return true;
}

void Timestamp::InternalSwap(Timestamp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Timestamp, _impl_.nanos_)
      + sizeof(Timestamp::_impl_.nanos_)
      - PROTOBUF_FIELD_OFFSET(Timestamp, _impl_.seconds_)>(
          reinterpret_cast<char*>(&_impl_.seconds_),
          reinterpret_cast<char*>(&other->_impl_.seconds_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Timestamp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_getter, &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_once,
      file_level_metadata_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto[42]);
}

// ===================================================================

class TypeMeta::_Internal {
 public:
  using HasBits = decltype(std::declval<TypeMeta>()._impl_._has_bits_);
  static void set_has_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_apiversion(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TypeMeta::TypeMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.TypeMeta)
}
TypeMeta::TypeMeta(const TypeMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TypeMeta* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kind_){}
    , decltype(_impl_.apiversion_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.kind_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.kind_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_kind()) {
    _this->_impl_.kind_.Set(from._internal_kind(), 
      _this->GetArenaForAllocation());
  }
  _impl_.apiversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.apiversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_apiversion()) {
    _this->_impl_.apiversion_.Set(from._internal_apiversion(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.TypeMeta)
}

inline void TypeMeta::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kind_){}
    , decltype(_impl_.apiversion_){}
  };
  _impl_.kind_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.kind_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.apiversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.apiversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TypeMeta::~TypeMeta() {
  // @@protoc_insertion_point(destructor:k8s.io.apimachinery.pkg.apis.meta.v1.TypeMeta)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TypeMeta::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.kind_.Destroy();
  _impl_.apiversion_.Destroy();
}

void TypeMeta::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TypeMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:k8s.io.apimachinery.pkg.apis.meta.v1.TypeMeta)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.kind_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.apiversion_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TypeMeta::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes kind = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_kind();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes apiVersion = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_apiversion();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TypeMeta::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:k8s.io.apimachinery.pkg.apis.meta.v1.TypeMeta)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes kind = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_kind(), target);
  }

  // optional bytes apiVersion = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_apiversion(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:k8s.io.apimachinery.pkg.apis.meta.v1.TypeMeta)
  return target;
}

size_t TypeMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:k8s.io.apimachinery.pkg.apis.meta.v1.TypeMeta)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes kind = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_kind());
    }

    // optional bytes apiVersion = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_apiversion());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TypeMeta::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TypeMeta::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TypeMeta::GetClassData() const { return &_class_data_; }


void TypeMeta::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TypeMeta*>(&to_msg);
  auto& from = static_cast<const TypeMeta&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.TypeMeta)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_kind(from._internal_kind());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_apiversion(from._internal_apiversion());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TypeMeta::CopyFrom(const TypeMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.TypeMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TypeMeta::IsInitialized() const {
  return true;
}

void TypeMeta::InternalSwap(TypeMeta* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.kind_, lhs_arena,
      &other->_impl_.kind_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.apiversion_, lhs_arena,
      &other->_impl_.apiversion_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TypeMeta::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_getter, &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_once,
      file_level_metadata_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto[43]);
}

// ===================================================================

class UpdateOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<UpdateOptions>()._impl_._has_bits_);
  static void set_has_fieldmanager(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fieldvalidation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

UpdateOptions::UpdateOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.UpdateOptions)
}
UpdateOptions::UpdateOptions(const UpdateOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateOptions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dryrun_){from._impl_.dryrun_}
    , decltype(_impl_.fieldmanager_){}
    , decltype(_impl_.fieldvalidation_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.fieldmanager_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fieldmanager_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_fieldmanager()) {
    _this->_impl_.fieldmanager_.Set(from._internal_fieldmanager(), 
      _this->GetArenaForAllocation());
  }
  _impl_.fieldvalidation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fieldvalidation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_fieldvalidation()) {
    _this->_impl_.fieldvalidation_.Set(from._internal_fieldvalidation(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.UpdateOptions)
}

inline void UpdateOptions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dryrun_){arena}
    , decltype(_impl_.fieldmanager_){}
    , decltype(_impl_.fieldvalidation_){}
  };
  _impl_.fieldmanager_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fieldmanager_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fieldvalidation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fieldvalidation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UpdateOptions::~UpdateOptions() {
  // @@protoc_insertion_point(destructor:k8s.io.apimachinery.pkg.apis.meta.v1.UpdateOptions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dryrun_.~RepeatedPtrField();
  _impl_.fieldmanager_.Destroy();
  _impl_.fieldvalidation_.Destroy();
}

void UpdateOptions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:k8s.io.apimachinery.pkg.apis.meta.v1.UpdateOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dryrun_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.fieldmanager_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.fieldvalidation_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string dryRun = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_dryrun();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "k8s.io.apimachinery.pkg.apis.meta.v1.UpdateOptions.dryRun");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bytes fieldManager = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_fieldmanager();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes fieldValidation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_fieldvalidation();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:k8s.io.apimachinery.pkg.apis.meta.v1.UpdateOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string dryRun = 1;
  for (int i = 0, n = this->_internal_dryrun_size(); i < n; i++) {
    const auto& s = this->_internal_dryrun(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "k8s.io.apimachinery.pkg.apis.meta.v1.UpdateOptions.dryRun");
    target = stream->WriteString(1, s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes fieldManager = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_fieldmanager(), target);
  }

  // optional bytes fieldValidation = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_fieldvalidation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:k8s.io.apimachinery.pkg.apis.meta.v1.UpdateOptions)
  return target;
}

size_t UpdateOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:k8s.io.apimachinery.pkg.apis.meta.v1.UpdateOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string dryRun = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.dryrun_.size());
  for (int i = 0, n = _impl_.dryrun_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.dryrun_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes fieldManager = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_fieldmanager());
    }

    // optional bytes fieldValidation = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_fieldvalidation());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateOptions::GetClassData() const { return &_class_data_; }


void UpdateOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateOptions*>(&to_msg);
  auto& from = static_cast<const UpdateOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.UpdateOptions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.dryrun_.MergeFrom(from._impl_.dryrun_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_fieldmanager(from._internal_fieldmanager());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_fieldvalidation(from._internal_fieldvalidation());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateOptions::CopyFrom(const UpdateOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.UpdateOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateOptions::IsInitialized() const {
  return true;
}

void UpdateOptions::InternalSwap(UpdateOptions* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.dryrun_.InternalSwap(&other->_impl_.dryrun_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fieldmanager_, lhs_arena,
      &other->_impl_.fieldmanager_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fieldvalidation_, lhs_arena,
      &other->_impl_.fieldvalidation_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateOptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_getter, &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_once,
      file_level_metadata_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto[44]);
}

// ===================================================================

class Verbs::_Internal {
 public:
};

Verbs::Verbs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.Verbs)
}
Verbs::Verbs(const Verbs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Verbs* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.Verbs)
}

inline void Verbs::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Verbs::~Verbs() {
  // @@protoc_insertion_point(destructor:k8s.io.apimachinery.pkg.apis.meta.v1.Verbs)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Verbs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void Verbs::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Verbs::Clear() {
// @@protoc_insertion_point(message_clear_start:k8s.io.apimachinery.pkg.apis.meta.v1.Verbs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Verbs::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_items();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "k8s.io.apimachinery.pkg.apis.meta.v1.Verbs.items");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Verbs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:k8s.io.apimachinery.pkg.apis.meta.v1.Verbs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string items = 1;
  for (int i = 0, n = this->_internal_items_size(); i < n; i++) {
    const auto& s = this->_internal_items(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "k8s.io.apimachinery.pkg.apis.meta.v1.Verbs.items");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:k8s.io.apimachinery.pkg.apis.meta.v1.Verbs)
  return target;
}

size_t Verbs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:k8s.io.apimachinery.pkg.apis.meta.v1.Verbs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string items = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.items_.size());
  for (int i = 0, n = _impl_.items_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.items_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Verbs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Verbs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Verbs::GetClassData() const { return &_class_data_; }


void Verbs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Verbs*>(&to_msg);
  auto& from = static_cast<const Verbs&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.Verbs)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Verbs::CopyFrom(const Verbs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.Verbs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Verbs::IsInitialized() const {
  return true;
}

void Verbs::InternalSwap(Verbs* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Verbs::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_getter, &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_once,
      file_level_metadata_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto[45]);
}

// ===================================================================

class WatchEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<WatchEvent>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::k8s::io::apimachinery::pkg::runtime::RawExtension& object(const WatchEvent* msg);
  static void set_has_object(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::k8s::io::apimachinery::pkg::runtime::RawExtension&
WatchEvent::_Internal::object(const WatchEvent* msg) {
  return *msg->_impl_.object_;
}
void WatchEvent::clear_object() {
  if (_impl_.object_ != nullptr) _impl_.object_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
WatchEvent::WatchEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.WatchEvent)
}
WatchEvent::WatchEvent(const WatchEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WatchEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_){}
    , decltype(_impl_.object_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_type()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_object()) {
    _this->_impl_.object_ = new ::k8s::io::apimachinery::pkg::runtime::RawExtension(*from._impl_.object_);
  }
  // @@protoc_insertion_point(copy_constructor:k8s.io.apimachinery.pkg.apis.meta.v1.WatchEvent)
}

inline void WatchEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_){}
    , decltype(_impl_.object_){nullptr}
  };
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WatchEvent::~WatchEvent() {
  // @@protoc_insertion_point(destructor:k8s.io.apimachinery.pkg.apis.meta.v1.WatchEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WatchEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.type_.Destroy();
  if (this != internal_default_instance()) delete _impl_.object_;
}

void WatchEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WatchEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:k8s.io.apimachinery.pkg.apis.meta.v1.WatchEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.object_ != nullptr);
      _impl_.object_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WatchEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .k8s.io.apimachinery.pkg.runtime.RawExtension object = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_object(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WatchEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:k8s.io.apimachinery.pkg.apis.meta.v1.WatchEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_type(), target);
  }

  // optional .k8s.io.apimachinery.pkg.runtime.RawExtension object = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::object(this),
        _Internal::object(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:k8s.io.apimachinery.pkg.apis.meta.v1.WatchEvent)
  return target;
}

size_t WatchEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:k8s.io.apimachinery.pkg.apis.meta.v1.WatchEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_type());
    }

    // optional .k8s.io.apimachinery.pkg.runtime.RawExtension object = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.object_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WatchEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WatchEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WatchEvent::GetClassData() const { return &_class_data_; }


void WatchEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WatchEvent*>(&to_msg);
  auto& from = static_cast<const WatchEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.WatchEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_type(from._internal_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_object()->::k8s::io::apimachinery::pkg::runtime::RawExtension::MergeFrom(
          from._internal_object());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WatchEvent::CopyFrom(const WatchEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:k8s.io.apimachinery.pkg.apis.meta.v1.WatchEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchEvent::IsInitialized() const {
  return true;
}

void WatchEvent::InternalSwap(WatchEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  swap(_impl_.object_, other->_impl_.object_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WatchEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_getter, &descriptor_table_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto_once,
      file_level_metadata_staging_5fsrc_5fk8s_2eio_5fapimachinery_5fpkg_5fapis_5fmeta_5fv1_5fgenerated_2eproto[46]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace meta
}  // namespace apis
}  // namespace pkg
}  // namespace apimachinery
}  // namespace io
}  // namespace k8s
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::k8s::io::apimachinery::pkg::apis::meta::v1::APIGroup*
Arena::CreateMaybeMessage< ::k8s::io::apimachinery::pkg::apis::meta::v1::APIGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::k8s::io::apimachinery::pkg::apis::meta::v1::APIGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::k8s::io::apimachinery::pkg::apis::meta::v1::APIGroupList*
Arena::CreateMaybeMessage< ::k8s::io::apimachinery::pkg::apis::meta::v1::APIGroupList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::k8s::io::apimachinery::pkg::apis::meta::v1::APIGroupList >(arena);
}
template<> PROTOBUF_NOINLINE ::k8s::io::apimachinery::pkg::apis::meta::v1::APIResource*
Arena::CreateMaybeMessage< ::k8s::io::apimachinery::pkg::apis::meta::v1::APIResource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::k8s::io::apimachinery::pkg::apis::meta::v1::APIResource >(arena);
}
template<> PROTOBUF_NOINLINE ::k8s::io::apimachinery::pkg::apis::meta::v1::APIResourceList*
Arena::CreateMaybeMessage< ::k8s::io::apimachinery::pkg::apis::meta::v1::APIResourceList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::k8s::io::apimachinery::pkg::apis::meta::v1::APIResourceList >(arena);
}
template<> PROTOBUF_NOINLINE ::k8s::io::apimachinery::pkg::apis::meta::v1::APIVersions*
Arena::CreateMaybeMessage< ::k8s::io::apimachinery::pkg::apis::meta::v1::APIVersions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::k8s::io::apimachinery::pkg::apis::meta::v1::APIVersions >(arena);
}
template<> PROTOBUF_NOINLINE ::k8s::io::apimachinery::pkg::apis::meta::v1::ApplyOptions*
Arena::CreateMaybeMessage< ::k8s::io::apimachinery::pkg::apis::meta::v1::ApplyOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::k8s::io::apimachinery::pkg::apis::meta::v1::ApplyOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::k8s::io::apimachinery::pkg::apis::meta::v1::Condition*
Arena::CreateMaybeMessage< ::k8s::io::apimachinery::pkg::apis::meta::v1::Condition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::k8s::io::apimachinery::pkg::apis::meta::v1::Condition >(arena);
}
template<> PROTOBUF_NOINLINE ::k8s::io::apimachinery::pkg::apis::meta::v1::CreateOptions*
Arena::CreateMaybeMessage< ::k8s::io::apimachinery::pkg::apis::meta::v1::CreateOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::k8s::io::apimachinery::pkg::apis::meta::v1::CreateOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::k8s::io::apimachinery::pkg::apis::meta::v1::DeleteOptions*
Arena::CreateMaybeMessage< ::k8s::io::apimachinery::pkg::apis::meta::v1::DeleteOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::k8s::io::apimachinery::pkg::apis::meta::v1::DeleteOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::k8s::io::apimachinery::pkg::apis::meta::v1::Duration*
Arena::CreateMaybeMessage< ::k8s::io::apimachinery::pkg::apis::meta::v1::Duration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::k8s::io::apimachinery::pkg::apis::meta::v1::Duration >(arena);
}
template<> PROTOBUF_NOINLINE ::k8s::io::apimachinery::pkg::apis::meta::v1::FieldsV1*
Arena::CreateMaybeMessage< ::k8s::io::apimachinery::pkg::apis::meta::v1::FieldsV1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::k8s::io::apimachinery::pkg::apis::meta::v1::FieldsV1 >(arena);
}
template<> PROTOBUF_NOINLINE ::k8s::io::apimachinery::pkg::apis::meta::v1::GetOptions*
Arena::CreateMaybeMessage< ::k8s::io::apimachinery::pkg::apis::meta::v1::GetOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::k8s::io::apimachinery::pkg::apis::meta::v1::GetOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::k8s::io::apimachinery::pkg::apis::meta::v1::GroupKind*
Arena::CreateMaybeMessage< ::k8s::io::apimachinery::pkg::apis::meta::v1::GroupKind >(Arena* arena) {
  return Arena::CreateMessageInternal< ::k8s::io::apimachinery::pkg::apis::meta::v1::GroupKind >(arena);
}
template<> PROTOBUF_NOINLINE ::k8s::io::apimachinery::pkg::apis::meta::v1::GroupResource*
Arena::CreateMaybeMessage< ::k8s::io::apimachinery::pkg::apis::meta::v1::GroupResource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::k8s::io::apimachinery::pkg::apis::meta::v1::GroupResource >(arena);
}
template<> PROTOBUF_NOINLINE ::k8s::io::apimachinery::pkg::apis::meta::v1::GroupVersion*
Arena::CreateMaybeMessage< ::k8s::io::apimachinery::pkg::apis::meta::v1::GroupVersion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::k8s::io::apimachinery::pkg::apis::meta::v1::GroupVersion >(arena);
}
template<> PROTOBUF_NOINLINE ::k8s::io::apimachinery::pkg::apis::meta::v1::GroupVersionForDiscovery*
Arena::CreateMaybeMessage< ::k8s::io::apimachinery::pkg::apis::meta::v1::GroupVersionForDiscovery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::k8s::io::apimachinery::pkg::apis::meta::v1::GroupVersionForDiscovery >(arena);
}
template<> PROTOBUF_NOINLINE ::k8s::io::apimachinery::pkg::apis::meta::v1::GroupVersionKind*
Arena::CreateMaybeMessage< ::k8s::io::apimachinery::pkg::apis::meta::v1::GroupVersionKind >(Arena* arena) {
  return Arena::CreateMessageInternal< ::k8s::io::apimachinery::pkg::apis::meta::v1::GroupVersionKind >(arena);
}
template<> PROTOBUF_NOINLINE ::k8s::io::apimachinery::pkg::apis::meta::v1::GroupVersionResource*
Arena::CreateMaybeMessage< ::k8s::io::apimachinery::pkg::apis::meta::v1::GroupVersionResource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::k8s::io::apimachinery::pkg::apis::meta::v1::GroupVersionResource >(arena);
}
template<> PROTOBUF_NOINLINE ::k8s::io::apimachinery::pkg::apis::meta::v1::LabelSelector_MatchLabelsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::k8s::io::apimachinery::pkg::apis::meta::v1::LabelSelector_MatchLabelsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::k8s::io::apimachinery::pkg::apis::meta::v1::LabelSelector_MatchLabelsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::k8s::io::apimachinery::pkg::apis::meta::v1::LabelSelector*
Arena::CreateMaybeMessage< ::k8s::io::apimachinery::pkg::apis::meta::v1::LabelSelector >(Arena* arena) {
  return Arena::CreateMessageInternal< ::k8s::io::apimachinery::pkg::apis::meta::v1::LabelSelector >(arena);
}
template<> PROTOBUF_NOINLINE ::k8s::io::apimachinery::pkg::apis::meta::v1::LabelSelectorRequirement*
Arena::CreateMaybeMessage< ::k8s::io::apimachinery::pkg::apis::meta::v1::LabelSelectorRequirement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::k8s::io::apimachinery::pkg::apis::meta::v1::LabelSelectorRequirement >(arena);
}
template<> PROTOBUF_NOINLINE ::k8s::io::apimachinery::pkg::apis::meta::v1::List*
Arena::CreateMaybeMessage< ::k8s::io::apimachinery::pkg::apis::meta::v1::List >(Arena* arena) {
  return Arena::CreateMessageInternal< ::k8s::io::apimachinery::pkg::apis::meta::v1::List >(arena);
}
template<> PROTOBUF_NOINLINE ::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta*
Arena::CreateMaybeMessage< ::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::k8s::io::apimachinery::pkg::apis::meta::v1::ListOptions*
Arena::CreateMaybeMessage< ::k8s::io::apimachinery::pkg::apis::meta::v1::ListOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::k8s::io::apimachinery::pkg::apis::meta::v1::ListOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::k8s::io::apimachinery::pkg::apis::meta::v1::ManagedFieldsEntry*
Arena::CreateMaybeMessage< ::k8s::io::apimachinery::pkg::apis::meta::v1::ManagedFieldsEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::k8s::io::apimachinery::pkg::apis::meta::v1::ManagedFieldsEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::k8s::io::apimachinery::pkg::apis::meta::v1::MicroTime*
Arena::CreateMaybeMessage< ::k8s::io::apimachinery::pkg::apis::meta::v1::MicroTime >(Arena* arena) {
  return Arena::CreateMessageInternal< ::k8s::io::apimachinery::pkg::apis::meta::v1::MicroTime >(arena);
}
template<> PROTOBUF_NOINLINE ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta_LabelsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta_LabelsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta_LabelsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta_AnnotationsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta_AnnotationsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta_AnnotationsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta*
Arena::CreateMaybeMessage< ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::k8s::io::apimachinery::pkg::apis::meta::v1::OwnerReference*
Arena::CreateMaybeMessage< ::k8s::io::apimachinery::pkg::apis::meta::v1::OwnerReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::k8s::io::apimachinery::pkg::apis::meta::v1::OwnerReference >(arena);
}
template<> PROTOBUF_NOINLINE ::k8s::io::apimachinery::pkg::apis::meta::v1::PartialObjectMetadata*
Arena::CreateMaybeMessage< ::k8s::io::apimachinery::pkg::apis::meta::v1::PartialObjectMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::k8s::io::apimachinery::pkg::apis::meta::v1::PartialObjectMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::k8s::io::apimachinery::pkg::apis::meta::v1::PartialObjectMetadataList*
Arena::CreateMaybeMessage< ::k8s::io::apimachinery::pkg::apis::meta::v1::PartialObjectMetadataList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::k8s::io::apimachinery::pkg::apis::meta::v1::PartialObjectMetadataList >(arena);
}
template<> PROTOBUF_NOINLINE ::k8s::io::apimachinery::pkg::apis::meta::v1::Patch*
Arena::CreateMaybeMessage< ::k8s::io::apimachinery::pkg::apis::meta::v1::Patch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::k8s::io::apimachinery::pkg::apis::meta::v1::Patch >(arena);
}
template<> PROTOBUF_NOINLINE ::k8s::io::apimachinery::pkg::apis::meta::v1::PatchOptions*
Arena::CreateMaybeMessage< ::k8s::io::apimachinery::pkg::apis::meta::v1::PatchOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::k8s::io::apimachinery::pkg::apis::meta::v1::PatchOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::k8s::io::apimachinery::pkg::apis::meta::v1::Preconditions*
Arena::CreateMaybeMessage< ::k8s::io::apimachinery::pkg::apis::meta::v1::Preconditions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::k8s::io::apimachinery::pkg::apis::meta::v1::Preconditions >(arena);
}
template<> PROTOBUF_NOINLINE ::k8s::io::apimachinery::pkg::apis::meta::v1::RootPaths*
Arena::CreateMaybeMessage< ::k8s::io::apimachinery::pkg::apis::meta::v1::RootPaths >(Arena* arena) {
  return Arena::CreateMessageInternal< ::k8s::io::apimachinery::pkg::apis::meta::v1::RootPaths >(arena);
}
template<> PROTOBUF_NOINLINE ::k8s::io::apimachinery::pkg::apis::meta::v1::ServerAddressByClientCIDR*
Arena::CreateMaybeMessage< ::k8s::io::apimachinery::pkg::apis::meta::v1::ServerAddressByClientCIDR >(Arena* arena) {
  return Arena::CreateMessageInternal< ::k8s::io::apimachinery::pkg::apis::meta::v1::ServerAddressByClientCIDR >(arena);
}
template<> PROTOBUF_NOINLINE ::k8s::io::apimachinery::pkg::apis::meta::v1::Status*
Arena::CreateMaybeMessage< ::k8s::io::apimachinery::pkg::apis::meta::v1::Status >(Arena* arena) {
  return Arena::CreateMessageInternal< ::k8s::io::apimachinery::pkg::apis::meta::v1::Status >(arena);
}
template<> PROTOBUF_NOINLINE ::k8s::io::apimachinery::pkg::apis::meta::v1::StatusCause*
Arena::CreateMaybeMessage< ::k8s::io::apimachinery::pkg::apis::meta::v1::StatusCause >(Arena* arena) {
  return Arena::CreateMessageInternal< ::k8s::io::apimachinery::pkg::apis::meta::v1::StatusCause >(arena);
}
template<> PROTOBUF_NOINLINE ::k8s::io::apimachinery::pkg::apis::meta::v1::StatusDetails*
Arena::CreateMaybeMessage< ::k8s::io::apimachinery::pkg::apis::meta::v1::StatusDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::k8s::io::apimachinery::pkg::apis::meta::v1::StatusDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::k8s::io::apimachinery::pkg::apis::meta::v1::TableOptions*
Arena::CreateMaybeMessage< ::k8s::io::apimachinery::pkg::apis::meta::v1::TableOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::k8s::io::apimachinery::pkg::apis::meta::v1::TableOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::k8s::io::apimachinery::pkg::apis::meta::v1::Time*
Arena::CreateMaybeMessage< ::k8s::io::apimachinery::pkg::apis::meta::v1::Time >(Arena* arena) {
  return Arena::CreateMessageInternal< ::k8s::io::apimachinery::pkg::apis::meta::v1::Time >(arena);
}
template<> PROTOBUF_NOINLINE ::k8s::io::apimachinery::pkg::apis::meta::v1::Timestamp*
Arena::CreateMaybeMessage< ::k8s::io::apimachinery::pkg::apis::meta::v1::Timestamp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::k8s::io::apimachinery::pkg::apis::meta::v1::Timestamp >(arena);
}
template<> PROTOBUF_NOINLINE ::k8s::io::apimachinery::pkg::apis::meta::v1::TypeMeta*
Arena::CreateMaybeMessage< ::k8s::io::apimachinery::pkg::apis::meta::v1::TypeMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::k8s::io::apimachinery::pkg::apis::meta::v1::TypeMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::k8s::io::apimachinery::pkg::apis::meta::v1::UpdateOptions*
Arena::CreateMaybeMessage< ::k8s::io::apimachinery::pkg::apis::meta::v1::UpdateOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::k8s::io::apimachinery::pkg::apis::meta::v1::UpdateOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::k8s::io::apimachinery::pkg::apis::meta::v1::Verbs*
Arena::CreateMaybeMessage< ::k8s::io::apimachinery::pkg::apis::meta::v1::Verbs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::k8s::io::apimachinery::pkg::apis::meta::v1::Verbs >(arena);
}
template<> PROTOBUF_NOINLINE ::k8s::io::apimachinery::pkg::apis::meta::v1::WatchEvent*
Arena::CreateMaybeMessage< ::k8s::io::apimachinery::pkg::apis::meta::v1::WatchEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::k8s::io::apimachinery::pkg::apis::meta::v1::WatchEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
