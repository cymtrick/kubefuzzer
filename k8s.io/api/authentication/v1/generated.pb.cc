// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: k8s.io/api/authentication/v1/generated.proto

#include "k8s.io/api/authentication/v1/generated.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace k8s {
namespace io {
namespace api {
namespace authentication {
namespace v1 {
PROTOBUF_CONSTEXPR BoundObjectReference::BoundObjectReference(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.kind_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.apiversion_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct BoundObjectReferenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BoundObjectReferenceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BoundObjectReferenceDefaultTypeInternal() {}
  union {
    BoundObjectReference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BoundObjectReferenceDefaultTypeInternal _BoundObjectReference_default_instance_;
PROTOBUF_CONSTEXPR ExtraValue::ExtraValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExtraValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExtraValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExtraValueDefaultTypeInternal() {}
  union {
    ExtraValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExtraValueDefaultTypeInternal _ExtraValue_default_instance_;
PROTOBUF_CONSTEXPR SelfSubjectReview::SelfSubjectReview(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.metadata_)*/nullptr
  , /*decltype(_impl_.status_)*/nullptr} {}
struct SelfSubjectReviewDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SelfSubjectReviewDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SelfSubjectReviewDefaultTypeInternal() {}
  union {
    SelfSubjectReview _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SelfSubjectReviewDefaultTypeInternal _SelfSubjectReview_default_instance_;
PROTOBUF_CONSTEXPR SelfSubjectReviewStatus::SelfSubjectReviewStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.userinfo_)*/nullptr} {}
struct SelfSubjectReviewStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SelfSubjectReviewStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SelfSubjectReviewStatusDefaultTypeInternal() {}
  union {
    SelfSubjectReviewStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SelfSubjectReviewStatusDefaultTypeInternal _SelfSubjectReviewStatus_default_instance_;
PROTOBUF_CONSTEXPR TokenRequest::TokenRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.metadata_)*/nullptr
  , /*decltype(_impl_.spec_)*/nullptr
  , /*decltype(_impl_.status_)*/nullptr} {}
struct TokenRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TokenRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TokenRequestDefaultTypeInternal() {}
  union {
    TokenRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TokenRequestDefaultTypeInternal _TokenRequest_default_instance_;
PROTOBUF_CONSTEXPR TokenRequestSpec::TokenRequestSpec(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.audiences_)*/{}
  , /*decltype(_impl_.boundobjectref_)*/nullptr
  , /*decltype(_impl_.expirationseconds_)*/int64_t{0}} {}
struct TokenRequestSpecDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TokenRequestSpecDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TokenRequestSpecDefaultTypeInternal() {}
  union {
    TokenRequestSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TokenRequestSpecDefaultTypeInternal _TokenRequestSpec_default_instance_;
PROTOBUF_CONSTEXPR TokenRequestStatus::TokenRequestStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.expirationtimestamp_)*/nullptr} {}
struct TokenRequestStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TokenRequestStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TokenRequestStatusDefaultTypeInternal() {}
  union {
    TokenRequestStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TokenRequestStatusDefaultTypeInternal _TokenRequestStatus_default_instance_;
PROTOBUF_CONSTEXPR TokenReview::TokenReview(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.metadata_)*/nullptr
  , /*decltype(_impl_.spec_)*/nullptr
  , /*decltype(_impl_.status_)*/nullptr} {}
struct TokenReviewDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TokenReviewDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TokenReviewDefaultTypeInternal() {}
  union {
    TokenReview _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TokenReviewDefaultTypeInternal _TokenReview_default_instance_;
PROTOBUF_CONSTEXPR TokenReviewSpec::TokenReviewSpec(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.audiences_)*/{}
  , /*decltype(_impl_.token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct TokenReviewSpecDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TokenReviewSpecDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TokenReviewSpecDefaultTypeInternal() {}
  union {
    TokenReviewSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TokenReviewSpecDefaultTypeInternal _TokenReviewSpec_default_instance_;
PROTOBUF_CONSTEXPR TokenReviewStatus::TokenReviewStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.audiences_)*/{}
  , /*decltype(_impl_.error_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_)*/nullptr
  , /*decltype(_impl_.authenticated_)*/false} {}
struct TokenReviewStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TokenReviewStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TokenReviewStatusDefaultTypeInternal() {}
  union {
    TokenReviewStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TokenReviewStatusDefaultTypeInternal _TokenReviewStatus_default_instance_;
PROTOBUF_CONSTEXPR UserInfo_ExtraEntry_DoNotUse::UserInfo_ExtraEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct UserInfo_ExtraEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserInfo_ExtraEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserInfo_ExtraEntry_DoNotUseDefaultTypeInternal() {}
  union {
    UserInfo_ExtraEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserInfo_ExtraEntry_DoNotUseDefaultTypeInternal _UserInfo_ExtraEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR UserInfo::UserInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.groups_)*/{}
  , /*decltype(_impl_.extra_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.username_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct UserInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserInfoDefaultTypeInternal() {}
  union {
    UserInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserInfoDefaultTypeInternal _UserInfo_default_instance_;
}  // namespace v1
}  // namespace authentication
}  // namespace api
}  // namespace io
}  // namespace k8s
static ::_pb::Metadata file_level_metadata_k8s_2eio_2fapi_2fauthentication_2fv1_2fgenerated_2eproto[12];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_k8s_2eio_2fapi_2fauthentication_2fv1_2fgenerated_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_k8s_2eio_2fapi_2fauthentication_2fv1_2fgenerated_2eproto = nullptr;

const uint32_t TableStruct_k8s_2eio_2fapi_2fauthentication_2fv1_2fgenerated_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::k8s::io::api::authentication::v1::BoundObjectReference, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::api::authentication::v1::BoundObjectReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::k8s::io::api::authentication::v1::BoundObjectReference, _impl_.kind_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::api::authentication::v1::BoundObjectReference, _impl_.apiversion_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::api::authentication::v1::BoundObjectReference, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::api::authentication::v1::BoundObjectReference, _impl_.uid_),
  0,
  1,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::k8s::io::api::authentication::v1::ExtraValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::k8s::io::api::authentication::v1::ExtraValue, _impl_.items_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::api::authentication::v1::SelfSubjectReview, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::api::authentication::v1::SelfSubjectReview, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::k8s::io::api::authentication::v1::SelfSubjectReview, _impl_.metadata_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::api::authentication::v1::SelfSubjectReview, _impl_.status_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::k8s::io::api::authentication::v1::SelfSubjectReviewStatus, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::api::authentication::v1::SelfSubjectReviewStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::k8s::io::api::authentication::v1::SelfSubjectReviewStatus, _impl_.userinfo_),
  0,
  PROTOBUF_FIELD_OFFSET(::k8s::io::api::authentication::v1::TokenRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::api::authentication::v1::TokenRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::k8s::io::api::authentication::v1::TokenRequest, _impl_.metadata_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::api::authentication::v1::TokenRequest, _impl_.spec_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::api::authentication::v1::TokenRequest, _impl_.status_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::k8s::io::api::authentication::v1::TokenRequestSpec, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::api::authentication::v1::TokenRequestSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::k8s::io::api::authentication::v1::TokenRequestSpec, _impl_.audiences_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::api::authentication::v1::TokenRequestSpec, _impl_.expirationseconds_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::api::authentication::v1::TokenRequestSpec, _impl_.boundobjectref_),
  ~0u,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::k8s::io::api::authentication::v1::TokenRequestStatus, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::api::authentication::v1::TokenRequestStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::k8s::io::api::authentication::v1::TokenRequestStatus, _impl_.token_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::api::authentication::v1::TokenRequestStatus, _impl_.expirationtimestamp_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::k8s::io::api::authentication::v1::TokenReview, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::api::authentication::v1::TokenReview, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::k8s::io::api::authentication::v1::TokenReview, _impl_.metadata_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::api::authentication::v1::TokenReview, _impl_.spec_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::api::authentication::v1::TokenReview, _impl_.status_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::k8s::io::api::authentication::v1::TokenReviewSpec, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::api::authentication::v1::TokenReviewSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::k8s::io::api::authentication::v1::TokenReviewSpec, _impl_.token_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::api::authentication::v1::TokenReviewSpec, _impl_.audiences_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::k8s::io::api::authentication::v1::TokenReviewStatus, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::api::authentication::v1::TokenReviewStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::k8s::io::api::authentication::v1::TokenReviewStatus, _impl_.authenticated_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::api::authentication::v1::TokenReviewStatus, _impl_.user_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::api::authentication::v1::TokenReviewStatus, _impl_.audiences_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::api::authentication::v1::TokenReviewStatus, _impl_.error_),
  2,
  1,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::k8s::io::api::authentication::v1::UserInfo_ExtraEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::api::authentication::v1::UserInfo_ExtraEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::k8s::io::api::authentication::v1::UserInfo_ExtraEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::api::authentication::v1::UserInfo_ExtraEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::k8s::io::api::authentication::v1::UserInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::api::authentication::v1::UserInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::k8s::io::api::authentication::v1::UserInfo, _impl_.username_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::api::authentication::v1::UserInfo, _impl_.uid_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::api::authentication::v1::UserInfo, _impl_.groups_),
  PROTOBUF_FIELD_OFFSET(::k8s::io::api::authentication::v1::UserInfo, _impl_.extra_),
  0,
  1,
  ~0u,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, -1, sizeof(::k8s::io::api::authentication::v1::BoundObjectReference)},
  { 14, -1, -1, sizeof(::k8s::io::api::authentication::v1::ExtraValue)},
  { 21, 29, -1, sizeof(::k8s::io::api::authentication::v1::SelfSubjectReview)},
  { 31, 38, -1, sizeof(::k8s::io::api::authentication::v1::SelfSubjectReviewStatus)},
  { 39, 48, -1, sizeof(::k8s::io::api::authentication::v1::TokenRequest)},
  { 51, 60, -1, sizeof(::k8s::io::api::authentication::v1::TokenRequestSpec)},
  { 63, 71, -1, sizeof(::k8s::io::api::authentication::v1::TokenRequestStatus)},
  { 73, 82, -1, sizeof(::k8s::io::api::authentication::v1::TokenReview)},
  { 85, 93, -1, sizeof(::k8s::io::api::authentication::v1::TokenReviewSpec)},
  { 95, 105, -1, sizeof(::k8s::io::api::authentication::v1::TokenReviewStatus)},
  { 109, 117, -1, sizeof(::k8s::io::api::authentication::v1::UserInfo_ExtraEntry_DoNotUse)},
  { 119, 129, -1, sizeof(::k8s::io::api::authentication::v1::UserInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::k8s::io::api::authentication::v1::_BoundObjectReference_default_instance_._instance,
  &::k8s::io::api::authentication::v1::_ExtraValue_default_instance_._instance,
  &::k8s::io::api::authentication::v1::_SelfSubjectReview_default_instance_._instance,
  &::k8s::io::api::authentication::v1::_SelfSubjectReviewStatus_default_instance_._instance,
  &::k8s::io::api::authentication::v1::_TokenRequest_default_instance_._instance,
  &::k8s::io::api::authentication::v1::_TokenRequestSpec_default_instance_._instance,
  &::k8s::io::api::authentication::v1::_TokenRequestStatus_default_instance_._instance,
  &::k8s::io::api::authentication::v1::_TokenReview_default_instance_._instance,
  &::k8s::io::api::authentication::v1::_TokenReviewSpec_default_instance_._instance,
  &::k8s::io::api::authentication::v1::_TokenReviewStatus_default_instance_._instance,
  &::k8s::io::api::authentication::v1::_UserInfo_ExtraEntry_DoNotUse_default_instance_._instance,
  &::k8s::io::api::authentication::v1::_UserInfo_default_instance_._instance,
};

const char descriptor_table_protodef_k8s_2eio_2fapi_2fauthentication_2fv1_2fgenerated_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n,k8s.io/api/authentication/v1/generated"
  ".proto\022\034k8s.io.api.authentication.v1\0324k8"
  "s.io/apimachinery/pkg/apis/meta/v1/gener"
  "ated.proto\032/k8s.io/apimachinery/pkg/runt"
  "ime/generated.proto\0326k8s.io/apimachinery"
  "/pkg/runtime/schema/generated.proto\"S\n\024B"
  "oundObjectReference\022\014\n\004kind\030\001 \001(\t\022\022\n\napi"
  "Version\030\002 \001(\t\022\014\n\004name\030\003 \001(\t\022\013\n\003uID\030\004 \001(\t"
  "\"\033\n\nExtraValue\022\r\n\005items\030\001 \003(\t\"\236\001\n\021SelfSu"
  "bjectReview\022B\n\010metadata\030\001 \001(\01320.k8s.io.a"
  "pimachinery.pkg.apis.meta.v1.ObjectMeta\022"
  "E\n\006status\030\002 \001(\01325.k8s.io.api.authenticat"
  "ion.v1.SelfSubjectReviewStatus\"S\n\027SelfSu"
  "bjectReviewStatus\0228\n\010userInfo\030\001 \001(\0132&.k8"
  "s.io.api.authentication.v1.UserInfo\"\322\001\n\014"
  "TokenRequest\022B\n\010metadata\030\001 \001(\01320.k8s.io."
  "apimachinery.pkg.apis.meta.v1.ObjectMeta"
  "\022<\n\004spec\030\002 \001(\0132..k8s.io.api.authenticati"
  "on.v1.TokenRequestSpec\022@\n\006status\030\003 \001(\01320"
  ".k8s.io.api.authentication.v1.TokenReque"
  "stStatus\"\214\001\n\020TokenRequestSpec\022\021\n\taudienc"
  "es\030\001 \003(\t\022\031\n\021expirationSeconds\030\004 \001(\003\022J\n\016b"
  "oundObjectRef\030\003 \001(\01322.k8s.io.api.authent"
  "ication.v1.BoundObjectReference\"l\n\022Token"
  "RequestStatus\022\r\n\005token\030\001 \001(\t\022G\n\023expirati"
  "onTimestamp\030\002 \001(\0132*.k8s.io.apimachinery."
  "pkg.apis.meta.v1.Time\"\317\001\n\013TokenReview\022B\n"
  "\010metadata\030\001 \001(\01320.k8s.io.apimachinery.pk"
  "g.apis.meta.v1.ObjectMeta\022;\n\004spec\030\002 \001(\0132"
  "-.k8s.io.api.authentication.v1.TokenRevi"
  "ewSpec\022\?\n\006status\030\003 \001(\0132/.k8s.io.api.auth"
  "entication.v1.TokenReviewStatus\"3\n\017Token"
  "ReviewSpec\022\r\n\005token\030\001 \001(\t\022\021\n\taudiences\030\002"
  " \003(\t\"\202\001\n\021TokenReviewStatus\022\025\n\rauthentica"
  "ted\030\001 \001(\010\0224\n\004user\030\002 \001(\0132&.k8s.io.api.aut"
  "hentication.v1.UserInfo\022\021\n\taudiences\030\004 \003"
  "(\t\022\r\n\005error\030\003 \001(\t\"\323\001\n\010UserInfo\022\020\n\010userna"
  "me\030\001 \001(\t\022\013\n\003uid\030\002 \001(\t\022\016\n\006groups\030\003 \003(\t\022@\n"
  "\005extra\030\004 \003(\01321.k8s.io.api.authentication"
  ".v1.UserInfo.ExtraEntry\032V\n\nExtraEntry\022\013\n"
  "\003key\030\001 \001(\t\0227\n\005value\030\002 \001(\0132(.k8s.io.api.a"
  "uthentication.v1.ExtraValue:\0028\001B\036Z\034k8s.i"
  "o/api/authentication/v1"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_k8s_2eio_2fapi_2fauthentication_2fv1_2fgenerated_2eproto_deps[3] = {
  &::descriptor_table_k8s_2eio_2fapimachinery_2fpkg_2fapis_2fmeta_2fv1_2fgenerated_2eproto,
  &::descriptor_table_k8s_2eio_2fapimachinery_2fpkg_2fruntime_2fgenerated_2eproto,
  &::descriptor_table_k8s_2eio_2fapimachinery_2fpkg_2fruntime_2fschema_2fgenerated_2eproto,
};
static ::_pbi::once_flag descriptor_table_k8s_2eio_2fapi_2fauthentication_2fv1_2fgenerated_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_k8s_2eio_2fapi_2fauthentication_2fv1_2fgenerated_2eproto = {
    false, false, 1703, descriptor_table_protodef_k8s_2eio_2fapi_2fauthentication_2fv1_2fgenerated_2eproto,
    "k8s.io/api/authentication/v1/generated.proto",
    &descriptor_table_k8s_2eio_2fapi_2fauthentication_2fv1_2fgenerated_2eproto_once, descriptor_table_k8s_2eio_2fapi_2fauthentication_2fv1_2fgenerated_2eproto_deps, 3, 12,
    schemas, file_default_instances, TableStruct_k8s_2eio_2fapi_2fauthentication_2fv1_2fgenerated_2eproto::offsets,
    file_level_metadata_k8s_2eio_2fapi_2fauthentication_2fv1_2fgenerated_2eproto, file_level_enum_descriptors_k8s_2eio_2fapi_2fauthentication_2fv1_2fgenerated_2eproto,
    file_level_service_descriptors_k8s_2eio_2fapi_2fauthentication_2fv1_2fgenerated_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_k8s_2eio_2fapi_2fauthentication_2fv1_2fgenerated_2eproto_getter() {
  return &descriptor_table_k8s_2eio_2fapi_2fauthentication_2fv1_2fgenerated_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_k8s_2eio_2fapi_2fauthentication_2fv1_2fgenerated_2eproto(&descriptor_table_k8s_2eio_2fapi_2fauthentication_2fv1_2fgenerated_2eproto);
namespace k8s {
namespace io {
namespace api {
namespace authentication {
namespace v1 {

// ===================================================================

class BoundObjectReference::_Internal {
 public:
  using HasBits = decltype(std::declval<BoundObjectReference>()._impl_._has_bits_);
  static void set_has_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_apiversion(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

BoundObjectReference::BoundObjectReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:k8s.io.api.authentication.v1.BoundObjectReference)
}
BoundObjectReference::BoundObjectReference(const BoundObjectReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BoundObjectReference* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kind_){}
    , decltype(_impl_.apiversion_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.uid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.kind_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.kind_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_kind()) {
    _this->_impl_.kind_.Set(from._internal_kind(), 
      _this->GetArenaForAllocation());
  }
  _impl_.apiversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.apiversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_apiversion()) {
    _this->_impl_.apiversion_.Set(from._internal_apiversion(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_uid()) {
    _this->_impl_.uid_.Set(from._internal_uid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:k8s.io.api.authentication.v1.BoundObjectReference)
}

inline void BoundObjectReference::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kind_){}
    , decltype(_impl_.apiversion_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.uid_){}
  };
  _impl_.kind_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.kind_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.apiversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.apiversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BoundObjectReference::~BoundObjectReference() {
  // @@protoc_insertion_point(destructor:k8s.io.api.authentication.v1.BoundObjectReference)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BoundObjectReference::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.kind_.Destroy();
  _impl_.apiversion_.Destroy();
  _impl_.name_.Destroy();
  _impl_.uid_.Destroy();
}

void BoundObjectReference::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BoundObjectReference::Clear() {
// @@protoc_insertion_point(message_clear_start:k8s.io.api.authentication.v1.BoundObjectReference)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.kind_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.apiversion_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.uid_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BoundObjectReference::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string kind = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_kind();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "k8s.io.api.authentication.v1.BoundObjectReference.kind");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string apiVersion = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_apiversion();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "k8s.io.api.authentication.v1.BoundObjectReference.apiVersion");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "k8s.io.api.authentication.v1.BoundObjectReference.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string uID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "k8s.io.api.authentication.v1.BoundObjectReference.uID");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BoundObjectReference::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:k8s.io.api.authentication.v1.BoundObjectReference)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string kind = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_kind().data(), static_cast<int>(this->_internal_kind().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "k8s.io.api.authentication.v1.BoundObjectReference.kind");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_kind(), target);
  }

  // optional string apiVersion = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_apiversion().data(), static_cast<int>(this->_internal_apiversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "k8s.io.api.authentication.v1.BoundObjectReference.apiVersion");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_apiversion(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "k8s.io.api.authentication.v1.BoundObjectReference.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // optional string uID = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_uid().data(), static_cast<int>(this->_internal_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "k8s.io.api.authentication.v1.BoundObjectReference.uID");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:k8s.io.api.authentication.v1.BoundObjectReference)
  return target;
}

size_t BoundObjectReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:k8s.io.api.authentication.v1.BoundObjectReference)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string kind = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_kind());
    }

    // optional string apiVersion = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_apiversion());
    }

    // optional string name = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string uID = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_uid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BoundObjectReference::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BoundObjectReference::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BoundObjectReference::GetClassData() const { return &_class_data_; }


void BoundObjectReference::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BoundObjectReference*>(&to_msg);
  auto& from = static_cast<const BoundObjectReference&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:k8s.io.api.authentication.v1.BoundObjectReference)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_kind(from._internal_kind());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_apiversion(from._internal_apiversion());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_uid(from._internal_uid());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BoundObjectReference::CopyFrom(const BoundObjectReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:k8s.io.api.authentication.v1.BoundObjectReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoundObjectReference::IsInitialized() const {
  return true;
}

void BoundObjectReference::InternalSwap(BoundObjectReference* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.kind_, lhs_arena,
      &other->_impl_.kind_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.apiversion_, lhs_arena,
      &other->_impl_.apiversion_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uid_, lhs_arena,
      &other->_impl_.uid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata BoundObjectReference::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_k8s_2eio_2fapi_2fauthentication_2fv1_2fgenerated_2eproto_getter, &descriptor_table_k8s_2eio_2fapi_2fauthentication_2fv1_2fgenerated_2eproto_once,
      file_level_metadata_k8s_2eio_2fapi_2fauthentication_2fv1_2fgenerated_2eproto[0]);
}

// ===================================================================

class ExtraValue::_Internal {
 public:
};

ExtraValue::ExtraValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:k8s.io.api.authentication.v1.ExtraValue)
}
ExtraValue::ExtraValue(const ExtraValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExtraValue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:k8s.io.api.authentication.v1.ExtraValue)
}

inline void ExtraValue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ExtraValue::~ExtraValue() {
  // @@protoc_insertion_point(destructor:k8s.io.api.authentication.v1.ExtraValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExtraValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void ExtraValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExtraValue::Clear() {
// @@protoc_insertion_point(message_clear_start:k8s.io.api.authentication.v1.ExtraValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExtraValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_items();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "k8s.io.api.authentication.v1.ExtraValue.items");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExtraValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:k8s.io.api.authentication.v1.ExtraValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string items = 1;
  for (int i = 0, n = this->_internal_items_size(); i < n; i++) {
    const auto& s = this->_internal_items(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "k8s.io.api.authentication.v1.ExtraValue.items");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:k8s.io.api.authentication.v1.ExtraValue)
  return target;
}

size_t ExtraValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:k8s.io.api.authentication.v1.ExtraValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string items = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.items_.size());
  for (int i = 0, n = _impl_.items_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.items_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExtraValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExtraValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExtraValue::GetClassData() const { return &_class_data_; }


void ExtraValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExtraValue*>(&to_msg);
  auto& from = static_cast<const ExtraValue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:k8s.io.api.authentication.v1.ExtraValue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExtraValue::CopyFrom(const ExtraValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:k8s.io.api.authentication.v1.ExtraValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtraValue::IsInitialized() const {
  return true;
}

void ExtraValue::InternalSwap(ExtraValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExtraValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_k8s_2eio_2fapi_2fauthentication_2fv1_2fgenerated_2eproto_getter, &descriptor_table_k8s_2eio_2fapi_2fauthentication_2fv1_2fgenerated_2eproto_once,
      file_level_metadata_k8s_2eio_2fapi_2fauthentication_2fv1_2fgenerated_2eproto[1]);
}

// ===================================================================

class SelfSubjectReview::_Internal {
 public:
  using HasBits = decltype(std::declval<SelfSubjectReview>()._impl_._has_bits_);
  static const ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta& metadata(const SelfSubjectReview* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::k8s::io::api::authentication::v1::SelfSubjectReviewStatus& status(const SelfSubjectReview* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta&
SelfSubjectReview::_Internal::metadata(const SelfSubjectReview* msg) {
  return *msg->_impl_.metadata_;
}
const ::k8s::io::api::authentication::v1::SelfSubjectReviewStatus&
SelfSubjectReview::_Internal::status(const SelfSubjectReview* msg) {
  return *msg->_impl_.status_;
}
void SelfSubjectReview::clear_metadata() {
  if (_impl_.metadata_ != nullptr) _impl_.metadata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SelfSubjectReview::SelfSubjectReview(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:k8s.io.api.authentication.v1.SelfSubjectReview)
}
SelfSubjectReview::SelfSubjectReview(const SelfSubjectReview& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SelfSubjectReview* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.status_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    _this->_impl_.metadata_ = new ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta(*from._impl_.metadata_);
  }
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::k8s::io::api::authentication::v1::SelfSubjectReviewStatus(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:k8s.io.api.authentication.v1.SelfSubjectReview)
}

inline void SelfSubjectReview::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.status_){nullptr}
  };
}

SelfSubjectReview::~SelfSubjectReview() {
  // @@protoc_insertion_point(destructor:k8s.io.api.authentication.v1.SelfSubjectReview)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SelfSubjectReview::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.metadata_;
  if (this != internal_default_instance()) delete _impl_.status_;
}

void SelfSubjectReview::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SelfSubjectReview::Clear() {
// @@protoc_insertion_point(message_clear_start:k8s.io.api.authentication.v1.SelfSubjectReview)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.metadata_ != nullptr);
      _impl_.metadata_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.status_ != nullptr);
      _impl_.status_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SelfSubjectReview::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .k8s.io.api.authentication.v1.SelfSubjectReviewStatus status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SelfSubjectReview::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:k8s.io.api.authentication.v1.SelfSubjectReview)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::metadata(this),
        _Internal::metadata(this).GetCachedSize(), target, stream);
  }

  // optional .k8s.io.api.authentication.v1.SelfSubjectReviewStatus status = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:k8s.io.api.authentication.v1.SelfSubjectReview)
  return target;
}

size_t SelfSubjectReview::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:k8s.io.api.authentication.v1.SelfSubjectReview)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.metadata_);
    }

    // optional .k8s.io.api.authentication.v1.SelfSubjectReviewStatus status = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.status_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SelfSubjectReview::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SelfSubjectReview::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SelfSubjectReview::GetClassData() const { return &_class_data_; }


void SelfSubjectReview::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SelfSubjectReview*>(&to_msg);
  auto& from = static_cast<const SelfSubjectReview&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:k8s.io.api.authentication.v1.SelfSubjectReview)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_metadata()->::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta::MergeFrom(
          from._internal_metadata());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_status()->::k8s::io::api::authentication::v1::SelfSubjectReviewStatus::MergeFrom(
          from._internal_status());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SelfSubjectReview::CopyFrom(const SelfSubjectReview& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:k8s.io.api.authentication.v1.SelfSubjectReview)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelfSubjectReview::IsInitialized() const {
  return true;
}

void SelfSubjectReview::InternalSwap(SelfSubjectReview* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SelfSubjectReview, _impl_.status_)
      + sizeof(SelfSubjectReview::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(SelfSubjectReview, _impl_.metadata_)>(
          reinterpret_cast<char*>(&_impl_.metadata_),
          reinterpret_cast<char*>(&other->_impl_.metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SelfSubjectReview::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_k8s_2eio_2fapi_2fauthentication_2fv1_2fgenerated_2eproto_getter, &descriptor_table_k8s_2eio_2fapi_2fauthentication_2fv1_2fgenerated_2eproto_once,
      file_level_metadata_k8s_2eio_2fapi_2fauthentication_2fv1_2fgenerated_2eproto[2]);
}

// ===================================================================

class SelfSubjectReviewStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<SelfSubjectReviewStatus>()._impl_._has_bits_);
  static const ::k8s::io::api::authentication::v1::UserInfo& userinfo(const SelfSubjectReviewStatus* msg);
  static void set_has_userinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::k8s::io::api::authentication::v1::UserInfo&
SelfSubjectReviewStatus::_Internal::userinfo(const SelfSubjectReviewStatus* msg) {
  return *msg->_impl_.userinfo_;
}
SelfSubjectReviewStatus::SelfSubjectReviewStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:k8s.io.api.authentication.v1.SelfSubjectReviewStatus)
}
SelfSubjectReviewStatus::SelfSubjectReviewStatus(const SelfSubjectReviewStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SelfSubjectReviewStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.userinfo_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_userinfo()) {
    _this->_impl_.userinfo_ = new ::k8s::io::api::authentication::v1::UserInfo(*from._impl_.userinfo_);
  }
  // @@protoc_insertion_point(copy_constructor:k8s.io.api.authentication.v1.SelfSubjectReviewStatus)
}

inline void SelfSubjectReviewStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.userinfo_){nullptr}
  };
}

SelfSubjectReviewStatus::~SelfSubjectReviewStatus() {
  // @@protoc_insertion_point(destructor:k8s.io.api.authentication.v1.SelfSubjectReviewStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SelfSubjectReviewStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.userinfo_;
}

void SelfSubjectReviewStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SelfSubjectReviewStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:k8s.io.api.authentication.v1.SelfSubjectReviewStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.userinfo_ != nullptr);
    _impl_.userinfo_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SelfSubjectReviewStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .k8s.io.api.authentication.v1.UserInfo userInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_userinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SelfSubjectReviewStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:k8s.io.api.authentication.v1.SelfSubjectReviewStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .k8s.io.api.authentication.v1.UserInfo userInfo = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::userinfo(this),
        _Internal::userinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:k8s.io.api.authentication.v1.SelfSubjectReviewStatus)
  return target;
}

size_t SelfSubjectReviewStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:k8s.io.api.authentication.v1.SelfSubjectReviewStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .k8s.io.api.authentication.v1.UserInfo userInfo = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.userinfo_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SelfSubjectReviewStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SelfSubjectReviewStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SelfSubjectReviewStatus::GetClassData() const { return &_class_data_; }


void SelfSubjectReviewStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SelfSubjectReviewStatus*>(&to_msg);
  auto& from = static_cast<const SelfSubjectReviewStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:k8s.io.api.authentication.v1.SelfSubjectReviewStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_userinfo()) {
    _this->_internal_mutable_userinfo()->::k8s::io::api::authentication::v1::UserInfo::MergeFrom(
        from._internal_userinfo());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SelfSubjectReviewStatus::CopyFrom(const SelfSubjectReviewStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:k8s.io.api.authentication.v1.SelfSubjectReviewStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelfSubjectReviewStatus::IsInitialized() const {
  return true;
}

void SelfSubjectReviewStatus::InternalSwap(SelfSubjectReviewStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.userinfo_, other->_impl_.userinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SelfSubjectReviewStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_k8s_2eio_2fapi_2fauthentication_2fv1_2fgenerated_2eproto_getter, &descriptor_table_k8s_2eio_2fapi_2fauthentication_2fv1_2fgenerated_2eproto_once,
      file_level_metadata_k8s_2eio_2fapi_2fauthentication_2fv1_2fgenerated_2eproto[3]);
}

// ===================================================================

class TokenRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<TokenRequest>()._impl_._has_bits_);
  static const ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta& metadata(const TokenRequest* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::k8s::io::api::authentication::v1::TokenRequestSpec& spec(const TokenRequest* msg);
  static void set_has_spec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::k8s::io::api::authentication::v1::TokenRequestStatus& status(const TokenRequest* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta&
TokenRequest::_Internal::metadata(const TokenRequest* msg) {
  return *msg->_impl_.metadata_;
}
const ::k8s::io::api::authentication::v1::TokenRequestSpec&
TokenRequest::_Internal::spec(const TokenRequest* msg) {
  return *msg->_impl_.spec_;
}
const ::k8s::io::api::authentication::v1::TokenRequestStatus&
TokenRequest::_Internal::status(const TokenRequest* msg) {
  return *msg->_impl_.status_;
}
void TokenRequest::clear_metadata() {
  if (_impl_.metadata_ != nullptr) _impl_.metadata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
TokenRequest::TokenRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:k8s.io.api.authentication.v1.TokenRequest)
}
TokenRequest::TokenRequest(const TokenRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TokenRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.spec_){nullptr}
    , decltype(_impl_.status_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    _this->_impl_.metadata_ = new ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta(*from._impl_.metadata_);
  }
  if (from._internal_has_spec()) {
    _this->_impl_.spec_ = new ::k8s::io::api::authentication::v1::TokenRequestSpec(*from._impl_.spec_);
  }
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::k8s::io::api::authentication::v1::TokenRequestStatus(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:k8s.io.api.authentication.v1.TokenRequest)
}

inline void TokenRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.spec_){nullptr}
    , decltype(_impl_.status_){nullptr}
  };
}

TokenRequest::~TokenRequest() {
  // @@protoc_insertion_point(destructor:k8s.io.api.authentication.v1.TokenRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TokenRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.metadata_;
  if (this != internal_default_instance()) delete _impl_.spec_;
  if (this != internal_default_instance()) delete _impl_.status_;
}

void TokenRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TokenRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:k8s.io.api.authentication.v1.TokenRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.metadata_ != nullptr);
      _impl_.metadata_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.spec_ != nullptr);
      _impl_.spec_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.status_ != nullptr);
      _impl_.status_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TokenRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .k8s.io.api.authentication.v1.TokenRequestSpec spec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .k8s.io.api.authentication.v1.TokenRequestStatus status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TokenRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:k8s.io.api.authentication.v1.TokenRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::metadata(this),
        _Internal::metadata(this).GetCachedSize(), target, stream);
  }

  // optional .k8s.io.api.authentication.v1.TokenRequestSpec spec = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::spec(this),
        _Internal::spec(this).GetCachedSize(), target, stream);
  }

  // optional .k8s.io.api.authentication.v1.TokenRequestStatus status = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:k8s.io.api.authentication.v1.TokenRequest)
  return target;
}

size_t TokenRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:k8s.io.api.authentication.v1.TokenRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.metadata_);
    }

    // optional .k8s.io.api.authentication.v1.TokenRequestSpec spec = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.spec_);
    }

    // optional .k8s.io.api.authentication.v1.TokenRequestStatus status = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.status_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TokenRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TokenRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TokenRequest::GetClassData() const { return &_class_data_; }


void TokenRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TokenRequest*>(&to_msg);
  auto& from = static_cast<const TokenRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:k8s.io.api.authentication.v1.TokenRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_metadata()->::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta::MergeFrom(
          from._internal_metadata());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_spec()->::k8s::io::api::authentication::v1::TokenRequestSpec::MergeFrom(
          from._internal_spec());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_status()->::k8s::io::api::authentication::v1::TokenRequestStatus::MergeFrom(
          from._internal_status());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TokenRequest::CopyFrom(const TokenRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:k8s.io.api.authentication.v1.TokenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokenRequest::IsInitialized() const {
  return true;
}

void TokenRequest::InternalSwap(TokenRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TokenRequest, _impl_.status_)
      + sizeof(TokenRequest::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(TokenRequest, _impl_.metadata_)>(
          reinterpret_cast<char*>(&_impl_.metadata_),
          reinterpret_cast<char*>(&other->_impl_.metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TokenRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_k8s_2eio_2fapi_2fauthentication_2fv1_2fgenerated_2eproto_getter, &descriptor_table_k8s_2eio_2fapi_2fauthentication_2fv1_2fgenerated_2eproto_once,
      file_level_metadata_k8s_2eio_2fapi_2fauthentication_2fv1_2fgenerated_2eproto[4]);
}

// ===================================================================

class TokenRequestSpec::_Internal {
 public:
  using HasBits = decltype(std::declval<TokenRequestSpec>()._impl_._has_bits_);
  static void set_has_expirationseconds(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::k8s::io::api::authentication::v1::BoundObjectReference& boundobjectref(const TokenRequestSpec* msg);
  static void set_has_boundobjectref(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::k8s::io::api::authentication::v1::BoundObjectReference&
TokenRequestSpec::_Internal::boundobjectref(const TokenRequestSpec* msg) {
  return *msg->_impl_.boundobjectref_;
}
TokenRequestSpec::TokenRequestSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:k8s.io.api.authentication.v1.TokenRequestSpec)
}
TokenRequestSpec::TokenRequestSpec(const TokenRequestSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TokenRequestSpec* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.audiences_){from._impl_.audiences_}
    , decltype(_impl_.boundobjectref_){nullptr}
    , decltype(_impl_.expirationseconds_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_boundobjectref()) {
    _this->_impl_.boundobjectref_ = new ::k8s::io::api::authentication::v1::BoundObjectReference(*from._impl_.boundobjectref_);
  }
  _this->_impl_.expirationseconds_ = from._impl_.expirationseconds_;
  // @@protoc_insertion_point(copy_constructor:k8s.io.api.authentication.v1.TokenRequestSpec)
}

inline void TokenRequestSpec::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.audiences_){arena}
    , decltype(_impl_.boundobjectref_){nullptr}
    , decltype(_impl_.expirationseconds_){int64_t{0}}
  };
}

TokenRequestSpec::~TokenRequestSpec() {
  // @@protoc_insertion_point(destructor:k8s.io.api.authentication.v1.TokenRequestSpec)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TokenRequestSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.audiences_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.boundobjectref_;
}

void TokenRequestSpec::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TokenRequestSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:k8s.io.api.authentication.v1.TokenRequestSpec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.audiences_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.boundobjectref_ != nullptr);
    _impl_.boundobjectref_->Clear();
  }
  _impl_.expirationseconds_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TokenRequestSpec::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string audiences = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_audiences();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "k8s.io.api.authentication.v1.TokenRequestSpec.audiences");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .k8s.io.api.authentication.v1.BoundObjectReference boundObjectRef = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_boundobjectref(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 expirationSeconds = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_expirationseconds(&has_bits);
          _impl_.expirationseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TokenRequestSpec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:k8s.io.api.authentication.v1.TokenRequestSpec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string audiences = 1;
  for (int i = 0, n = this->_internal_audiences_size(); i < n; i++) {
    const auto& s = this->_internal_audiences(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "k8s.io.api.authentication.v1.TokenRequestSpec.audiences");
    target = stream->WriteString(1, s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .k8s.io.api.authentication.v1.BoundObjectReference boundObjectRef = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::boundobjectref(this),
        _Internal::boundobjectref(this).GetCachedSize(), target, stream);
  }

  // optional int64 expirationSeconds = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_expirationseconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:k8s.io.api.authentication.v1.TokenRequestSpec)
  return target;
}

size_t TokenRequestSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:k8s.io.api.authentication.v1.TokenRequestSpec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string audiences = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.audiences_.size());
  for (int i = 0, n = _impl_.audiences_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.audiences_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .k8s.io.api.authentication.v1.BoundObjectReference boundObjectRef = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.boundobjectref_);
    }

    // optional int64 expirationSeconds = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_expirationseconds());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TokenRequestSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TokenRequestSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TokenRequestSpec::GetClassData() const { return &_class_data_; }


void TokenRequestSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TokenRequestSpec*>(&to_msg);
  auto& from = static_cast<const TokenRequestSpec&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:k8s.io.api.authentication.v1.TokenRequestSpec)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.audiences_.MergeFrom(from._impl_.audiences_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_boundobjectref()->::k8s::io::api::authentication::v1::BoundObjectReference::MergeFrom(
          from._internal_boundobjectref());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.expirationseconds_ = from._impl_.expirationseconds_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TokenRequestSpec::CopyFrom(const TokenRequestSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:k8s.io.api.authentication.v1.TokenRequestSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokenRequestSpec::IsInitialized() const {
  return true;
}

void TokenRequestSpec::InternalSwap(TokenRequestSpec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.audiences_.InternalSwap(&other->_impl_.audiences_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TokenRequestSpec, _impl_.expirationseconds_)
      + sizeof(TokenRequestSpec::_impl_.expirationseconds_)
      - PROTOBUF_FIELD_OFFSET(TokenRequestSpec, _impl_.boundobjectref_)>(
          reinterpret_cast<char*>(&_impl_.boundobjectref_),
          reinterpret_cast<char*>(&other->_impl_.boundobjectref_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TokenRequestSpec::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_k8s_2eio_2fapi_2fauthentication_2fv1_2fgenerated_2eproto_getter, &descriptor_table_k8s_2eio_2fapi_2fauthentication_2fv1_2fgenerated_2eproto_once,
      file_level_metadata_k8s_2eio_2fapi_2fauthentication_2fv1_2fgenerated_2eproto[5]);
}

// ===================================================================

class TokenRequestStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<TokenRequestStatus>()._impl_._has_bits_);
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::k8s::io::apimachinery::pkg::apis::meta::v1::Time& expirationtimestamp(const TokenRequestStatus* msg);
  static void set_has_expirationtimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::k8s::io::apimachinery::pkg::apis::meta::v1::Time&
TokenRequestStatus::_Internal::expirationtimestamp(const TokenRequestStatus* msg) {
  return *msg->_impl_.expirationtimestamp_;
}
void TokenRequestStatus::clear_expirationtimestamp() {
  if (_impl_.expirationtimestamp_ != nullptr) _impl_.expirationtimestamp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
TokenRequestStatus::TokenRequestStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:k8s.io.api.authentication.v1.TokenRequestStatus)
}
TokenRequestStatus::TokenRequestStatus(const TokenRequestStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TokenRequestStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.token_){}
    , decltype(_impl_.expirationtimestamp_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_token()) {
    _this->_impl_.token_.Set(from._internal_token(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_expirationtimestamp()) {
    _this->_impl_.expirationtimestamp_ = new ::k8s::io::apimachinery::pkg::apis::meta::v1::Time(*from._impl_.expirationtimestamp_);
  }
  // @@protoc_insertion_point(copy_constructor:k8s.io.api.authentication.v1.TokenRequestStatus)
}

inline void TokenRequestStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.token_){}
    , decltype(_impl_.expirationtimestamp_){nullptr}
  };
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TokenRequestStatus::~TokenRequestStatus() {
  // @@protoc_insertion_point(destructor:k8s.io.api.authentication.v1.TokenRequestStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TokenRequestStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.token_.Destroy();
  if (this != internal_default_instance()) delete _impl_.expirationtimestamp_;
}

void TokenRequestStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TokenRequestStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:k8s.io.api.authentication.v1.TokenRequestStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.token_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.expirationtimestamp_ != nullptr);
      _impl_.expirationtimestamp_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TokenRequestStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "k8s.io.api.authentication.v1.TokenRequestStatus.token");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .k8s.io.apimachinery.pkg.apis.meta.v1.Time expirationTimestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_expirationtimestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TokenRequestStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:k8s.io.api.authentication.v1.TokenRequestStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string token = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "k8s.io.api.authentication.v1.TokenRequestStatus.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.Time expirationTimestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::expirationtimestamp(this),
        _Internal::expirationtimestamp(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:k8s.io.api.authentication.v1.TokenRequestStatus)
  return target;
}

size_t TokenRequestStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:k8s.io.api.authentication.v1.TokenRequestStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string token = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_token());
    }

    // optional .k8s.io.apimachinery.pkg.apis.meta.v1.Time expirationTimestamp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.expirationtimestamp_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TokenRequestStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TokenRequestStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TokenRequestStatus::GetClassData() const { return &_class_data_; }


void TokenRequestStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TokenRequestStatus*>(&to_msg);
  auto& from = static_cast<const TokenRequestStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:k8s.io.api.authentication.v1.TokenRequestStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_token(from._internal_token());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_expirationtimestamp()->::k8s::io::apimachinery::pkg::apis::meta::v1::Time::MergeFrom(
          from._internal_expirationtimestamp());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TokenRequestStatus::CopyFrom(const TokenRequestStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:k8s.io.api.authentication.v1.TokenRequestStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokenRequestStatus::IsInitialized() const {
  return true;
}

void TokenRequestStatus::InternalSwap(TokenRequestStatus* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.token_, lhs_arena,
      &other->_impl_.token_, rhs_arena
  );
  swap(_impl_.expirationtimestamp_, other->_impl_.expirationtimestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TokenRequestStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_k8s_2eio_2fapi_2fauthentication_2fv1_2fgenerated_2eproto_getter, &descriptor_table_k8s_2eio_2fapi_2fauthentication_2fv1_2fgenerated_2eproto_once,
      file_level_metadata_k8s_2eio_2fapi_2fauthentication_2fv1_2fgenerated_2eproto[6]);
}

// ===================================================================

class TokenReview::_Internal {
 public:
  using HasBits = decltype(std::declval<TokenReview>()._impl_._has_bits_);
  static const ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta& metadata(const TokenReview* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::k8s::io::api::authentication::v1::TokenReviewSpec& spec(const TokenReview* msg);
  static void set_has_spec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::k8s::io::api::authentication::v1::TokenReviewStatus& status(const TokenReview* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta&
TokenReview::_Internal::metadata(const TokenReview* msg) {
  return *msg->_impl_.metadata_;
}
const ::k8s::io::api::authentication::v1::TokenReviewSpec&
TokenReview::_Internal::spec(const TokenReview* msg) {
  return *msg->_impl_.spec_;
}
const ::k8s::io::api::authentication::v1::TokenReviewStatus&
TokenReview::_Internal::status(const TokenReview* msg) {
  return *msg->_impl_.status_;
}
void TokenReview::clear_metadata() {
  if (_impl_.metadata_ != nullptr) _impl_.metadata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
TokenReview::TokenReview(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:k8s.io.api.authentication.v1.TokenReview)
}
TokenReview::TokenReview(const TokenReview& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TokenReview* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.spec_){nullptr}
    , decltype(_impl_.status_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    _this->_impl_.metadata_ = new ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta(*from._impl_.metadata_);
  }
  if (from._internal_has_spec()) {
    _this->_impl_.spec_ = new ::k8s::io::api::authentication::v1::TokenReviewSpec(*from._impl_.spec_);
  }
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::k8s::io::api::authentication::v1::TokenReviewStatus(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:k8s.io.api.authentication.v1.TokenReview)
}

inline void TokenReview::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.spec_){nullptr}
    , decltype(_impl_.status_){nullptr}
  };
}

TokenReview::~TokenReview() {
  // @@protoc_insertion_point(destructor:k8s.io.api.authentication.v1.TokenReview)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TokenReview::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.metadata_;
  if (this != internal_default_instance()) delete _impl_.spec_;
  if (this != internal_default_instance()) delete _impl_.status_;
}

void TokenReview::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TokenReview::Clear() {
// @@protoc_insertion_point(message_clear_start:k8s.io.api.authentication.v1.TokenReview)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.metadata_ != nullptr);
      _impl_.metadata_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.spec_ != nullptr);
      _impl_.spec_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.status_ != nullptr);
      _impl_.status_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TokenReview::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .k8s.io.api.authentication.v1.TokenReviewSpec spec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .k8s.io.api.authentication.v1.TokenReviewStatus status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TokenReview::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:k8s.io.api.authentication.v1.TokenReview)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::metadata(this),
        _Internal::metadata(this).GetCachedSize(), target, stream);
  }

  // optional .k8s.io.api.authentication.v1.TokenReviewSpec spec = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::spec(this),
        _Internal::spec(this).GetCachedSize(), target, stream);
  }

  // optional .k8s.io.api.authentication.v1.TokenReviewStatus status = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:k8s.io.api.authentication.v1.TokenReview)
  return target;
}

size_t TokenReview::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:k8s.io.api.authentication.v1.TokenReview)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.metadata_);
    }

    // optional .k8s.io.api.authentication.v1.TokenReviewSpec spec = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.spec_);
    }

    // optional .k8s.io.api.authentication.v1.TokenReviewStatus status = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.status_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TokenReview::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TokenReview::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TokenReview::GetClassData() const { return &_class_data_; }


void TokenReview::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TokenReview*>(&to_msg);
  auto& from = static_cast<const TokenReview&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:k8s.io.api.authentication.v1.TokenReview)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_metadata()->::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta::MergeFrom(
          from._internal_metadata());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_spec()->::k8s::io::api::authentication::v1::TokenReviewSpec::MergeFrom(
          from._internal_spec());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_status()->::k8s::io::api::authentication::v1::TokenReviewStatus::MergeFrom(
          from._internal_status());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TokenReview::CopyFrom(const TokenReview& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:k8s.io.api.authentication.v1.TokenReview)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokenReview::IsInitialized() const {
  return true;
}

void TokenReview::InternalSwap(TokenReview* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TokenReview, _impl_.status_)
      + sizeof(TokenReview::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(TokenReview, _impl_.metadata_)>(
          reinterpret_cast<char*>(&_impl_.metadata_),
          reinterpret_cast<char*>(&other->_impl_.metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TokenReview::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_k8s_2eio_2fapi_2fauthentication_2fv1_2fgenerated_2eproto_getter, &descriptor_table_k8s_2eio_2fapi_2fauthentication_2fv1_2fgenerated_2eproto_once,
      file_level_metadata_k8s_2eio_2fapi_2fauthentication_2fv1_2fgenerated_2eproto[7]);
}

// ===================================================================

class TokenReviewSpec::_Internal {
 public:
  using HasBits = decltype(std::declval<TokenReviewSpec>()._impl_._has_bits_);
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TokenReviewSpec::TokenReviewSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:k8s.io.api.authentication.v1.TokenReviewSpec)
}
TokenReviewSpec::TokenReviewSpec(const TokenReviewSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TokenReviewSpec* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.audiences_){from._impl_.audiences_}
    , decltype(_impl_.token_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_token()) {
    _this->_impl_.token_.Set(from._internal_token(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:k8s.io.api.authentication.v1.TokenReviewSpec)
}

inline void TokenReviewSpec::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.audiences_){arena}
    , decltype(_impl_.token_){}
  };
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TokenReviewSpec::~TokenReviewSpec() {
  // @@protoc_insertion_point(destructor:k8s.io.api.authentication.v1.TokenReviewSpec)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TokenReviewSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.audiences_.~RepeatedPtrField();
  _impl_.token_.Destroy();
}

void TokenReviewSpec::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TokenReviewSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:k8s.io.api.authentication.v1.TokenReviewSpec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.audiences_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.token_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TokenReviewSpec::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "k8s.io.api.authentication.v1.TokenReviewSpec.token");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated string audiences = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_audiences();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "k8s.io.api.authentication.v1.TokenReviewSpec.audiences");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TokenReviewSpec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:k8s.io.api.authentication.v1.TokenReviewSpec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string token = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "k8s.io.api.authentication.v1.TokenReviewSpec.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  // repeated string audiences = 2;
  for (int i = 0, n = this->_internal_audiences_size(); i < n; i++) {
    const auto& s = this->_internal_audiences(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "k8s.io.api.authentication.v1.TokenReviewSpec.audiences");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:k8s.io.api.authentication.v1.TokenReviewSpec)
  return target;
}

size_t TokenReviewSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:k8s.io.api.authentication.v1.TokenReviewSpec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string audiences = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.audiences_.size());
  for (int i = 0, n = _impl_.audiences_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.audiences_.Get(i));
  }

  // optional string token = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TokenReviewSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TokenReviewSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TokenReviewSpec::GetClassData() const { return &_class_data_; }


void TokenReviewSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TokenReviewSpec*>(&to_msg);
  auto& from = static_cast<const TokenReviewSpec&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:k8s.io.api.authentication.v1.TokenReviewSpec)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.audiences_.MergeFrom(from._impl_.audiences_);
  if (from._internal_has_token()) {
    _this->_internal_set_token(from._internal_token());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TokenReviewSpec::CopyFrom(const TokenReviewSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:k8s.io.api.authentication.v1.TokenReviewSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokenReviewSpec::IsInitialized() const {
  return true;
}

void TokenReviewSpec::InternalSwap(TokenReviewSpec* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.audiences_.InternalSwap(&other->_impl_.audiences_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.token_, lhs_arena,
      &other->_impl_.token_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TokenReviewSpec::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_k8s_2eio_2fapi_2fauthentication_2fv1_2fgenerated_2eproto_getter, &descriptor_table_k8s_2eio_2fapi_2fauthentication_2fv1_2fgenerated_2eproto_once,
      file_level_metadata_k8s_2eio_2fapi_2fauthentication_2fv1_2fgenerated_2eproto[8]);
}

// ===================================================================

class TokenReviewStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<TokenReviewStatus>()._impl_._has_bits_);
  static void set_has_authenticated(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::k8s::io::api::authentication::v1::UserInfo& user(const TokenReviewStatus* msg);
  static void set_has_user(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::k8s::io::api::authentication::v1::UserInfo&
TokenReviewStatus::_Internal::user(const TokenReviewStatus* msg) {
  return *msg->_impl_.user_;
}
TokenReviewStatus::TokenReviewStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:k8s.io.api.authentication.v1.TokenReviewStatus)
}
TokenReviewStatus::TokenReviewStatus(const TokenReviewStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TokenReviewStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.audiences_){from._impl_.audiences_}
    , decltype(_impl_.error_){}
    , decltype(_impl_.user_){nullptr}
    , decltype(_impl_.authenticated_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_error()) {
    _this->_impl_.error_.Set(from._internal_error(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user()) {
    _this->_impl_.user_ = new ::k8s::io::api::authentication::v1::UserInfo(*from._impl_.user_);
  }
  _this->_impl_.authenticated_ = from._impl_.authenticated_;
  // @@protoc_insertion_point(copy_constructor:k8s.io.api.authentication.v1.TokenReviewStatus)
}

inline void TokenReviewStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.audiences_){arena}
    , decltype(_impl_.error_){}
    , decltype(_impl_.user_){nullptr}
    , decltype(_impl_.authenticated_){false}
  };
  _impl_.error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TokenReviewStatus::~TokenReviewStatus() {
  // @@protoc_insertion_point(destructor:k8s.io.api.authentication.v1.TokenReviewStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TokenReviewStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.audiences_.~RepeatedPtrField();
  _impl_.error_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_;
}

void TokenReviewStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TokenReviewStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:k8s.io.api.authentication.v1.TokenReviewStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.audiences_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.error_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.user_ != nullptr);
      _impl_.user_->Clear();
    }
  }
  _impl_.authenticated_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TokenReviewStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool authenticated = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_authenticated(&has_bits);
          _impl_.authenticated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .k8s.io.api.authentication.v1.UserInfo user = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string error = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_error();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "k8s.io.api.authentication.v1.TokenReviewStatus.error");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated string audiences = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_audiences();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "k8s.io.api.authentication.v1.TokenReviewStatus.audiences");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TokenReviewStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:k8s.io.api.authentication.v1.TokenReviewStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool authenticated = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_authenticated(), target);
  }

  // optional .k8s.io.api.authentication.v1.UserInfo user = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::user(this),
        _Internal::user(this).GetCachedSize(), target, stream);
  }

  // optional string error = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "k8s.io.api.authentication.v1.TokenReviewStatus.error");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_error(), target);
  }

  // repeated string audiences = 4;
  for (int i = 0, n = this->_internal_audiences_size(); i < n; i++) {
    const auto& s = this->_internal_audiences(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "k8s.io.api.authentication.v1.TokenReviewStatus.audiences");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:k8s.io.api.authentication.v1.TokenReviewStatus)
  return target;
}

size_t TokenReviewStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:k8s.io.api.authentication.v1.TokenReviewStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string audiences = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.audiences_.size());
  for (int i = 0, n = _impl_.audiences_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.audiences_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string error = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_error());
    }

    // optional .k8s.io.api.authentication.v1.UserInfo user = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.user_);
    }

    // optional bool authenticated = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TokenReviewStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TokenReviewStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TokenReviewStatus::GetClassData() const { return &_class_data_; }


void TokenReviewStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TokenReviewStatus*>(&to_msg);
  auto& from = static_cast<const TokenReviewStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:k8s.io.api.authentication.v1.TokenReviewStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.audiences_.MergeFrom(from._impl_.audiences_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_error(from._internal_error());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_user()->::k8s::io::api::authentication::v1::UserInfo::MergeFrom(
          from._internal_user());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.authenticated_ = from._impl_.authenticated_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TokenReviewStatus::CopyFrom(const TokenReviewStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:k8s.io.api.authentication.v1.TokenReviewStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokenReviewStatus::IsInitialized() const {
  return true;
}

void TokenReviewStatus::InternalSwap(TokenReviewStatus* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.audiences_.InternalSwap(&other->_impl_.audiences_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_, lhs_arena,
      &other->_impl_.error_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TokenReviewStatus, _impl_.authenticated_)
      + sizeof(TokenReviewStatus::_impl_.authenticated_)
      - PROTOBUF_FIELD_OFFSET(TokenReviewStatus, _impl_.user_)>(
          reinterpret_cast<char*>(&_impl_.user_),
          reinterpret_cast<char*>(&other->_impl_.user_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TokenReviewStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_k8s_2eio_2fapi_2fauthentication_2fv1_2fgenerated_2eproto_getter, &descriptor_table_k8s_2eio_2fapi_2fauthentication_2fv1_2fgenerated_2eproto_once,
      file_level_metadata_k8s_2eio_2fapi_2fauthentication_2fv1_2fgenerated_2eproto[9]);
}

// ===================================================================

UserInfo_ExtraEntry_DoNotUse::UserInfo_ExtraEntry_DoNotUse() {}
UserInfo_ExtraEntry_DoNotUse::UserInfo_ExtraEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void UserInfo_ExtraEntry_DoNotUse::MergeFrom(const UserInfo_ExtraEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata UserInfo_ExtraEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_k8s_2eio_2fapi_2fauthentication_2fv1_2fgenerated_2eproto_getter, &descriptor_table_k8s_2eio_2fapi_2fauthentication_2fv1_2fgenerated_2eproto_once,
      file_level_metadata_k8s_2eio_2fapi_2fauthentication_2fv1_2fgenerated_2eproto[10]);
}

// ===================================================================

class UserInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<UserInfo>()._impl_._has_bits_);
  static void set_has_username(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

UserInfo::UserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &UserInfo::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:k8s.io.api.authentication.v1.UserInfo)
}
UserInfo::UserInfo(const UserInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.groups_){from._impl_.groups_}
    , /*decltype(_impl_.extra_)*/{}
    , decltype(_impl_.username_){}
    , decltype(_impl_.uid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.extra_.MergeFrom(from._impl_.extra_);
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_username()) {
    _this->_impl_.username_.Set(from._internal_username(), 
      _this->GetArenaForAllocation());
  }
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_uid()) {
    _this->_impl_.uid_.Set(from._internal_uid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:k8s.io.api.authentication.v1.UserInfo)
}

inline void UserInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.groups_){arena}
    , /*decltype(_impl_.extra_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.username_){}
    , decltype(_impl_.uid_){}
  };
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserInfo::~UserInfo() {
  // @@protoc_insertion_point(destructor:k8s.io.api.authentication.v1.UserInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void UserInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.groups_.~RepeatedPtrField();
  _impl_.extra_.Destruct();
  _impl_.extra_.~MapField();
  _impl_.username_.Destroy();
  _impl_.uid_.Destroy();
}

void UserInfo::ArenaDtor(void* object) {
  UserInfo* _this = reinterpret_cast< UserInfo* >(object);
  _this->_impl_.extra_.Destruct();
}
void UserInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:k8s.io.api.authentication.v1.UserInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.groups_.Clear();
  _impl_.extra_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.username_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.uid_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string username = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "k8s.io.api.authentication.v1.UserInfo.username");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "k8s.io.api.authentication.v1.UserInfo.uid");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated string groups = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_groups();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "k8s.io.api.authentication.v1.UserInfo.groups");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .k8s.io.api.authentication.v1.ExtraValue> extra = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.extra_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:k8s.io.api.authentication.v1.UserInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string username = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "k8s.io.api.authentication.v1.UserInfo.username");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  // optional string uid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_uid().data(), static_cast<int>(this->_internal_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "k8s.io.api.authentication.v1.UserInfo.uid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_uid(), target);
  }

  // repeated string groups = 3;
  for (int i = 0, n = this->_internal_groups_size(); i < n; i++) {
    const auto& s = this->_internal_groups(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "k8s.io.api.authentication.v1.UserInfo.groups");
    target = stream->WriteString(3, s, target);
  }

  // map<string, .k8s.io.api.authentication.v1.ExtraValue> extra = 4;
  if (!this->_internal_extra().empty()) {
    using MapType = ::_pb::Map<std::string, ::k8s::io::api::authentication::v1::ExtraValue>;
    using WireHelper = UserInfo_ExtraEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_extra();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "k8s.io.api.authentication.v1.UserInfo.ExtraEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:k8s.io.api.authentication.v1.UserInfo)
  return target;
}

size_t UserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:k8s.io.api.authentication.v1.UserInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string groups = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.groups_.size());
  for (int i = 0, n = _impl_.groups_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.groups_.Get(i));
  }

  // map<string, .k8s.io.api.authentication.v1.ExtraValue> extra = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_extra_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::k8s::io::api::authentication::v1::ExtraValue >::const_iterator
      it = this->_internal_extra().begin();
      it != this->_internal_extra().end(); ++it) {
    total_size += UserInfo_ExtraEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string username = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_username());
    }

    // optional string uid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_uid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserInfo::GetClassData() const { return &_class_data_; }


void UserInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserInfo*>(&to_msg);
  auto& from = static_cast<const UserInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:k8s.io.api.authentication.v1.UserInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.groups_.MergeFrom(from._impl_.groups_);
  _this->_impl_.extra_.MergeFrom(from._impl_.extra_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_username(from._internal_username());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_uid(from._internal_uid());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserInfo::CopyFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:k8s.io.api.authentication.v1.UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo::IsInitialized() const {
  return true;
}

void UserInfo::InternalSwap(UserInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.groups_.InternalSwap(&other->_impl_.groups_);
  _impl_.extra_.InternalSwap(&other->_impl_.extra_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.username_, lhs_arena,
      &other->_impl_.username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uid_, lhs_arena,
      &other->_impl_.uid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UserInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_k8s_2eio_2fapi_2fauthentication_2fv1_2fgenerated_2eproto_getter, &descriptor_table_k8s_2eio_2fapi_2fauthentication_2fv1_2fgenerated_2eproto_once,
      file_level_metadata_k8s_2eio_2fapi_2fauthentication_2fv1_2fgenerated_2eproto[11]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace authentication
}  // namespace api
}  // namespace io
}  // namespace k8s
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::k8s::io::api::authentication::v1::BoundObjectReference*
Arena::CreateMaybeMessage< ::k8s::io::api::authentication::v1::BoundObjectReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::k8s::io::api::authentication::v1::BoundObjectReference >(arena);
}
template<> PROTOBUF_NOINLINE ::k8s::io::api::authentication::v1::ExtraValue*
Arena::CreateMaybeMessage< ::k8s::io::api::authentication::v1::ExtraValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::k8s::io::api::authentication::v1::ExtraValue >(arena);
}
template<> PROTOBUF_NOINLINE ::k8s::io::api::authentication::v1::SelfSubjectReview*
Arena::CreateMaybeMessage< ::k8s::io::api::authentication::v1::SelfSubjectReview >(Arena* arena) {
  return Arena::CreateMessageInternal< ::k8s::io::api::authentication::v1::SelfSubjectReview >(arena);
}
template<> PROTOBUF_NOINLINE ::k8s::io::api::authentication::v1::SelfSubjectReviewStatus*
Arena::CreateMaybeMessage< ::k8s::io::api::authentication::v1::SelfSubjectReviewStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::k8s::io::api::authentication::v1::SelfSubjectReviewStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::k8s::io::api::authentication::v1::TokenRequest*
Arena::CreateMaybeMessage< ::k8s::io::api::authentication::v1::TokenRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::k8s::io::api::authentication::v1::TokenRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::k8s::io::api::authentication::v1::TokenRequestSpec*
Arena::CreateMaybeMessage< ::k8s::io::api::authentication::v1::TokenRequestSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::k8s::io::api::authentication::v1::TokenRequestSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::k8s::io::api::authentication::v1::TokenRequestStatus*
Arena::CreateMaybeMessage< ::k8s::io::api::authentication::v1::TokenRequestStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::k8s::io::api::authentication::v1::TokenRequestStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::k8s::io::api::authentication::v1::TokenReview*
Arena::CreateMaybeMessage< ::k8s::io::api::authentication::v1::TokenReview >(Arena* arena) {
  return Arena::CreateMessageInternal< ::k8s::io::api::authentication::v1::TokenReview >(arena);
}
template<> PROTOBUF_NOINLINE ::k8s::io::api::authentication::v1::TokenReviewSpec*
Arena::CreateMaybeMessage< ::k8s::io::api::authentication::v1::TokenReviewSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::k8s::io::api::authentication::v1::TokenReviewSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::k8s::io::api::authentication::v1::TokenReviewStatus*
Arena::CreateMaybeMessage< ::k8s::io::api::authentication::v1::TokenReviewStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::k8s::io::api::authentication::v1::TokenReviewStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::k8s::io::api::authentication::v1::UserInfo_ExtraEntry_DoNotUse*
Arena::CreateMaybeMessage< ::k8s::io::api::authentication::v1::UserInfo_ExtraEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::k8s::io::api::authentication::v1::UserInfo_ExtraEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::k8s::io::api::authentication::v1::UserInfo*
Arena::CreateMaybeMessage< ::k8s::io::api::authentication::v1::UserInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::k8s::io::api::authentication::v1::UserInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
