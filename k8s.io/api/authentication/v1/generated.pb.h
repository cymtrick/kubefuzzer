// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: k8s.io/api/authentication/v1/generated.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_k8s_2eio_2fapi_2fauthentication_2fv1_2fgenerated_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_k8s_2eio_2fapi_2fauthentication_2fv1_2fgenerated_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "k8s.io/apimachinery/pkg/apis/meta/v1/generated.pb.h"
#include "k8s.io/apimachinery/pkg/runtime/generated.pb.h"
#include "k8s.io/apimachinery/pkg/runtime/schema/generated.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_k8s_2eio_2fapi_2fauthentication_2fv1_2fgenerated_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_k8s_2eio_2fapi_2fauthentication_2fv1_2fgenerated_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_k8s_2eio_2fapi_2fauthentication_2fv1_2fgenerated_2eproto;
namespace k8s {
namespace io {
namespace api {
namespace authentication {
namespace v1 {
class BoundObjectReference;
struct BoundObjectReferenceDefaultTypeInternal;
extern BoundObjectReferenceDefaultTypeInternal _BoundObjectReference_default_instance_;
class ExtraValue;
struct ExtraValueDefaultTypeInternal;
extern ExtraValueDefaultTypeInternal _ExtraValue_default_instance_;
class SelfSubjectReview;
struct SelfSubjectReviewDefaultTypeInternal;
extern SelfSubjectReviewDefaultTypeInternal _SelfSubjectReview_default_instance_;
class SelfSubjectReviewStatus;
struct SelfSubjectReviewStatusDefaultTypeInternal;
extern SelfSubjectReviewStatusDefaultTypeInternal _SelfSubjectReviewStatus_default_instance_;
class TokenRequest;
struct TokenRequestDefaultTypeInternal;
extern TokenRequestDefaultTypeInternal _TokenRequest_default_instance_;
class TokenRequestSpec;
struct TokenRequestSpecDefaultTypeInternal;
extern TokenRequestSpecDefaultTypeInternal _TokenRequestSpec_default_instance_;
class TokenRequestStatus;
struct TokenRequestStatusDefaultTypeInternal;
extern TokenRequestStatusDefaultTypeInternal _TokenRequestStatus_default_instance_;
class TokenReview;
struct TokenReviewDefaultTypeInternal;
extern TokenReviewDefaultTypeInternal _TokenReview_default_instance_;
class TokenReviewSpec;
struct TokenReviewSpecDefaultTypeInternal;
extern TokenReviewSpecDefaultTypeInternal _TokenReviewSpec_default_instance_;
class TokenReviewStatus;
struct TokenReviewStatusDefaultTypeInternal;
extern TokenReviewStatusDefaultTypeInternal _TokenReviewStatus_default_instance_;
class UserInfo;
struct UserInfoDefaultTypeInternal;
extern UserInfoDefaultTypeInternal _UserInfo_default_instance_;
class UserInfo_ExtraEntry_DoNotUse;
struct UserInfo_ExtraEntry_DoNotUseDefaultTypeInternal;
extern UserInfo_ExtraEntry_DoNotUseDefaultTypeInternal _UserInfo_ExtraEntry_DoNotUse_default_instance_;
}  // namespace v1
}  // namespace authentication
}  // namespace api
}  // namespace io
}  // namespace k8s
PROTOBUF_NAMESPACE_OPEN
template<> ::k8s::io::api::authentication::v1::BoundObjectReference* Arena::CreateMaybeMessage<::k8s::io::api::authentication::v1::BoundObjectReference>(Arena*);
template<> ::k8s::io::api::authentication::v1::ExtraValue* Arena::CreateMaybeMessage<::k8s::io::api::authentication::v1::ExtraValue>(Arena*);
template<> ::k8s::io::api::authentication::v1::SelfSubjectReview* Arena::CreateMaybeMessage<::k8s::io::api::authentication::v1::SelfSubjectReview>(Arena*);
template<> ::k8s::io::api::authentication::v1::SelfSubjectReviewStatus* Arena::CreateMaybeMessage<::k8s::io::api::authentication::v1::SelfSubjectReviewStatus>(Arena*);
template<> ::k8s::io::api::authentication::v1::TokenRequest* Arena::CreateMaybeMessage<::k8s::io::api::authentication::v1::TokenRequest>(Arena*);
template<> ::k8s::io::api::authentication::v1::TokenRequestSpec* Arena::CreateMaybeMessage<::k8s::io::api::authentication::v1::TokenRequestSpec>(Arena*);
template<> ::k8s::io::api::authentication::v1::TokenRequestStatus* Arena::CreateMaybeMessage<::k8s::io::api::authentication::v1::TokenRequestStatus>(Arena*);
template<> ::k8s::io::api::authentication::v1::TokenReview* Arena::CreateMaybeMessage<::k8s::io::api::authentication::v1::TokenReview>(Arena*);
template<> ::k8s::io::api::authentication::v1::TokenReviewSpec* Arena::CreateMaybeMessage<::k8s::io::api::authentication::v1::TokenReviewSpec>(Arena*);
template<> ::k8s::io::api::authentication::v1::TokenReviewStatus* Arena::CreateMaybeMessage<::k8s::io::api::authentication::v1::TokenReviewStatus>(Arena*);
template<> ::k8s::io::api::authentication::v1::UserInfo* Arena::CreateMaybeMessage<::k8s::io::api::authentication::v1::UserInfo>(Arena*);
template<> ::k8s::io::api::authentication::v1::UserInfo_ExtraEntry_DoNotUse* Arena::CreateMaybeMessage<::k8s::io::api::authentication::v1::UserInfo_ExtraEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace k8s {
namespace io {
namespace api {
namespace authentication {
namespace v1 {

// ===================================================================

class BoundObjectReference final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:k8s.io.api.authentication.v1.BoundObjectReference) */ {
 public:
  inline BoundObjectReference() : BoundObjectReference(nullptr) {}
  ~BoundObjectReference() override;
  explicit PROTOBUF_CONSTEXPR BoundObjectReference(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BoundObjectReference(const BoundObjectReference& from);
  BoundObjectReference(BoundObjectReference&& from) noexcept
    : BoundObjectReference() {
    *this = ::std::move(from);
  }

  inline BoundObjectReference& operator=(const BoundObjectReference& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoundObjectReference& operator=(BoundObjectReference&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BoundObjectReference& default_instance() {
    return *internal_default_instance();
  }
  static inline const BoundObjectReference* internal_default_instance() {
    return reinterpret_cast<const BoundObjectReference*>(
               &_BoundObjectReference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BoundObjectReference& a, BoundObjectReference& b) {
    a.Swap(&b);
  }
  inline void Swap(BoundObjectReference* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoundObjectReference* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BoundObjectReference* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BoundObjectReference>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BoundObjectReference& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BoundObjectReference& from) {
    BoundObjectReference::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoundObjectReference* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "k8s.io.api.authentication.v1.BoundObjectReference";
  }
  protected:
  explicit BoundObjectReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKindFieldNumber = 1,
    kApiVersionFieldNumber = 2,
    kNameFieldNumber = 3,
    kUIDFieldNumber = 4,
  };
  // optional string kind = 1;
  bool has_kind() const;
  private:
  bool _internal_has_kind() const;
  public:
  void clear_kind();
  const std::string& kind() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_kind(ArgT0&& arg0, ArgT... args);
  std::string* mutable_kind();
  PROTOBUF_NODISCARD std::string* release_kind();
  void set_allocated_kind(std::string* kind);
  private:
  const std::string& _internal_kind() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_kind(const std::string& value);
  std::string* _internal_mutable_kind();
  public:

  // optional string apiVersion = 2;
  bool has_apiversion() const;
  private:
  bool _internal_has_apiversion() const;
  public:
  void clear_apiversion();
  const std::string& apiversion() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_apiversion(ArgT0&& arg0, ArgT... args);
  std::string* mutable_apiversion();
  PROTOBUF_NODISCARD std::string* release_apiversion();
  void set_allocated_apiversion(std::string* apiversion);
  private:
  const std::string& _internal_apiversion() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_apiversion(const std::string& value);
  std::string* _internal_mutable_apiversion();
  public:

  // optional string name = 3;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string uID = 4;
  bool has_uid() const;
  private:
  bool _internal_has_uid() const;
  public:
  void clear_uid();
  const std::string& uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uid();
  PROTOBUF_NODISCARD std::string* release_uid();
  void set_allocated_uid(std::string* uid);
  private:
  const std::string& _internal_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uid(const std::string& value);
  std::string* _internal_mutable_uid();
  public:

  // @@protoc_insertion_point(class_scope:k8s.io.api.authentication.v1.BoundObjectReference)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kind_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr apiversion_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_k8s_2eio_2fapi_2fauthentication_2fv1_2fgenerated_2eproto;
};
// -------------------------------------------------------------------

class ExtraValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:k8s.io.api.authentication.v1.ExtraValue) */ {
 public:
  inline ExtraValue() : ExtraValue(nullptr) {}
  ~ExtraValue() override;
  explicit PROTOBUF_CONSTEXPR ExtraValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExtraValue(const ExtraValue& from);
  ExtraValue(ExtraValue&& from) noexcept
    : ExtraValue() {
    *this = ::std::move(from);
  }

  inline ExtraValue& operator=(const ExtraValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExtraValue& operator=(ExtraValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExtraValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExtraValue* internal_default_instance() {
    return reinterpret_cast<const ExtraValue*>(
               &_ExtraValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ExtraValue& a, ExtraValue& b) {
    a.Swap(&b);
  }
  inline void Swap(ExtraValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExtraValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExtraValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExtraValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExtraValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ExtraValue& from) {
    ExtraValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExtraValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "k8s.io.api.authentication.v1.ExtraValue";
  }
  protected:
  explicit ExtraValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated string items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  const std::string& items(int index) const;
  std::string* mutable_items(int index);
  void set_items(int index, const std::string& value);
  void set_items(int index, std::string&& value);
  void set_items(int index, const char* value);
  void set_items(int index, const char* value, size_t size);
  std::string* add_items();
  void add_items(const std::string& value);
  void add_items(std::string&& value);
  void add_items(const char* value);
  void add_items(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& items() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_items();
  private:
  const std::string& _internal_items(int index) const;
  std::string* _internal_add_items();
  public:

  // @@protoc_insertion_point(class_scope:k8s.io.api.authentication.v1.ExtraValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> items_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_k8s_2eio_2fapi_2fauthentication_2fv1_2fgenerated_2eproto;
};
// -------------------------------------------------------------------

class SelfSubjectReview final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:k8s.io.api.authentication.v1.SelfSubjectReview) */ {
 public:
  inline SelfSubjectReview() : SelfSubjectReview(nullptr) {}
  ~SelfSubjectReview() override;
  explicit PROTOBUF_CONSTEXPR SelfSubjectReview(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SelfSubjectReview(const SelfSubjectReview& from);
  SelfSubjectReview(SelfSubjectReview&& from) noexcept
    : SelfSubjectReview() {
    *this = ::std::move(from);
  }

  inline SelfSubjectReview& operator=(const SelfSubjectReview& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelfSubjectReview& operator=(SelfSubjectReview&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SelfSubjectReview& default_instance() {
    return *internal_default_instance();
  }
  static inline const SelfSubjectReview* internal_default_instance() {
    return reinterpret_cast<const SelfSubjectReview*>(
               &_SelfSubjectReview_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SelfSubjectReview& a, SelfSubjectReview& b) {
    a.Swap(&b);
  }
  inline void Swap(SelfSubjectReview* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SelfSubjectReview* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SelfSubjectReview* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SelfSubjectReview>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SelfSubjectReview& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SelfSubjectReview& from) {
    SelfSubjectReview::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SelfSubjectReview* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "k8s.io.api.authentication.v1.SelfSubjectReview";
  }
  protected:
  explicit SelfSubjectReview(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta& metadata() const;
  PROTOBUF_NODISCARD ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta* release_metadata();
  ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta* mutable_metadata();
  void set_allocated_metadata(::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta* metadata);
  private:
  const ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta& _internal_metadata() const;
  ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta* metadata);
  ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta* unsafe_arena_release_metadata();

  // optional .k8s.io.api.authentication.v1.SelfSubjectReviewStatus status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::k8s::io::api::authentication::v1::SelfSubjectReviewStatus& status() const;
  PROTOBUF_NODISCARD ::k8s::io::api::authentication::v1::SelfSubjectReviewStatus* release_status();
  ::k8s::io::api::authentication::v1::SelfSubjectReviewStatus* mutable_status();
  void set_allocated_status(::k8s::io::api::authentication::v1::SelfSubjectReviewStatus* status);
  private:
  const ::k8s::io::api::authentication::v1::SelfSubjectReviewStatus& _internal_status() const;
  ::k8s::io::api::authentication::v1::SelfSubjectReviewStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::k8s::io::api::authentication::v1::SelfSubjectReviewStatus* status);
  ::k8s::io::api::authentication::v1::SelfSubjectReviewStatus* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:k8s.io.api.authentication.v1.SelfSubjectReview)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta* metadata_;
    ::k8s::io::api::authentication::v1::SelfSubjectReviewStatus* status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_k8s_2eio_2fapi_2fauthentication_2fv1_2fgenerated_2eproto;
};
// -------------------------------------------------------------------

class SelfSubjectReviewStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:k8s.io.api.authentication.v1.SelfSubjectReviewStatus) */ {
 public:
  inline SelfSubjectReviewStatus() : SelfSubjectReviewStatus(nullptr) {}
  ~SelfSubjectReviewStatus() override;
  explicit PROTOBUF_CONSTEXPR SelfSubjectReviewStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SelfSubjectReviewStatus(const SelfSubjectReviewStatus& from);
  SelfSubjectReviewStatus(SelfSubjectReviewStatus&& from) noexcept
    : SelfSubjectReviewStatus() {
    *this = ::std::move(from);
  }

  inline SelfSubjectReviewStatus& operator=(const SelfSubjectReviewStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelfSubjectReviewStatus& operator=(SelfSubjectReviewStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SelfSubjectReviewStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const SelfSubjectReviewStatus* internal_default_instance() {
    return reinterpret_cast<const SelfSubjectReviewStatus*>(
               &_SelfSubjectReviewStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SelfSubjectReviewStatus& a, SelfSubjectReviewStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(SelfSubjectReviewStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SelfSubjectReviewStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SelfSubjectReviewStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SelfSubjectReviewStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SelfSubjectReviewStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SelfSubjectReviewStatus& from) {
    SelfSubjectReviewStatus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SelfSubjectReviewStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "k8s.io.api.authentication.v1.SelfSubjectReviewStatus";
  }
  protected:
  explicit SelfSubjectReviewStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserInfoFieldNumber = 1,
  };
  // optional .k8s.io.api.authentication.v1.UserInfo userInfo = 1;
  bool has_userinfo() const;
  private:
  bool _internal_has_userinfo() const;
  public:
  void clear_userinfo();
  const ::k8s::io::api::authentication::v1::UserInfo& userinfo() const;
  PROTOBUF_NODISCARD ::k8s::io::api::authentication::v1::UserInfo* release_userinfo();
  ::k8s::io::api::authentication::v1::UserInfo* mutable_userinfo();
  void set_allocated_userinfo(::k8s::io::api::authentication::v1::UserInfo* userinfo);
  private:
  const ::k8s::io::api::authentication::v1::UserInfo& _internal_userinfo() const;
  ::k8s::io::api::authentication::v1::UserInfo* _internal_mutable_userinfo();
  public:
  void unsafe_arena_set_allocated_userinfo(
      ::k8s::io::api::authentication::v1::UserInfo* userinfo);
  ::k8s::io::api::authentication::v1::UserInfo* unsafe_arena_release_userinfo();

  // @@protoc_insertion_point(class_scope:k8s.io.api.authentication.v1.SelfSubjectReviewStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::k8s::io::api::authentication::v1::UserInfo* userinfo_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_k8s_2eio_2fapi_2fauthentication_2fv1_2fgenerated_2eproto;
};
// -------------------------------------------------------------------

class TokenRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:k8s.io.api.authentication.v1.TokenRequest) */ {
 public:
  inline TokenRequest() : TokenRequest(nullptr) {}
  ~TokenRequest() override;
  explicit PROTOBUF_CONSTEXPR TokenRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TokenRequest(const TokenRequest& from);
  TokenRequest(TokenRequest&& from) noexcept
    : TokenRequest() {
    *this = ::std::move(from);
  }

  inline TokenRequest& operator=(const TokenRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TokenRequest& operator=(TokenRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TokenRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TokenRequest* internal_default_instance() {
    return reinterpret_cast<const TokenRequest*>(
               &_TokenRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TokenRequest& a, TokenRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TokenRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TokenRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TokenRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TokenRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TokenRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TokenRequest& from) {
    TokenRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TokenRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "k8s.io.api.authentication.v1.TokenRequest";
  }
  protected:
  explicit TokenRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 1,
    kSpecFieldNumber = 2,
    kStatusFieldNumber = 3,
  };
  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta& metadata() const;
  PROTOBUF_NODISCARD ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta* release_metadata();
  ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta* mutable_metadata();
  void set_allocated_metadata(::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta* metadata);
  private:
  const ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta& _internal_metadata() const;
  ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta* metadata);
  ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta* unsafe_arena_release_metadata();

  // optional .k8s.io.api.authentication.v1.TokenRequestSpec spec = 2;
  bool has_spec() const;
  private:
  bool _internal_has_spec() const;
  public:
  void clear_spec();
  const ::k8s::io::api::authentication::v1::TokenRequestSpec& spec() const;
  PROTOBUF_NODISCARD ::k8s::io::api::authentication::v1::TokenRequestSpec* release_spec();
  ::k8s::io::api::authentication::v1::TokenRequestSpec* mutable_spec();
  void set_allocated_spec(::k8s::io::api::authentication::v1::TokenRequestSpec* spec);
  private:
  const ::k8s::io::api::authentication::v1::TokenRequestSpec& _internal_spec() const;
  ::k8s::io::api::authentication::v1::TokenRequestSpec* _internal_mutable_spec();
  public:
  void unsafe_arena_set_allocated_spec(
      ::k8s::io::api::authentication::v1::TokenRequestSpec* spec);
  ::k8s::io::api::authentication::v1::TokenRequestSpec* unsafe_arena_release_spec();

  // optional .k8s.io.api.authentication.v1.TokenRequestStatus status = 3;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::k8s::io::api::authentication::v1::TokenRequestStatus& status() const;
  PROTOBUF_NODISCARD ::k8s::io::api::authentication::v1::TokenRequestStatus* release_status();
  ::k8s::io::api::authentication::v1::TokenRequestStatus* mutable_status();
  void set_allocated_status(::k8s::io::api::authentication::v1::TokenRequestStatus* status);
  private:
  const ::k8s::io::api::authentication::v1::TokenRequestStatus& _internal_status() const;
  ::k8s::io::api::authentication::v1::TokenRequestStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::k8s::io::api::authentication::v1::TokenRequestStatus* status);
  ::k8s::io::api::authentication::v1::TokenRequestStatus* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:k8s.io.api.authentication.v1.TokenRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta* metadata_;
    ::k8s::io::api::authentication::v1::TokenRequestSpec* spec_;
    ::k8s::io::api::authentication::v1::TokenRequestStatus* status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_k8s_2eio_2fapi_2fauthentication_2fv1_2fgenerated_2eproto;
};
// -------------------------------------------------------------------

class TokenRequestSpec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:k8s.io.api.authentication.v1.TokenRequestSpec) */ {
 public:
  inline TokenRequestSpec() : TokenRequestSpec(nullptr) {}
  ~TokenRequestSpec() override;
  explicit PROTOBUF_CONSTEXPR TokenRequestSpec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TokenRequestSpec(const TokenRequestSpec& from);
  TokenRequestSpec(TokenRequestSpec&& from) noexcept
    : TokenRequestSpec() {
    *this = ::std::move(from);
  }

  inline TokenRequestSpec& operator=(const TokenRequestSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline TokenRequestSpec& operator=(TokenRequestSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TokenRequestSpec& default_instance() {
    return *internal_default_instance();
  }
  static inline const TokenRequestSpec* internal_default_instance() {
    return reinterpret_cast<const TokenRequestSpec*>(
               &_TokenRequestSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TokenRequestSpec& a, TokenRequestSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(TokenRequestSpec* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TokenRequestSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TokenRequestSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TokenRequestSpec>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TokenRequestSpec& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TokenRequestSpec& from) {
    TokenRequestSpec::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TokenRequestSpec* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "k8s.io.api.authentication.v1.TokenRequestSpec";
  }
  protected:
  explicit TokenRequestSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAudiencesFieldNumber = 1,
    kBoundObjectRefFieldNumber = 3,
    kExpirationSecondsFieldNumber = 4,
  };
  // repeated string audiences = 1;
  int audiences_size() const;
  private:
  int _internal_audiences_size() const;
  public:
  void clear_audiences();
  const std::string& audiences(int index) const;
  std::string* mutable_audiences(int index);
  void set_audiences(int index, const std::string& value);
  void set_audiences(int index, std::string&& value);
  void set_audiences(int index, const char* value);
  void set_audiences(int index, const char* value, size_t size);
  std::string* add_audiences();
  void add_audiences(const std::string& value);
  void add_audiences(std::string&& value);
  void add_audiences(const char* value);
  void add_audiences(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& audiences() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_audiences();
  private:
  const std::string& _internal_audiences(int index) const;
  std::string* _internal_add_audiences();
  public:

  // optional .k8s.io.api.authentication.v1.BoundObjectReference boundObjectRef = 3;
  bool has_boundobjectref() const;
  private:
  bool _internal_has_boundobjectref() const;
  public:
  void clear_boundobjectref();
  const ::k8s::io::api::authentication::v1::BoundObjectReference& boundobjectref() const;
  PROTOBUF_NODISCARD ::k8s::io::api::authentication::v1::BoundObjectReference* release_boundobjectref();
  ::k8s::io::api::authentication::v1::BoundObjectReference* mutable_boundobjectref();
  void set_allocated_boundobjectref(::k8s::io::api::authentication::v1::BoundObjectReference* boundobjectref);
  private:
  const ::k8s::io::api::authentication::v1::BoundObjectReference& _internal_boundobjectref() const;
  ::k8s::io::api::authentication::v1::BoundObjectReference* _internal_mutable_boundobjectref();
  public:
  void unsafe_arena_set_allocated_boundobjectref(
      ::k8s::io::api::authentication::v1::BoundObjectReference* boundobjectref);
  ::k8s::io::api::authentication::v1::BoundObjectReference* unsafe_arena_release_boundobjectref();

  // optional int64 expirationSeconds = 4;
  bool has_expirationseconds() const;
  private:
  bool _internal_has_expirationseconds() const;
  public:
  void clear_expirationseconds();
  int64_t expirationseconds() const;
  void set_expirationseconds(int64_t value);
  private:
  int64_t _internal_expirationseconds() const;
  void _internal_set_expirationseconds(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:k8s.io.api.authentication.v1.TokenRequestSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> audiences_;
    ::k8s::io::api::authentication::v1::BoundObjectReference* boundobjectref_;
    int64_t expirationseconds_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_k8s_2eio_2fapi_2fauthentication_2fv1_2fgenerated_2eproto;
};
// -------------------------------------------------------------------

class TokenRequestStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:k8s.io.api.authentication.v1.TokenRequestStatus) */ {
 public:
  inline TokenRequestStatus() : TokenRequestStatus(nullptr) {}
  ~TokenRequestStatus() override;
  explicit PROTOBUF_CONSTEXPR TokenRequestStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TokenRequestStatus(const TokenRequestStatus& from);
  TokenRequestStatus(TokenRequestStatus&& from) noexcept
    : TokenRequestStatus() {
    *this = ::std::move(from);
  }

  inline TokenRequestStatus& operator=(const TokenRequestStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline TokenRequestStatus& operator=(TokenRequestStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TokenRequestStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const TokenRequestStatus* internal_default_instance() {
    return reinterpret_cast<const TokenRequestStatus*>(
               &_TokenRequestStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TokenRequestStatus& a, TokenRequestStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(TokenRequestStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TokenRequestStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TokenRequestStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TokenRequestStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TokenRequestStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TokenRequestStatus& from) {
    TokenRequestStatus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TokenRequestStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "k8s.io.api.authentication.v1.TokenRequestStatus";
  }
  protected:
  explicit TokenRequestStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kExpirationTimestampFieldNumber = 2,
  };
  // optional string token = 1;
  bool has_token() const;
  private:
  bool _internal_has_token() const;
  public:
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.Time expirationTimestamp = 2;
  bool has_expirationtimestamp() const;
  private:
  bool _internal_has_expirationtimestamp() const;
  public:
  void clear_expirationtimestamp();
  const ::k8s::io::apimachinery::pkg::apis::meta::v1::Time& expirationtimestamp() const;
  PROTOBUF_NODISCARD ::k8s::io::apimachinery::pkg::apis::meta::v1::Time* release_expirationtimestamp();
  ::k8s::io::apimachinery::pkg::apis::meta::v1::Time* mutable_expirationtimestamp();
  void set_allocated_expirationtimestamp(::k8s::io::apimachinery::pkg::apis::meta::v1::Time* expirationtimestamp);
  private:
  const ::k8s::io::apimachinery::pkg::apis::meta::v1::Time& _internal_expirationtimestamp() const;
  ::k8s::io::apimachinery::pkg::apis::meta::v1::Time* _internal_mutable_expirationtimestamp();
  public:
  void unsafe_arena_set_allocated_expirationtimestamp(
      ::k8s::io::apimachinery::pkg::apis::meta::v1::Time* expirationtimestamp);
  ::k8s::io::apimachinery::pkg::apis::meta::v1::Time* unsafe_arena_release_expirationtimestamp();

  // @@protoc_insertion_point(class_scope:k8s.io.api.authentication.v1.TokenRequestStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
    ::k8s::io::apimachinery::pkg::apis::meta::v1::Time* expirationtimestamp_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_k8s_2eio_2fapi_2fauthentication_2fv1_2fgenerated_2eproto;
};
// -------------------------------------------------------------------

class TokenReview final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:k8s.io.api.authentication.v1.TokenReview) */ {
 public:
  inline TokenReview() : TokenReview(nullptr) {}
  ~TokenReview() override;
  explicit PROTOBUF_CONSTEXPR TokenReview(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TokenReview(const TokenReview& from);
  TokenReview(TokenReview&& from) noexcept
    : TokenReview() {
    *this = ::std::move(from);
  }

  inline TokenReview& operator=(const TokenReview& from) {
    CopyFrom(from);
    return *this;
  }
  inline TokenReview& operator=(TokenReview&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TokenReview& default_instance() {
    return *internal_default_instance();
  }
  static inline const TokenReview* internal_default_instance() {
    return reinterpret_cast<const TokenReview*>(
               &_TokenReview_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(TokenReview& a, TokenReview& b) {
    a.Swap(&b);
  }
  inline void Swap(TokenReview* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TokenReview* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TokenReview* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TokenReview>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TokenReview& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TokenReview& from) {
    TokenReview::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TokenReview* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "k8s.io.api.authentication.v1.TokenReview";
  }
  protected:
  explicit TokenReview(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 1,
    kSpecFieldNumber = 2,
    kStatusFieldNumber = 3,
  };
  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta& metadata() const;
  PROTOBUF_NODISCARD ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta* release_metadata();
  ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta* mutable_metadata();
  void set_allocated_metadata(::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta* metadata);
  private:
  const ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta& _internal_metadata() const;
  ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta* metadata);
  ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta* unsafe_arena_release_metadata();

  // optional .k8s.io.api.authentication.v1.TokenReviewSpec spec = 2;
  bool has_spec() const;
  private:
  bool _internal_has_spec() const;
  public:
  void clear_spec();
  const ::k8s::io::api::authentication::v1::TokenReviewSpec& spec() const;
  PROTOBUF_NODISCARD ::k8s::io::api::authentication::v1::TokenReviewSpec* release_spec();
  ::k8s::io::api::authentication::v1::TokenReviewSpec* mutable_spec();
  void set_allocated_spec(::k8s::io::api::authentication::v1::TokenReviewSpec* spec);
  private:
  const ::k8s::io::api::authentication::v1::TokenReviewSpec& _internal_spec() const;
  ::k8s::io::api::authentication::v1::TokenReviewSpec* _internal_mutable_spec();
  public:
  void unsafe_arena_set_allocated_spec(
      ::k8s::io::api::authentication::v1::TokenReviewSpec* spec);
  ::k8s::io::api::authentication::v1::TokenReviewSpec* unsafe_arena_release_spec();

  // optional .k8s.io.api.authentication.v1.TokenReviewStatus status = 3;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::k8s::io::api::authentication::v1::TokenReviewStatus& status() const;
  PROTOBUF_NODISCARD ::k8s::io::api::authentication::v1::TokenReviewStatus* release_status();
  ::k8s::io::api::authentication::v1::TokenReviewStatus* mutable_status();
  void set_allocated_status(::k8s::io::api::authentication::v1::TokenReviewStatus* status);
  private:
  const ::k8s::io::api::authentication::v1::TokenReviewStatus& _internal_status() const;
  ::k8s::io::api::authentication::v1::TokenReviewStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::k8s::io::api::authentication::v1::TokenReviewStatus* status);
  ::k8s::io::api::authentication::v1::TokenReviewStatus* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:k8s.io.api.authentication.v1.TokenReview)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta* metadata_;
    ::k8s::io::api::authentication::v1::TokenReviewSpec* spec_;
    ::k8s::io::api::authentication::v1::TokenReviewStatus* status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_k8s_2eio_2fapi_2fauthentication_2fv1_2fgenerated_2eproto;
};
// -------------------------------------------------------------------

class TokenReviewSpec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:k8s.io.api.authentication.v1.TokenReviewSpec) */ {
 public:
  inline TokenReviewSpec() : TokenReviewSpec(nullptr) {}
  ~TokenReviewSpec() override;
  explicit PROTOBUF_CONSTEXPR TokenReviewSpec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TokenReviewSpec(const TokenReviewSpec& from);
  TokenReviewSpec(TokenReviewSpec&& from) noexcept
    : TokenReviewSpec() {
    *this = ::std::move(from);
  }

  inline TokenReviewSpec& operator=(const TokenReviewSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline TokenReviewSpec& operator=(TokenReviewSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TokenReviewSpec& default_instance() {
    return *internal_default_instance();
  }
  static inline const TokenReviewSpec* internal_default_instance() {
    return reinterpret_cast<const TokenReviewSpec*>(
               &_TokenReviewSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(TokenReviewSpec& a, TokenReviewSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(TokenReviewSpec* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TokenReviewSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TokenReviewSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TokenReviewSpec>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TokenReviewSpec& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TokenReviewSpec& from) {
    TokenReviewSpec::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TokenReviewSpec* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "k8s.io.api.authentication.v1.TokenReviewSpec";
  }
  protected:
  explicit TokenReviewSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAudiencesFieldNumber = 2,
    kTokenFieldNumber = 1,
  };
  // repeated string audiences = 2;
  int audiences_size() const;
  private:
  int _internal_audiences_size() const;
  public:
  void clear_audiences();
  const std::string& audiences(int index) const;
  std::string* mutable_audiences(int index);
  void set_audiences(int index, const std::string& value);
  void set_audiences(int index, std::string&& value);
  void set_audiences(int index, const char* value);
  void set_audiences(int index, const char* value, size_t size);
  std::string* add_audiences();
  void add_audiences(const std::string& value);
  void add_audiences(std::string&& value);
  void add_audiences(const char* value);
  void add_audiences(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& audiences() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_audiences();
  private:
  const std::string& _internal_audiences(int index) const;
  std::string* _internal_add_audiences();
  public:

  // optional string token = 1;
  bool has_token() const;
  private:
  bool _internal_has_token() const;
  public:
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // @@protoc_insertion_point(class_scope:k8s.io.api.authentication.v1.TokenReviewSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> audiences_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_k8s_2eio_2fapi_2fauthentication_2fv1_2fgenerated_2eproto;
};
// -------------------------------------------------------------------

class TokenReviewStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:k8s.io.api.authentication.v1.TokenReviewStatus) */ {
 public:
  inline TokenReviewStatus() : TokenReviewStatus(nullptr) {}
  ~TokenReviewStatus() override;
  explicit PROTOBUF_CONSTEXPR TokenReviewStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TokenReviewStatus(const TokenReviewStatus& from);
  TokenReviewStatus(TokenReviewStatus&& from) noexcept
    : TokenReviewStatus() {
    *this = ::std::move(from);
  }

  inline TokenReviewStatus& operator=(const TokenReviewStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline TokenReviewStatus& operator=(TokenReviewStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TokenReviewStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const TokenReviewStatus* internal_default_instance() {
    return reinterpret_cast<const TokenReviewStatus*>(
               &_TokenReviewStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(TokenReviewStatus& a, TokenReviewStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(TokenReviewStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TokenReviewStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TokenReviewStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TokenReviewStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TokenReviewStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TokenReviewStatus& from) {
    TokenReviewStatus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TokenReviewStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "k8s.io.api.authentication.v1.TokenReviewStatus";
  }
  protected:
  explicit TokenReviewStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAudiencesFieldNumber = 4,
    kErrorFieldNumber = 3,
    kUserFieldNumber = 2,
    kAuthenticatedFieldNumber = 1,
  };
  // repeated string audiences = 4;
  int audiences_size() const;
  private:
  int _internal_audiences_size() const;
  public:
  void clear_audiences();
  const std::string& audiences(int index) const;
  std::string* mutable_audiences(int index);
  void set_audiences(int index, const std::string& value);
  void set_audiences(int index, std::string&& value);
  void set_audiences(int index, const char* value);
  void set_audiences(int index, const char* value, size_t size);
  std::string* add_audiences();
  void add_audiences(const std::string& value);
  void add_audiences(std::string&& value);
  void add_audiences(const char* value);
  void add_audiences(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& audiences() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_audiences();
  private:
  const std::string& _internal_audiences(int index) const;
  std::string* _internal_add_audiences();
  public:

  // optional string error = 3;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // optional .k8s.io.api.authentication.v1.UserInfo user = 2;
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const ::k8s::io::api::authentication::v1::UserInfo& user() const;
  PROTOBUF_NODISCARD ::k8s::io::api::authentication::v1::UserInfo* release_user();
  ::k8s::io::api::authentication::v1::UserInfo* mutable_user();
  void set_allocated_user(::k8s::io::api::authentication::v1::UserInfo* user);
  private:
  const ::k8s::io::api::authentication::v1::UserInfo& _internal_user() const;
  ::k8s::io::api::authentication::v1::UserInfo* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::k8s::io::api::authentication::v1::UserInfo* user);
  ::k8s::io::api::authentication::v1::UserInfo* unsafe_arena_release_user();

  // optional bool authenticated = 1;
  bool has_authenticated() const;
  private:
  bool _internal_has_authenticated() const;
  public:
  void clear_authenticated();
  bool authenticated() const;
  void set_authenticated(bool value);
  private:
  bool _internal_authenticated() const;
  void _internal_set_authenticated(bool value);
  public:

  // @@protoc_insertion_point(class_scope:k8s.io.api.authentication.v1.TokenReviewStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> audiences_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
    ::k8s::io::api::authentication::v1::UserInfo* user_;
    bool authenticated_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_k8s_2eio_2fapi_2fauthentication_2fv1_2fgenerated_2eproto;
};
// -------------------------------------------------------------------

class UserInfo_ExtraEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<UserInfo_ExtraEntry_DoNotUse, 
    std::string, ::k8s::io::api::authentication::v1::ExtraValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<UserInfo_ExtraEntry_DoNotUse, 
    std::string, ::k8s::io::api::authentication::v1::ExtraValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  UserInfo_ExtraEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR UserInfo_ExtraEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit UserInfo_ExtraEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const UserInfo_ExtraEntry_DoNotUse& other);
  static const UserInfo_ExtraEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const UserInfo_ExtraEntry_DoNotUse*>(&_UserInfo_ExtraEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "k8s.io.api.authentication.v1.UserInfo.ExtraEntry.key");
#else
    (void) s;
#endif
    return true;
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_k8s_2eio_2fapi_2fauthentication_2fv1_2fgenerated_2eproto;
};

// -------------------------------------------------------------------

class UserInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:k8s.io.api.authentication.v1.UserInfo) */ {
 public:
  inline UserInfo() : UserInfo(nullptr) {}
  ~UserInfo() override;
  explicit PROTOBUF_CONSTEXPR UserInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserInfo(const UserInfo& from);
  UserInfo(UserInfo&& from) noexcept
    : UserInfo() {
    *this = ::std::move(from);
  }

  inline UserInfo& operator=(const UserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInfo& operator=(UserInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserInfo* internal_default_instance() {
    return reinterpret_cast<const UserInfo*>(
               &_UserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(UserInfo& a, UserInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(UserInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserInfo& from) {
    UserInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "k8s.io.api.authentication.v1.UserInfo";
  }
  protected:
  explicit UserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kGroupsFieldNumber = 3,
    kExtraFieldNumber = 4,
    kUsernameFieldNumber = 1,
    kUidFieldNumber = 2,
  };
  // repeated string groups = 3;
  int groups_size() const;
  private:
  int _internal_groups_size() const;
  public:
  void clear_groups();
  const std::string& groups(int index) const;
  std::string* mutable_groups(int index);
  void set_groups(int index, const std::string& value);
  void set_groups(int index, std::string&& value);
  void set_groups(int index, const char* value);
  void set_groups(int index, const char* value, size_t size);
  std::string* add_groups();
  void add_groups(const std::string& value);
  void add_groups(std::string&& value);
  void add_groups(const char* value);
  void add_groups(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& groups() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_groups();
  private:
  const std::string& _internal_groups(int index) const;
  std::string* _internal_add_groups();
  public:

  // map<string, .k8s.io.api.authentication.v1.ExtraValue> extra = 4;
  int extra_size() const;
  private:
  int _internal_extra_size() const;
  public:
  void clear_extra();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::k8s::io::api::authentication::v1::ExtraValue >&
      _internal_extra() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::k8s::io::api::authentication::v1::ExtraValue >*
      _internal_mutable_extra();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::k8s::io::api::authentication::v1::ExtraValue >&
      extra() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::k8s::io::api::authentication::v1::ExtraValue >*
      mutable_extra();

  // optional string username = 1;
  bool has_username() const;
  private:
  bool _internal_has_username() const;
  public:
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // optional string uid = 2;
  bool has_uid() const;
  private:
  bool _internal_has_uid() const;
  public:
  void clear_uid();
  const std::string& uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uid();
  PROTOBUF_NODISCARD std::string* release_uid();
  void set_allocated_uid(std::string* uid);
  private:
  const std::string& _internal_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uid(const std::string& value);
  std::string* _internal_mutable_uid();
  public:

  // @@protoc_insertion_point(class_scope:k8s.io.api.authentication.v1.UserInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> groups_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        UserInfo_ExtraEntry_DoNotUse,
        std::string, ::k8s::io::api::authentication::v1::ExtraValue,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> extra_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_k8s_2eio_2fapi_2fauthentication_2fv1_2fgenerated_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BoundObjectReference

// optional string kind = 1;
inline bool BoundObjectReference::_internal_has_kind() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BoundObjectReference::has_kind() const {
  return _internal_has_kind();
}
inline void BoundObjectReference::clear_kind() {
  _impl_.kind_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BoundObjectReference::kind() const {
  // @@protoc_insertion_point(field_get:k8s.io.api.authentication.v1.BoundObjectReference.kind)
  return _internal_kind();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BoundObjectReference::set_kind(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.kind_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:k8s.io.api.authentication.v1.BoundObjectReference.kind)
}
inline std::string* BoundObjectReference::mutable_kind() {
  std::string* _s = _internal_mutable_kind();
  // @@protoc_insertion_point(field_mutable:k8s.io.api.authentication.v1.BoundObjectReference.kind)
  return _s;
}
inline const std::string& BoundObjectReference::_internal_kind() const {
  return _impl_.kind_.Get();
}
inline void BoundObjectReference::_internal_set_kind(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.kind_.Set(value, GetArenaForAllocation());
}
inline std::string* BoundObjectReference::_internal_mutable_kind() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.kind_.Mutable(GetArenaForAllocation());
}
inline std::string* BoundObjectReference::release_kind() {
  // @@protoc_insertion_point(field_release:k8s.io.api.authentication.v1.BoundObjectReference.kind)
  if (!_internal_has_kind()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.kind_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.kind_.IsDefault()) {
    _impl_.kind_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BoundObjectReference::set_allocated_kind(std::string* kind) {
  if (kind != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.kind_.SetAllocated(kind, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.kind_.IsDefault()) {
    _impl_.kind_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:k8s.io.api.authentication.v1.BoundObjectReference.kind)
}

// optional string apiVersion = 2;
inline bool BoundObjectReference::_internal_has_apiversion() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BoundObjectReference::has_apiversion() const {
  return _internal_has_apiversion();
}
inline void BoundObjectReference::clear_apiversion() {
  _impl_.apiversion_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BoundObjectReference::apiversion() const {
  // @@protoc_insertion_point(field_get:k8s.io.api.authentication.v1.BoundObjectReference.apiVersion)
  return _internal_apiversion();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BoundObjectReference::set_apiversion(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.apiversion_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:k8s.io.api.authentication.v1.BoundObjectReference.apiVersion)
}
inline std::string* BoundObjectReference::mutable_apiversion() {
  std::string* _s = _internal_mutable_apiversion();
  // @@protoc_insertion_point(field_mutable:k8s.io.api.authentication.v1.BoundObjectReference.apiVersion)
  return _s;
}
inline const std::string& BoundObjectReference::_internal_apiversion() const {
  return _impl_.apiversion_.Get();
}
inline void BoundObjectReference::_internal_set_apiversion(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.apiversion_.Set(value, GetArenaForAllocation());
}
inline std::string* BoundObjectReference::_internal_mutable_apiversion() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.apiversion_.Mutable(GetArenaForAllocation());
}
inline std::string* BoundObjectReference::release_apiversion() {
  // @@protoc_insertion_point(field_release:k8s.io.api.authentication.v1.BoundObjectReference.apiVersion)
  if (!_internal_has_apiversion()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.apiversion_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.apiversion_.IsDefault()) {
    _impl_.apiversion_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BoundObjectReference::set_allocated_apiversion(std::string* apiversion) {
  if (apiversion != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.apiversion_.SetAllocated(apiversion, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.apiversion_.IsDefault()) {
    _impl_.apiversion_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:k8s.io.api.authentication.v1.BoundObjectReference.apiVersion)
}

// optional string name = 3;
inline bool BoundObjectReference::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BoundObjectReference::has_name() const {
  return _internal_has_name();
}
inline void BoundObjectReference::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& BoundObjectReference::name() const {
  // @@protoc_insertion_point(field_get:k8s.io.api.authentication.v1.BoundObjectReference.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BoundObjectReference::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:k8s.io.api.authentication.v1.BoundObjectReference.name)
}
inline std::string* BoundObjectReference::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:k8s.io.api.authentication.v1.BoundObjectReference.name)
  return _s;
}
inline const std::string& BoundObjectReference::_internal_name() const {
  return _impl_.name_.Get();
}
inline void BoundObjectReference::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* BoundObjectReference::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* BoundObjectReference::release_name() {
  // @@protoc_insertion_point(field_release:k8s.io.api.authentication.v1.BoundObjectReference.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BoundObjectReference::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:k8s.io.api.authentication.v1.BoundObjectReference.name)
}

// optional string uID = 4;
inline bool BoundObjectReference::_internal_has_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BoundObjectReference::has_uid() const {
  return _internal_has_uid();
}
inline void BoundObjectReference::clear_uid() {
  _impl_.uid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& BoundObjectReference::uid() const {
  // @@protoc_insertion_point(field_get:k8s.io.api.authentication.v1.BoundObjectReference.uID)
  return _internal_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BoundObjectReference::set_uid(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.uid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:k8s.io.api.authentication.v1.BoundObjectReference.uID)
}
inline std::string* BoundObjectReference::mutable_uid() {
  std::string* _s = _internal_mutable_uid();
  // @@protoc_insertion_point(field_mutable:k8s.io.api.authentication.v1.BoundObjectReference.uID)
  return _s;
}
inline const std::string& BoundObjectReference::_internal_uid() const {
  return _impl_.uid_.Get();
}
inline void BoundObjectReference::_internal_set_uid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.uid_.Set(value, GetArenaForAllocation());
}
inline std::string* BoundObjectReference::_internal_mutable_uid() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.uid_.Mutable(GetArenaForAllocation());
}
inline std::string* BoundObjectReference::release_uid() {
  // @@protoc_insertion_point(field_release:k8s.io.api.authentication.v1.BoundObjectReference.uID)
  if (!_internal_has_uid()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.uid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uid_.IsDefault()) {
    _impl_.uid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BoundObjectReference::set_allocated_uid(std::string* uid) {
  if (uid != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.uid_.SetAllocated(uid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uid_.IsDefault()) {
    _impl_.uid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:k8s.io.api.authentication.v1.BoundObjectReference.uID)
}

// -------------------------------------------------------------------

// ExtraValue

// repeated string items = 1;
inline int ExtraValue::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int ExtraValue::items_size() const {
  return _internal_items_size();
}
inline void ExtraValue::clear_items() {
  _impl_.items_.Clear();
}
inline std::string* ExtraValue::add_items() {
  std::string* _s = _internal_add_items();
  // @@protoc_insertion_point(field_add_mutable:k8s.io.api.authentication.v1.ExtraValue.items)
  return _s;
}
inline const std::string& ExtraValue::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const std::string& ExtraValue::items(int index) const {
  // @@protoc_insertion_point(field_get:k8s.io.api.authentication.v1.ExtraValue.items)
  return _internal_items(index);
}
inline std::string* ExtraValue::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:k8s.io.api.authentication.v1.ExtraValue.items)
  return _impl_.items_.Mutable(index);
}
inline void ExtraValue::set_items(int index, const std::string& value) {
  _impl_.items_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:k8s.io.api.authentication.v1.ExtraValue.items)
}
inline void ExtraValue::set_items(int index, std::string&& value) {
  _impl_.items_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:k8s.io.api.authentication.v1.ExtraValue.items)
}
inline void ExtraValue::set_items(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.items_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:k8s.io.api.authentication.v1.ExtraValue.items)
}
inline void ExtraValue::set_items(int index, const char* value, size_t size) {
  _impl_.items_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:k8s.io.api.authentication.v1.ExtraValue.items)
}
inline std::string* ExtraValue::_internal_add_items() {
  return _impl_.items_.Add();
}
inline void ExtraValue::add_items(const std::string& value) {
  _impl_.items_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:k8s.io.api.authentication.v1.ExtraValue.items)
}
inline void ExtraValue::add_items(std::string&& value) {
  _impl_.items_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:k8s.io.api.authentication.v1.ExtraValue.items)
}
inline void ExtraValue::add_items(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.items_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:k8s.io.api.authentication.v1.ExtraValue.items)
}
inline void ExtraValue::add_items(const char* value, size_t size) {
  _impl_.items_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:k8s.io.api.authentication.v1.ExtraValue.items)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ExtraValue::items() const {
  // @@protoc_insertion_point(field_list:k8s.io.api.authentication.v1.ExtraValue.items)
  return _impl_.items_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ExtraValue::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:k8s.io.api.authentication.v1.ExtraValue.items)
  return &_impl_.items_;
}

// -------------------------------------------------------------------

// SelfSubjectReview

// optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
inline bool SelfSubjectReview::_internal_has_metadata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.metadata_ != nullptr);
  return value;
}
inline bool SelfSubjectReview::has_metadata() const {
  return _internal_has_metadata();
}
inline const ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta& SelfSubjectReview::_internal_metadata() const {
  const ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta* p = _impl_.metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta&>(
      ::k8s::io::apimachinery::pkg::apis::meta::v1::_ObjectMeta_default_instance_);
}
inline const ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta& SelfSubjectReview::metadata() const {
  // @@protoc_insertion_point(field_get:k8s.io.api.authentication.v1.SelfSubjectReview.metadata)
  return _internal_metadata();
}
inline void SelfSubjectReview::unsafe_arena_set_allocated_metadata(
    ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta* metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metadata_);
  }
  _impl_.metadata_ = metadata;
  if (metadata) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:k8s.io.api.authentication.v1.SelfSubjectReview.metadata)
}
inline ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta* SelfSubjectReview::release_metadata() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta* temp = _impl_.metadata_;
  _impl_.metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta* SelfSubjectReview::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:k8s.io.api.authentication.v1.SelfSubjectReview.metadata)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta* temp = _impl_.metadata_;
  _impl_.metadata_ = nullptr;
  return temp;
}
inline ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta* SelfSubjectReview::_internal_mutable_metadata() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta>(GetArenaForAllocation());
    _impl_.metadata_ = p;
  }
  return _impl_.metadata_;
}
inline ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta* SelfSubjectReview::mutable_metadata() {
  ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:k8s.io.api.authentication.v1.SelfSubjectReview.metadata)
  return _msg;
}
inline void SelfSubjectReview::set_allocated_metadata(::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metadata_);
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata));
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:k8s.io.api.authentication.v1.SelfSubjectReview.metadata)
}

// optional .k8s.io.api.authentication.v1.SelfSubjectReviewStatus status = 2;
inline bool SelfSubjectReview::_internal_has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.status_ != nullptr);
  return value;
}
inline bool SelfSubjectReview::has_status() const {
  return _internal_has_status();
}
inline void SelfSubjectReview::clear_status() {
  if (_impl_.status_ != nullptr) _impl_.status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::k8s::io::api::authentication::v1::SelfSubjectReviewStatus& SelfSubjectReview::_internal_status() const {
  const ::k8s::io::api::authentication::v1::SelfSubjectReviewStatus* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::k8s::io::api::authentication::v1::SelfSubjectReviewStatus&>(
      ::k8s::io::api::authentication::v1::_SelfSubjectReviewStatus_default_instance_);
}
inline const ::k8s::io::api::authentication::v1::SelfSubjectReviewStatus& SelfSubjectReview::status() const {
  // @@protoc_insertion_point(field_get:k8s.io.api.authentication.v1.SelfSubjectReview.status)
  return _internal_status();
}
inline void SelfSubjectReview::unsafe_arena_set_allocated_status(
    ::k8s::io::api::authentication::v1::SelfSubjectReviewStatus* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:k8s.io.api.authentication.v1.SelfSubjectReview.status)
}
inline ::k8s::io::api::authentication::v1::SelfSubjectReviewStatus* SelfSubjectReview::release_status() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::k8s::io::api::authentication::v1::SelfSubjectReviewStatus* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::k8s::io::api::authentication::v1::SelfSubjectReviewStatus* SelfSubjectReview::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:k8s.io.api.authentication.v1.SelfSubjectReview.status)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::k8s::io::api::authentication::v1::SelfSubjectReviewStatus* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::k8s::io::api::authentication::v1::SelfSubjectReviewStatus* SelfSubjectReview::_internal_mutable_status() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::k8s::io::api::authentication::v1::SelfSubjectReviewStatus>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::k8s::io::api::authentication::v1::SelfSubjectReviewStatus* SelfSubjectReview::mutable_status() {
  ::k8s::io::api::authentication::v1::SelfSubjectReviewStatus* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:k8s.io.api.authentication.v1.SelfSubjectReview.status)
  return _msg;
}
inline void SelfSubjectReview::set_allocated_status(::k8s::io::api::authentication::v1::SelfSubjectReviewStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:k8s.io.api.authentication.v1.SelfSubjectReview.status)
}

// -------------------------------------------------------------------

// SelfSubjectReviewStatus

// optional .k8s.io.api.authentication.v1.UserInfo userInfo = 1;
inline bool SelfSubjectReviewStatus::_internal_has_userinfo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.userinfo_ != nullptr);
  return value;
}
inline bool SelfSubjectReviewStatus::has_userinfo() const {
  return _internal_has_userinfo();
}
inline void SelfSubjectReviewStatus::clear_userinfo() {
  if (_impl_.userinfo_ != nullptr) _impl_.userinfo_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::k8s::io::api::authentication::v1::UserInfo& SelfSubjectReviewStatus::_internal_userinfo() const {
  const ::k8s::io::api::authentication::v1::UserInfo* p = _impl_.userinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::k8s::io::api::authentication::v1::UserInfo&>(
      ::k8s::io::api::authentication::v1::_UserInfo_default_instance_);
}
inline const ::k8s::io::api::authentication::v1::UserInfo& SelfSubjectReviewStatus::userinfo() const {
  // @@protoc_insertion_point(field_get:k8s.io.api.authentication.v1.SelfSubjectReviewStatus.userInfo)
  return _internal_userinfo();
}
inline void SelfSubjectReviewStatus::unsafe_arena_set_allocated_userinfo(
    ::k8s::io::api::authentication::v1::UserInfo* userinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  _impl_.userinfo_ = userinfo;
  if (userinfo) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:k8s.io.api.authentication.v1.SelfSubjectReviewStatus.userInfo)
}
inline ::k8s::io::api::authentication::v1::UserInfo* SelfSubjectReviewStatus::release_userinfo() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::k8s::io::api::authentication::v1::UserInfo* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::k8s::io::api::authentication::v1::UserInfo* SelfSubjectReviewStatus::unsafe_arena_release_userinfo() {
  // @@protoc_insertion_point(field_release:k8s.io.api.authentication.v1.SelfSubjectReviewStatus.userInfo)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::k8s::io::api::authentication::v1::UserInfo* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
  return temp;
}
inline ::k8s::io::api::authentication::v1::UserInfo* SelfSubjectReviewStatus::_internal_mutable_userinfo() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.userinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::k8s::io::api::authentication::v1::UserInfo>(GetArenaForAllocation());
    _impl_.userinfo_ = p;
  }
  return _impl_.userinfo_;
}
inline ::k8s::io::api::authentication::v1::UserInfo* SelfSubjectReviewStatus::mutable_userinfo() {
  ::k8s::io::api::authentication::v1::UserInfo* _msg = _internal_mutable_userinfo();
  // @@protoc_insertion_point(field_mutable:k8s.io.api.authentication.v1.SelfSubjectReviewStatus.userInfo)
  return _msg;
}
inline void SelfSubjectReviewStatus::set_allocated_userinfo(::k8s::io::api::authentication::v1::UserInfo* userinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.userinfo_;
  }
  if (userinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(userinfo);
    if (message_arena != submessage_arena) {
      userinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userinfo, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.userinfo_ = userinfo;
  // @@protoc_insertion_point(field_set_allocated:k8s.io.api.authentication.v1.SelfSubjectReviewStatus.userInfo)
}

// -------------------------------------------------------------------

// TokenRequest

// optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
inline bool TokenRequest::_internal_has_metadata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.metadata_ != nullptr);
  return value;
}
inline bool TokenRequest::has_metadata() const {
  return _internal_has_metadata();
}
inline const ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta& TokenRequest::_internal_metadata() const {
  const ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta* p = _impl_.metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta&>(
      ::k8s::io::apimachinery::pkg::apis::meta::v1::_ObjectMeta_default_instance_);
}
inline const ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta& TokenRequest::metadata() const {
  // @@protoc_insertion_point(field_get:k8s.io.api.authentication.v1.TokenRequest.metadata)
  return _internal_metadata();
}
inline void TokenRequest::unsafe_arena_set_allocated_metadata(
    ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta* metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metadata_);
  }
  _impl_.metadata_ = metadata;
  if (metadata) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:k8s.io.api.authentication.v1.TokenRequest.metadata)
}
inline ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta* TokenRequest::release_metadata() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta* temp = _impl_.metadata_;
  _impl_.metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta* TokenRequest::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:k8s.io.api.authentication.v1.TokenRequest.metadata)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta* temp = _impl_.metadata_;
  _impl_.metadata_ = nullptr;
  return temp;
}
inline ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta* TokenRequest::_internal_mutable_metadata() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta>(GetArenaForAllocation());
    _impl_.metadata_ = p;
  }
  return _impl_.metadata_;
}
inline ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta* TokenRequest::mutable_metadata() {
  ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:k8s.io.api.authentication.v1.TokenRequest.metadata)
  return _msg;
}
inline void TokenRequest::set_allocated_metadata(::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metadata_);
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata));
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:k8s.io.api.authentication.v1.TokenRequest.metadata)
}

// optional .k8s.io.api.authentication.v1.TokenRequestSpec spec = 2;
inline bool TokenRequest::_internal_has_spec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.spec_ != nullptr);
  return value;
}
inline bool TokenRequest::has_spec() const {
  return _internal_has_spec();
}
inline void TokenRequest::clear_spec() {
  if (_impl_.spec_ != nullptr) _impl_.spec_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::k8s::io::api::authentication::v1::TokenRequestSpec& TokenRequest::_internal_spec() const {
  const ::k8s::io::api::authentication::v1::TokenRequestSpec* p = _impl_.spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::k8s::io::api::authentication::v1::TokenRequestSpec&>(
      ::k8s::io::api::authentication::v1::_TokenRequestSpec_default_instance_);
}
inline const ::k8s::io::api::authentication::v1::TokenRequestSpec& TokenRequest::spec() const {
  // @@protoc_insertion_point(field_get:k8s.io.api.authentication.v1.TokenRequest.spec)
  return _internal_spec();
}
inline void TokenRequest::unsafe_arena_set_allocated_spec(
    ::k8s::io::api::authentication::v1::TokenRequestSpec* spec) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.spec_);
  }
  _impl_.spec_ = spec;
  if (spec) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:k8s.io.api.authentication.v1.TokenRequest.spec)
}
inline ::k8s::io::api::authentication::v1::TokenRequestSpec* TokenRequest::release_spec() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::k8s::io::api::authentication::v1::TokenRequestSpec* temp = _impl_.spec_;
  _impl_.spec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::k8s::io::api::authentication::v1::TokenRequestSpec* TokenRequest::unsafe_arena_release_spec() {
  // @@protoc_insertion_point(field_release:k8s.io.api.authentication.v1.TokenRequest.spec)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::k8s::io::api::authentication::v1::TokenRequestSpec* temp = _impl_.spec_;
  _impl_.spec_ = nullptr;
  return temp;
}
inline ::k8s::io::api::authentication::v1::TokenRequestSpec* TokenRequest::_internal_mutable_spec() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::k8s::io::api::authentication::v1::TokenRequestSpec>(GetArenaForAllocation());
    _impl_.spec_ = p;
  }
  return _impl_.spec_;
}
inline ::k8s::io::api::authentication::v1::TokenRequestSpec* TokenRequest::mutable_spec() {
  ::k8s::io::api::authentication::v1::TokenRequestSpec* _msg = _internal_mutable_spec();
  // @@protoc_insertion_point(field_mutable:k8s.io.api.authentication.v1.TokenRequest.spec)
  return _msg;
}
inline void TokenRequest::set_allocated_spec(::k8s::io::api::authentication::v1::TokenRequestSpec* spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.spec_;
  }
  if (spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(spec);
    if (message_arena != submessage_arena) {
      spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spec, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.spec_ = spec;
  // @@protoc_insertion_point(field_set_allocated:k8s.io.api.authentication.v1.TokenRequest.spec)
}

// optional .k8s.io.api.authentication.v1.TokenRequestStatus status = 3;
inline bool TokenRequest::_internal_has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.status_ != nullptr);
  return value;
}
inline bool TokenRequest::has_status() const {
  return _internal_has_status();
}
inline void TokenRequest::clear_status() {
  if (_impl_.status_ != nullptr) _impl_.status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::k8s::io::api::authentication::v1::TokenRequestStatus& TokenRequest::_internal_status() const {
  const ::k8s::io::api::authentication::v1::TokenRequestStatus* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::k8s::io::api::authentication::v1::TokenRequestStatus&>(
      ::k8s::io::api::authentication::v1::_TokenRequestStatus_default_instance_);
}
inline const ::k8s::io::api::authentication::v1::TokenRequestStatus& TokenRequest::status() const {
  // @@protoc_insertion_point(field_get:k8s.io.api.authentication.v1.TokenRequest.status)
  return _internal_status();
}
inline void TokenRequest::unsafe_arena_set_allocated_status(
    ::k8s::io::api::authentication::v1::TokenRequestStatus* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:k8s.io.api.authentication.v1.TokenRequest.status)
}
inline ::k8s::io::api::authentication::v1::TokenRequestStatus* TokenRequest::release_status() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::k8s::io::api::authentication::v1::TokenRequestStatus* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::k8s::io::api::authentication::v1::TokenRequestStatus* TokenRequest::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:k8s.io.api.authentication.v1.TokenRequest.status)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::k8s::io::api::authentication::v1::TokenRequestStatus* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::k8s::io::api::authentication::v1::TokenRequestStatus* TokenRequest::_internal_mutable_status() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::k8s::io::api::authentication::v1::TokenRequestStatus>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::k8s::io::api::authentication::v1::TokenRequestStatus* TokenRequest::mutable_status() {
  ::k8s::io::api::authentication::v1::TokenRequestStatus* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:k8s.io.api.authentication.v1.TokenRequest.status)
  return _msg;
}
inline void TokenRequest::set_allocated_status(::k8s::io::api::authentication::v1::TokenRequestStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:k8s.io.api.authentication.v1.TokenRequest.status)
}

// -------------------------------------------------------------------

// TokenRequestSpec

// repeated string audiences = 1;
inline int TokenRequestSpec::_internal_audiences_size() const {
  return _impl_.audiences_.size();
}
inline int TokenRequestSpec::audiences_size() const {
  return _internal_audiences_size();
}
inline void TokenRequestSpec::clear_audiences() {
  _impl_.audiences_.Clear();
}
inline std::string* TokenRequestSpec::add_audiences() {
  std::string* _s = _internal_add_audiences();
  // @@protoc_insertion_point(field_add_mutable:k8s.io.api.authentication.v1.TokenRequestSpec.audiences)
  return _s;
}
inline const std::string& TokenRequestSpec::_internal_audiences(int index) const {
  return _impl_.audiences_.Get(index);
}
inline const std::string& TokenRequestSpec::audiences(int index) const {
  // @@protoc_insertion_point(field_get:k8s.io.api.authentication.v1.TokenRequestSpec.audiences)
  return _internal_audiences(index);
}
inline std::string* TokenRequestSpec::mutable_audiences(int index) {
  // @@protoc_insertion_point(field_mutable:k8s.io.api.authentication.v1.TokenRequestSpec.audiences)
  return _impl_.audiences_.Mutable(index);
}
inline void TokenRequestSpec::set_audiences(int index, const std::string& value) {
  _impl_.audiences_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:k8s.io.api.authentication.v1.TokenRequestSpec.audiences)
}
inline void TokenRequestSpec::set_audiences(int index, std::string&& value) {
  _impl_.audiences_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:k8s.io.api.authentication.v1.TokenRequestSpec.audiences)
}
inline void TokenRequestSpec::set_audiences(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.audiences_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:k8s.io.api.authentication.v1.TokenRequestSpec.audiences)
}
inline void TokenRequestSpec::set_audiences(int index, const char* value, size_t size) {
  _impl_.audiences_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:k8s.io.api.authentication.v1.TokenRequestSpec.audiences)
}
inline std::string* TokenRequestSpec::_internal_add_audiences() {
  return _impl_.audiences_.Add();
}
inline void TokenRequestSpec::add_audiences(const std::string& value) {
  _impl_.audiences_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:k8s.io.api.authentication.v1.TokenRequestSpec.audiences)
}
inline void TokenRequestSpec::add_audiences(std::string&& value) {
  _impl_.audiences_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:k8s.io.api.authentication.v1.TokenRequestSpec.audiences)
}
inline void TokenRequestSpec::add_audiences(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.audiences_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:k8s.io.api.authentication.v1.TokenRequestSpec.audiences)
}
inline void TokenRequestSpec::add_audiences(const char* value, size_t size) {
  _impl_.audiences_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:k8s.io.api.authentication.v1.TokenRequestSpec.audiences)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TokenRequestSpec::audiences() const {
  // @@protoc_insertion_point(field_list:k8s.io.api.authentication.v1.TokenRequestSpec.audiences)
  return _impl_.audiences_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TokenRequestSpec::mutable_audiences() {
  // @@protoc_insertion_point(field_mutable_list:k8s.io.api.authentication.v1.TokenRequestSpec.audiences)
  return &_impl_.audiences_;
}

// optional int64 expirationSeconds = 4;
inline bool TokenRequestSpec::_internal_has_expirationseconds() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TokenRequestSpec::has_expirationseconds() const {
  return _internal_has_expirationseconds();
}
inline void TokenRequestSpec::clear_expirationseconds() {
  _impl_.expirationseconds_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int64_t TokenRequestSpec::_internal_expirationseconds() const {
  return _impl_.expirationseconds_;
}
inline int64_t TokenRequestSpec::expirationseconds() const {
  // @@protoc_insertion_point(field_get:k8s.io.api.authentication.v1.TokenRequestSpec.expirationSeconds)
  return _internal_expirationseconds();
}
inline void TokenRequestSpec::_internal_set_expirationseconds(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.expirationseconds_ = value;
}
inline void TokenRequestSpec::set_expirationseconds(int64_t value) {
  _internal_set_expirationseconds(value);
  // @@protoc_insertion_point(field_set:k8s.io.api.authentication.v1.TokenRequestSpec.expirationSeconds)
}

// optional .k8s.io.api.authentication.v1.BoundObjectReference boundObjectRef = 3;
inline bool TokenRequestSpec::_internal_has_boundobjectref() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.boundobjectref_ != nullptr);
  return value;
}
inline bool TokenRequestSpec::has_boundobjectref() const {
  return _internal_has_boundobjectref();
}
inline void TokenRequestSpec::clear_boundobjectref() {
  if (_impl_.boundobjectref_ != nullptr) _impl_.boundobjectref_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::k8s::io::api::authentication::v1::BoundObjectReference& TokenRequestSpec::_internal_boundobjectref() const {
  const ::k8s::io::api::authentication::v1::BoundObjectReference* p = _impl_.boundobjectref_;
  return p != nullptr ? *p : reinterpret_cast<const ::k8s::io::api::authentication::v1::BoundObjectReference&>(
      ::k8s::io::api::authentication::v1::_BoundObjectReference_default_instance_);
}
inline const ::k8s::io::api::authentication::v1::BoundObjectReference& TokenRequestSpec::boundobjectref() const {
  // @@protoc_insertion_point(field_get:k8s.io.api.authentication.v1.TokenRequestSpec.boundObjectRef)
  return _internal_boundobjectref();
}
inline void TokenRequestSpec::unsafe_arena_set_allocated_boundobjectref(
    ::k8s::io::api::authentication::v1::BoundObjectReference* boundobjectref) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.boundobjectref_);
  }
  _impl_.boundobjectref_ = boundobjectref;
  if (boundobjectref) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:k8s.io.api.authentication.v1.TokenRequestSpec.boundObjectRef)
}
inline ::k8s::io::api::authentication::v1::BoundObjectReference* TokenRequestSpec::release_boundobjectref() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::k8s::io::api::authentication::v1::BoundObjectReference* temp = _impl_.boundobjectref_;
  _impl_.boundobjectref_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::k8s::io::api::authentication::v1::BoundObjectReference* TokenRequestSpec::unsafe_arena_release_boundobjectref() {
  // @@protoc_insertion_point(field_release:k8s.io.api.authentication.v1.TokenRequestSpec.boundObjectRef)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::k8s::io::api::authentication::v1::BoundObjectReference* temp = _impl_.boundobjectref_;
  _impl_.boundobjectref_ = nullptr;
  return temp;
}
inline ::k8s::io::api::authentication::v1::BoundObjectReference* TokenRequestSpec::_internal_mutable_boundobjectref() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.boundobjectref_ == nullptr) {
    auto* p = CreateMaybeMessage<::k8s::io::api::authentication::v1::BoundObjectReference>(GetArenaForAllocation());
    _impl_.boundobjectref_ = p;
  }
  return _impl_.boundobjectref_;
}
inline ::k8s::io::api::authentication::v1::BoundObjectReference* TokenRequestSpec::mutable_boundobjectref() {
  ::k8s::io::api::authentication::v1::BoundObjectReference* _msg = _internal_mutable_boundobjectref();
  // @@protoc_insertion_point(field_mutable:k8s.io.api.authentication.v1.TokenRequestSpec.boundObjectRef)
  return _msg;
}
inline void TokenRequestSpec::set_allocated_boundobjectref(::k8s::io::api::authentication::v1::BoundObjectReference* boundobjectref) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.boundobjectref_;
  }
  if (boundobjectref) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(boundobjectref);
    if (message_arena != submessage_arena) {
      boundobjectref = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, boundobjectref, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.boundobjectref_ = boundobjectref;
  // @@protoc_insertion_point(field_set_allocated:k8s.io.api.authentication.v1.TokenRequestSpec.boundObjectRef)
}

// -------------------------------------------------------------------

// TokenRequestStatus

// optional string token = 1;
inline bool TokenRequestStatus::_internal_has_token() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TokenRequestStatus::has_token() const {
  return _internal_has_token();
}
inline void TokenRequestStatus::clear_token() {
  _impl_.token_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TokenRequestStatus::token() const {
  // @@protoc_insertion_point(field_get:k8s.io.api.authentication.v1.TokenRequestStatus.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TokenRequestStatus::set_token(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:k8s.io.api.authentication.v1.TokenRequestStatus.token)
}
inline std::string* TokenRequestStatus::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:k8s.io.api.authentication.v1.TokenRequestStatus.token)
  return _s;
}
inline const std::string& TokenRequestStatus::_internal_token() const {
  return _impl_.token_.Get();
}
inline void TokenRequestStatus::_internal_set_token(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.token_.Set(value, GetArenaForAllocation());
}
inline std::string* TokenRequestStatus::_internal_mutable_token() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.token_.Mutable(GetArenaForAllocation());
}
inline std::string* TokenRequestStatus::release_token() {
  // @@protoc_insertion_point(field_release:k8s.io.api.authentication.v1.TokenRequestStatus.token)
  if (!_internal_has_token()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.token_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.token_.IsDefault()) {
    _impl_.token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TokenRequestStatus::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.token_.SetAllocated(token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.token_.IsDefault()) {
    _impl_.token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:k8s.io.api.authentication.v1.TokenRequestStatus.token)
}

// optional .k8s.io.apimachinery.pkg.apis.meta.v1.Time expirationTimestamp = 2;
inline bool TokenRequestStatus::_internal_has_expirationtimestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.expirationtimestamp_ != nullptr);
  return value;
}
inline bool TokenRequestStatus::has_expirationtimestamp() const {
  return _internal_has_expirationtimestamp();
}
inline const ::k8s::io::apimachinery::pkg::apis::meta::v1::Time& TokenRequestStatus::_internal_expirationtimestamp() const {
  const ::k8s::io::apimachinery::pkg::apis::meta::v1::Time* p = _impl_.expirationtimestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::k8s::io::apimachinery::pkg::apis::meta::v1::Time&>(
      ::k8s::io::apimachinery::pkg::apis::meta::v1::_Time_default_instance_);
}
inline const ::k8s::io::apimachinery::pkg::apis::meta::v1::Time& TokenRequestStatus::expirationtimestamp() const {
  // @@protoc_insertion_point(field_get:k8s.io.api.authentication.v1.TokenRequestStatus.expirationTimestamp)
  return _internal_expirationtimestamp();
}
inline void TokenRequestStatus::unsafe_arena_set_allocated_expirationtimestamp(
    ::k8s::io::apimachinery::pkg::apis::meta::v1::Time* expirationtimestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expirationtimestamp_);
  }
  _impl_.expirationtimestamp_ = expirationtimestamp;
  if (expirationtimestamp) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:k8s.io.api.authentication.v1.TokenRequestStatus.expirationTimestamp)
}
inline ::k8s::io::apimachinery::pkg::apis::meta::v1::Time* TokenRequestStatus::release_expirationtimestamp() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::k8s::io::apimachinery::pkg::apis::meta::v1::Time* temp = _impl_.expirationtimestamp_;
  _impl_.expirationtimestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::k8s::io::apimachinery::pkg::apis::meta::v1::Time* TokenRequestStatus::unsafe_arena_release_expirationtimestamp() {
  // @@protoc_insertion_point(field_release:k8s.io.api.authentication.v1.TokenRequestStatus.expirationTimestamp)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::k8s::io::apimachinery::pkg::apis::meta::v1::Time* temp = _impl_.expirationtimestamp_;
  _impl_.expirationtimestamp_ = nullptr;
  return temp;
}
inline ::k8s::io::apimachinery::pkg::apis::meta::v1::Time* TokenRequestStatus::_internal_mutable_expirationtimestamp() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.expirationtimestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::k8s::io::apimachinery::pkg::apis::meta::v1::Time>(GetArenaForAllocation());
    _impl_.expirationtimestamp_ = p;
  }
  return _impl_.expirationtimestamp_;
}
inline ::k8s::io::apimachinery::pkg::apis::meta::v1::Time* TokenRequestStatus::mutable_expirationtimestamp() {
  ::k8s::io::apimachinery::pkg::apis::meta::v1::Time* _msg = _internal_mutable_expirationtimestamp();
  // @@protoc_insertion_point(field_mutable:k8s.io.api.authentication.v1.TokenRequestStatus.expirationTimestamp)
  return _msg;
}
inline void TokenRequestStatus::set_allocated_expirationtimestamp(::k8s::io::apimachinery::pkg::apis::meta::v1::Time* expirationtimestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expirationtimestamp_);
  }
  if (expirationtimestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expirationtimestamp));
    if (message_arena != submessage_arena) {
      expirationtimestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expirationtimestamp, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.expirationtimestamp_ = expirationtimestamp;
  // @@protoc_insertion_point(field_set_allocated:k8s.io.api.authentication.v1.TokenRequestStatus.expirationTimestamp)
}

// -------------------------------------------------------------------

// TokenReview

// optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
inline bool TokenReview::_internal_has_metadata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.metadata_ != nullptr);
  return value;
}
inline bool TokenReview::has_metadata() const {
  return _internal_has_metadata();
}
inline const ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta& TokenReview::_internal_metadata() const {
  const ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta* p = _impl_.metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta&>(
      ::k8s::io::apimachinery::pkg::apis::meta::v1::_ObjectMeta_default_instance_);
}
inline const ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta& TokenReview::metadata() const {
  // @@protoc_insertion_point(field_get:k8s.io.api.authentication.v1.TokenReview.metadata)
  return _internal_metadata();
}
inline void TokenReview::unsafe_arena_set_allocated_metadata(
    ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta* metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metadata_);
  }
  _impl_.metadata_ = metadata;
  if (metadata) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:k8s.io.api.authentication.v1.TokenReview.metadata)
}
inline ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta* TokenReview::release_metadata() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta* temp = _impl_.metadata_;
  _impl_.metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta* TokenReview::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:k8s.io.api.authentication.v1.TokenReview.metadata)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta* temp = _impl_.metadata_;
  _impl_.metadata_ = nullptr;
  return temp;
}
inline ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta* TokenReview::_internal_mutable_metadata() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta>(GetArenaForAllocation());
    _impl_.metadata_ = p;
  }
  return _impl_.metadata_;
}
inline ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta* TokenReview::mutable_metadata() {
  ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:k8s.io.api.authentication.v1.TokenReview.metadata)
  return _msg;
}
inline void TokenReview::set_allocated_metadata(::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metadata_);
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata));
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:k8s.io.api.authentication.v1.TokenReview.metadata)
}

// optional .k8s.io.api.authentication.v1.TokenReviewSpec spec = 2;
inline bool TokenReview::_internal_has_spec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.spec_ != nullptr);
  return value;
}
inline bool TokenReview::has_spec() const {
  return _internal_has_spec();
}
inline void TokenReview::clear_spec() {
  if (_impl_.spec_ != nullptr) _impl_.spec_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::k8s::io::api::authentication::v1::TokenReviewSpec& TokenReview::_internal_spec() const {
  const ::k8s::io::api::authentication::v1::TokenReviewSpec* p = _impl_.spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::k8s::io::api::authentication::v1::TokenReviewSpec&>(
      ::k8s::io::api::authentication::v1::_TokenReviewSpec_default_instance_);
}
inline const ::k8s::io::api::authentication::v1::TokenReviewSpec& TokenReview::spec() const {
  // @@protoc_insertion_point(field_get:k8s.io.api.authentication.v1.TokenReview.spec)
  return _internal_spec();
}
inline void TokenReview::unsafe_arena_set_allocated_spec(
    ::k8s::io::api::authentication::v1::TokenReviewSpec* spec) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.spec_);
  }
  _impl_.spec_ = spec;
  if (spec) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:k8s.io.api.authentication.v1.TokenReview.spec)
}
inline ::k8s::io::api::authentication::v1::TokenReviewSpec* TokenReview::release_spec() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::k8s::io::api::authentication::v1::TokenReviewSpec* temp = _impl_.spec_;
  _impl_.spec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::k8s::io::api::authentication::v1::TokenReviewSpec* TokenReview::unsafe_arena_release_spec() {
  // @@protoc_insertion_point(field_release:k8s.io.api.authentication.v1.TokenReview.spec)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::k8s::io::api::authentication::v1::TokenReviewSpec* temp = _impl_.spec_;
  _impl_.spec_ = nullptr;
  return temp;
}
inline ::k8s::io::api::authentication::v1::TokenReviewSpec* TokenReview::_internal_mutable_spec() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::k8s::io::api::authentication::v1::TokenReviewSpec>(GetArenaForAllocation());
    _impl_.spec_ = p;
  }
  return _impl_.spec_;
}
inline ::k8s::io::api::authentication::v1::TokenReviewSpec* TokenReview::mutable_spec() {
  ::k8s::io::api::authentication::v1::TokenReviewSpec* _msg = _internal_mutable_spec();
  // @@protoc_insertion_point(field_mutable:k8s.io.api.authentication.v1.TokenReview.spec)
  return _msg;
}
inline void TokenReview::set_allocated_spec(::k8s::io::api::authentication::v1::TokenReviewSpec* spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.spec_;
  }
  if (spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(spec);
    if (message_arena != submessage_arena) {
      spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spec, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.spec_ = spec;
  // @@protoc_insertion_point(field_set_allocated:k8s.io.api.authentication.v1.TokenReview.spec)
}

// optional .k8s.io.api.authentication.v1.TokenReviewStatus status = 3;
inline bool TokenReview::_internal_has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.status_ != nullptr);
  return value;
}
inline bool TokenReview::has_status() const {
  return _internal_has_status();
}
inline void TokenReview::clear_status() {
  if (_impl_.status_ != nullptr) _impl_.status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::k8s::io::api::authentication::v1::TokenReviewStatus& TokenReview::_internal_status() const {
  const ::k8s::io::api::authentication::v1::TokenReviewStatus* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::k8s::io::api::authentication::v1::TokenReviewStatus&>(
      ::k8s::io::api::authentication::v1::_TokenReviewStatus_default_instance_);
}
inline const ::k8s::io::api::authentication::v1::TokenReviewStatus& TokenReview::status() const {
  // @@protoc_insertion_point(field_get:k8s.io.api.authentication.v1.TokenReview.status)
  return _internal_status();
}
inline void TokenReview::unsafe_arena_set_allocated_status(
    ::k8s::io::api::authentication::v1::TokenReviewStatus* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:k8s.io.api.authentication.v1.TokenReview.status)
}
inline ::k8s::io::api::authentication::v1::TokenReviewStatus* TokenReview::release_status() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::k8s::io::api::authentication::v1::TokenReviewStatus* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::k8s::io::api::authentication::v1::TokenReviewStatus* TokenReview::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:k8s.io.api.authentication.v1.TokenReview.status)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::k8s::io::api::authentication::v1::TokenReviewStatus* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::k8s::io::api::authentication::v1::TokenReviewStatus* TokenReview::_internal_mutable_status() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::k8s::io::api::authentication::v1::TokenReviewStatus>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::k8s::io::api::authentication::v1::TokenReviewStatus* TokenReview::mutable_status() {
  ::k8s::io::api::authentication::v1::TokenReviewStatus* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:k8s.io.api.authentication.v1.TokenReview.status)
  return _msg;
}
inline void TokenReview::set_allocated_status(::k8s::io::api::authentication::v1::TokenReviewStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:k8s.io.api.authentication.v1.TokenReview.status)
}

// -------------------------------------------------------------------

// TokenReviewSpec

// optional string token = 1;
inline bool TokenReviewSpec::_internal_has_token() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TokenReviewSpec::has_token() const {
  return _internal_has_token();
}
inline void TokenReviewSpec::clear_token() {
  _impl_.token_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TokenReviewSpec::token() const {
  // @@protoc_insertion_point(field_get:k8s.io.api.authentication.v1.TokenReviewSpec.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TokenReviewSpec::set_token(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:k8s.io.api.authentication.v1.TokenReviewSpec.token)
}
inline std::string* TokenReviewSpec::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:k8s.io.api.authentication.v1.TokenReviewSpec.token)
  return _s;
}
inline const std::string& TokenReviewSpec::_internal_token() const {
  return _impl_.token_.Get();
}
inline void TokenReviewSpec::_internal_set_token(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.token_.Set(value, GetArenaForAllocation());
}
inline std::string* TokenReviewSpec::_internal_mutable_token() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.token_.Mutable(GetArenaForAllocation());
}
inline std::string* TokenReviewSpec::release_token() {
  // @@protoc_insertion_point(field_release:k8s.io.api.authentication.v1.TokenReviewSpec.token)
  if (!_internal_has_token()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.token_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.token_.IsDefault()) {
    _impl_.token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TokenReviewSpec::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.token_.SetAllocated(token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.token_.IsDefault()) {
    _impl_.token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:k8s.io.api.authentication.v1.TokenReviewSpec.token)
}

// repeated string audiences = 2;
inline int TokenReviewSpec::_internal_audiences_size() const {
  return _impl_.audiences_.size();
}
inline int TokenReviewSpec::audiences_size() const {
  return _internal_audiences_size();
}
inline void TokenReviewSpec::clear_audiences() {
  _impl_.audiences_.Clear();
}
inline std::string* TokenReviewSpec::add_audiences() {
  std::string* _s = _internal_add_audiences();
  // @@protoc_insertion_point(field_add_mutable:k8s.io.api.authentication.v1.TokenReviewSpec.audiences)
  return _s;
}
inline const std::string& TokenReviewSpec::_internal_audiences(int index) const {
  return _impl_.audiences_.Get(index);
}
inline const std::string& TokenReviewSpec::audiences(int index) const {
  // @@protoc_insertion_point(field_get:k8s.io.api.authentication.v1.TokenReviewSpec.audiences)
  return _internal_audiences(index);
}
inline std::string* TokenReviewSpec::mutable_audiences(int index) {
  // @@protoc_insertion_point(field_mutable:k8s.io.api.authentication.v1.TokenReviewSpec.audiences)
  return _impl_.audiences_.Mutable(index);
}
inline void TokenReviewSpec::set_audiences(int index, const std::string& value) {
  _impl_.audiences_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:k8s.io.api.authentication.v1.TokenReviewSpec.audiences)
}
inline void TokenReviewSpec::set_audiences(int index, std::string&& value) {
  _impl_.audiences_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:k8s.io.api.authentication.v1.TokenReviewSpec.audiences)
}
inline void TokenReviewSpec::set_audiences(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.audiences_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:k8s.io.api.authentication.v1.TokenReviewSpec.audiences)
}
inline void TokenReviewSpec::set_audiences(int index, const char* value, size_t size) {
  _impl_.audiences_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:k8s.io.api.authentication.v1.TokenReviewSpec.audiences)
}
inline std::string* TokenReviewSpec::_internal_add_audiences() {
  return _impl_.audiences_.Add();
}
inline void TokenReviewSpec::add_audiences(const std::string& value) {
  _impl_.audiences_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:k8s.io.api.authentication.v1.TokenReviewSpec.audiences)
}
inline void TokenReviewSpec::add_audiences(std::string&& value) {
  _impl_.audiences_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:k8s.io.api.authentication.v1.TokenReviewSpec.audiences)
}
inline void TokenReviewSpec::add_audiences(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.audiences_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:k8s.io.api.authentication.v1.TokenReviewSpec.audiences)
}
inline void TokenReviewSpec::add_audiences(const char* value, size_t size) {
  _impl_.audiences_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:k8s.io.api.authentication.v1.TokenReviewSpec.audiences)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TokenReviewSpec::audiences() const {
  // @@protoc_insertion_point(field_list:k8s.io.api.authentication.v1.TokenReviewSpec.audiences)
  return _impl_.audiences_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TokenReviewSpec::mutable_audiences() {
  // @@protoc_insertion_point(field_mutable_list:k8s.io.api.authentication.v1.TokenReviewSpec.audiences)
  return &_impl_.audiences_;
}

// -------------------------------------------------------------------

// TokenReviewStatus

// optional bool authenticated = 1;
inline bool TokenReviewStatus::_internal_has_authenticated() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TokenReviewStatus::has_authenticated() const {
  return _internal_has_authenticated();
}
inline void TokenReviewStatus::clear_authenticated() {
  _impl_.authenticated_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool TokenReviewStatus::_internal_authenticated() const {
  return _impl_.authenticated_;
}
inline bool TokenReviewStatus::authenticated() const {
  // @@protoc_insertion_point(field_get:k8s.io.api.authentication.v1.TokenReviewStatus.authenticated)
  return _internal_authenticated();
}
inline void TokenReviewStatus::_internal_set_authenticated(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.authenticated_ = value;
}
inline void TokenReviewStatus::set_authenticated(bool value) {
  _internal_set_authenticated(value);
  // @@protoc_insertion_point(field_set:k8s.io.api.authentication.v1.TokenReviewStatus.authenticated)
}

// optional .k8s.io.api.authentication.v1.UserInfo user = 2;
inline bool TokenReviewStatus::_internal_has_user() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.user_ != nullptr);
  return value;
}
inline bool TokenReviewStatus::has_user() const {
  return _internal_has_user();
}
inline void TokenReviewStatus::clear_user() {
  if (_impl_.user_ != nullptr) _impl_.user_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::k8s::io::api::authentication::v1::UserInfo& TokenReviewStatus::_internal_user() const {
  const ::k8s::io::api::authentication::v1::UserInfo* p = _impl_.user_;
  return p != nullptr ? *p : reinterpret_cast<const ::k8s::io::api::authentication::v1::UserInfo&>(
      ::k8s::io::api::authentication::v1::_UserInfo_default_instance_);
}
inline const ::k8s::io::api::authentication::v1::UserInfo& TokenReviewStatus::user() const {
  // @@protoc_insertion_point(field_get:k8s.io.api.authentication.v1.TokenReviewStatus.user)
  return _internal_user();
}
inline void TokenReviewStatus::unsafe_arena_set_allocated_user(
    ::k8s::io::api::authentication::v1::UserInfo* user) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_);
  }
  _impl_.user_ = user;
  if (user) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:k8s.io.api.authentication.v1.TokenReviewStatus.user)
}
inline ::k8s::io::api::authentication::v1::UserInfo* TokenReviewStatus::release_user() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::k8s::io::api::authentication::v1::UserInfo* temp = _impl_.user_;
  _impl_.user_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::k8s::io::api::authentication::v1::UserInfo* TokenReviewStatus::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:k8s.io.api.authentication.v1.TokenReviewStatus.user)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::k8s::io::api::authentication::v1::UserInfo* temp = _impl_.user_;
  _impl_.user_ = nullptr;
  return temp;
}
inline ::k8s::io::api::authentication::v1::UserInfo* TokenReviewStatus::_internal_mutable_user() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.user_ == nullptr) {
    auto* p = CreateMaybeMessage<::k8s::io::api::authentication::v1::UserInfo>(GetArenaForAllocation());
    _impl_.user_ = p;
  }
  return _impl_.user_;
}
inline ::k8s::io::api::authentication::v1::UserInfo* TokenReviewStatus::mutable_user() {
  ::k8s::io::api::authentication::v1::UserInfo* _msg = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:k8s.io.api.authentication.v1.TokenReviewStatus.user)
  return _msg;
}
inline void TokenReviewStatus::set_allocated_user(::k8s::io::api::authentication::v1::UserInfo* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.user_ = user;
  // @@protoc_insertion_point(field_set_allocated:k8s.io.api.authentication.v1.TokenReviewStatus.user)
}

// repeated string audiences = 4;
inline int TokenReviewStatus::_internal_audiences_size() const {
  return _impl_.audiences_.size();
}
inline int TokenReviewStatus::audiences_size() const {
  return _internal_audiences_size();
}
inline void TokenReviewStatus::clear_audiences() {
  _impl_.audiences_.Clear();
}
inline std::string* TokenReviewStatus::add_audiences() {
  std::string* _s = _internal_add_audiences();
  // @@protoc_insertion_point(field_add_mutable:k8s.io.api.authentication.v1.TokenReviewStatus.audiences)
  return _s;
}
inline const std::string& TokenReviewStatus::_internal_audiences(int index) const {
  return _impl_.audiences_.Get(index);
}
inline const std::string& TokenReviewStatus::audiences(int index) const {
  // @@protoc_insertion_point(field_get:k8s.io.api.authentication.v1.TokenReviewStatus.audiences)
  return _internal_audiences(index);
}
inline std::string* TokenReviewStatus::mutable_audiences(int index) {
  // @@protoc_insertion_point(field_mutable:k8s.io.api.authentication.v1.TokenReviewStatus.audiences)
  return _impl_.audiences_.Mutable(index);
}
inline void TokenReviewStatus::set_audiences(int index, const std::string& value) {
  _impl_.audiences_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:k8s.io.api.authentication.v1.TokenReviewStatus.audiences)
}
inline void TokenReviewStatus::set_audiences(int index, std::string&& value) {
  _impl_.audiences_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:k8s.io.api.authentication.v1.TokenReviewStatus.audiences)
}
inline void TokenReviewStatus::set_audiences(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.audiences_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:k8s.io.api.authentication.v1.TokenReviewStatus.audiences)
}
inline void TokenReviewStatus::set_audiences(int index, const char* value, size_t size) {
  _impl_.audiences_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:k8s.io.api.authentication.v1.TokenReviewStatus.audiences)
}
inline std::string* TokenReviewStatus::_internal_add_audiences() {
  return _impl_.audiences_.Add();
}
inline void TokenReviewStatus::add_audiences(const std::string& value) {
  _impl_.audiences_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:k8s.io.api.authentication.v1.TokenReviewStatus.audiences)
}
inline void TokenReviewStatus::add_audiences(std::string&& value) {
  _impl_.audiences_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:k8s.io.api.authentication.v1.TokenReviewStatus.audiences)
}
inline void TokenReviewStatus::add_audiences(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.audiences_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:k8s.io.api.authentication.v1.TokenReviewStatus.audiences)
}
inline void TokenReviewStatus::add_audiences(const char* value, size_t size) {
  _impl_.audiences_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:k8s.io.api.authentication.v1.TokenReviewStatus.audiences)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TokenReviewStatus::audiences() const {
  // @@protoc_insertion_point(field_list:k8s.io.api.authentication.v1.TokenReviewStatus.audiences)
  return _impl_.audiences_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TokenReviewStatus::mutable_audiences() {
  // @@protoc_insertion_point(field_mutable_list:k8s.io.api.authentication.v1.TokenReviewStatus.audiences)
  return &_impl_.audiences_;
}

// optional string error = 3;
inline bool TokenReviewStatus::_internal_has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TokenReviewStatus::has_error() const {
  return _internal_has_error();
}
inline void TokenReviewStatus::clear_error() {
  _impl_.error_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TokenReviewStatus::error() const {
  // @@protoc_insertion_point(field_get:k8s.io.api.authentication.v1.TokenReviewStatus.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TokenReviewStatus::set_error(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.error_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:k8s.io.api.authentication.v1.TokenReviewStatus.error)
}
inline std::string* TokenReviewStatus::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:k8s.io.api.authentication.v1.TokenReviewStatus.error)
  return _s;
}
inline const std::string& TokenReviewStatus::_internal_error() const {
  return _impl_.error_.Get();
}
inline void TokenReviewStatus::_internal_set_error(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.error_.Set(value, GetArenaForAllocation());
}
inline std::string* TokenReviewStatus::_internal_mutable_error() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.error_.Mutable(GetArenaForAllocation());
}
inline std::string* TokenReviewStatus::release_error() {
  // @@protoc_insertion_point(field_release:k8s.io.api.authentication.v1.TokenReviewStatus.error)
  if (!_internal_has_error()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.error_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TokenReviewStatus::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.error_.SetAllocated(error, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:k8s.io.api.authentication.v1.TokenReviewStatus.error)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// UserInfo

// optional string username = 1;
inline bool UserInfo::_internal_has_username() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UserInfo::has_username() const {
  return _internal_has_username();
}
inline void UserInfo::clear_username() {
  _impl_.username_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UserInfo::username() const {
  // @@protoc_insertion_point(field_get:k8s.io.api.authentication.v1.UserInfo.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserInfo::set_username(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:k8s.io.api.authentication.v1.UserInfo.username)
}
inline std::string* UserInfo::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:k8s.io.api.authentication.v1.UserInfo.username)
  return _s;
}
inline const std::string& UserInfo::_internal_username() const {
  return _impl_.username_.Get();
}
inline void UserInfo::_internal_set_username(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.username_.Set(value, GetArenaForAllocation());
}
inline std::string* UserInfo::_internal_mutable_username() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.username_.Mutable(GetArenaForAllocation());
}
inline std::string* UserInfo::release_username() {
  // @@protoc_insertion_point(field_release:k8s.io.api.authentication.v1.UserInfo.username)
  if (!_internal_has_username()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.username_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void UserInfo::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.username_.SetAllocated(username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:k8s.io.api.authentication.v1.UserInfo.username)
}

// optional string uid = 2;
inline bool UserInfo::_internal_has_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UserInfo::has_uid() const {
  return _internal_has_uid();
}
inline void UserInfo::clear_uid() {
  _impl_.uid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& UserInfo::uid() const {
  // @@protoc_insertion_point(field_get:k8s.io.api.authentication.v1.UserInfo.uid)
  return _internal_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserInfo::set_uid(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.uid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:k8s.io.api.authentication.v1.UserInfo.uid)
}
inline std::string* UserInfo::mutable_uid() {
  std::string* _s = _internal_mutable_uid();
  // @@protoc_insertion_point(field_mutable:k8s.io.api.authentication.v1.UserInfo.uid)
  return _s;
}
inline const std::string& UserInfo::_internal_uid() const {
  return _impl_.uid_.Get();
}
inline void UserInfo::_internal_set_uid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.uid_.Set(value, GetArenaForAllocation());
}
inline std::string* UserInfo::_internal_mutable_uid() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.uid_.Mutable(GetArenaForAllocation());
}
inline std::string* UserInfo::release_uid() {
  // @@protoc_insertion_point(field_release:k8s.io.api.authentication.v1.UserInfo.uid)
  if (!_internal_has_uid()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.uid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uid_.IsDefault()) {
    _impl_.uid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void UserInfo::set_allocated_uid(std::string* uid) {
  if (uid != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.uid_.SetAllocated(uid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uid_.IsDefault()) {
    _impl_.uid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:k8s.io.api.authentication.v1.UserInfo.uid)
}

// repeated string groups = 3;
inline int UserInfo::_internal_groups_size() const {
  return _impl_.groups_.size();
}
inline int UserInfo::groups_size() const {
  return _internal_groups_size();
}
inline void UserInfo::clear_groups() {
  _impl_.groups_.Clear();
}
inline std::string* UserInfo::add_groups() {
  std::string* _s = _internal_add_groups();
  // @@protoc_insertion_point(field_add_mutable:k8s.io.api.authentication.v1.UserInfo.groups)
  return _s;
}
inline const std::string& UserInfo::_internal_groups(int index) const {
  return _impl_.groups_.Get(index);
}
inline const std::string& UserInfo::groups(int index) const {
  // @@protoc_insertion_point(field_get:k8s.io.api.authentication.v1.UserInfo.groups)
  return _internal_groups(index);
}
inline std::string* UserInfo::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:k8s.io.api.authentication.v1.UserInfo.groups)
  return _impl_.groups_.Mutable(index);
}
inline void UserInfo::set_groups(int index, const std::string& value) {
  _impl_.groups_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:k8s.io.api.authentication.v1.UserInfo.groups)
}
inline void UserInfo::set_groups(int index, std::string&& value) {
  _impl_.groups_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:k8s.io.api.authentication.v1.UserInfo.groups)
}
inline void UserInfo::set_groups(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.groups_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:k8s.io.api.authentication.v1.UserInfo.groups)
}
inline void UserInfo::set_groups(int index, const char* value, size_t size) {
  _impl_.groups_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:k8s.io.api.authentication.v1.UserInfo.groups)
}
inline std::string* UserInfo::_internal_add_groups() {
  return _impl_.groups_.Add();
}
inline void UserInfo::add_groups(const std::string& value) {
  _impl_.groups_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:k8s.io.api.authentication.v1.UserInfo.groups)
}
inline void UserInfo::add_groups(std::string&& value) {
  _impl_.groups_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:k8s.io.api.authentication.v1.UserInfo.groups)
}
inline void UserInfo::add_groups(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.groups_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:k8s.io.api.authentication.v1.UserInfo.groups)
}
inline void UserInfo::add_groups(const char* value, size_t size) {
  _impl_.groups_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:k8s.io.api.authentication.v1.UserInfo.groups)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
UserInfo::groups() const {
  // @@protoc_insertion_point(field_list:k8s.io.api.authentication.v1.UserInfo.groups)
  return _impl_.groups_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
UserInfo::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:k8s.io.api.authentication.v1.UserInfo.groups)
  return &_impl_.groups_;
}

// map<string, .k8s.io.api.authentication.v1.ExtraValue> extra = 4;
inline int UserInfo::_internal_extra_size() const {
  return _impl_.extra_.size();
}
inline int UserInfo::extra_size() const {
  return _internal_extra_size();
}
inline void UserInfo::clear_extra() {
  _impl_.extra_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::k8s::io::api::authentication::v1::ExtraValue >&
UserInfo::_internal_extra() const {
  return _impl_.extra_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::k8s::io::api::authentication::v1::ExtraValue >&
UserInfo::extra() const {
  // @@protoc_insertion_point(field_map:k8s.io.api.authentication.v1.UserInfo.extra)
  return _internal_extra();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::k8s::io::api::authentication::v1::ExtraValue >*
UserInfo::_internal_mutable_extra() {
  return _impl_.extra_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::k8s::io::api::authentication::v1::ExtraValue >*
UserInfo::mutable_extra() {
  // @@protoc_insertion_point(field_mutable_map:k8s.io.api.authentication.v1.UserInfo.extra)
  return _internal_mutable_extra();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace authentication
}  // namespace api
}  // namespace io
}  // namespace k8s

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_k8s_2eio_2fapi_2fauthentication_2fv1_2fgenerated_2eproto
